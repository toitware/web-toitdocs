{
  "sdk_version": "v0.11.2-improve-toitdoc-output-57-77d7d4b7",
  "libraries": [
    {
      "lib_name": "lib",
      "lib_modules": [
        {
          "module_classes": [
            {
              "class_name": "Message",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "Deserialize",
                    "parameters": [
                      {
                        "param_name": "msg",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Message",
                    "return_path": "lib/pub_sub_msg.toit"
                  },
                  {
                    "function_name": "Pub",
                    "parameters": [
                      {
                        "param_name": "topic",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "payload",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Message",
                    "return_path": "lib/pub_sub_msg.toit"
                  },
                  {
                    "function_name": "Sub",
                    "parameters": [
                      {
                        "param_name": "topic",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Message",
                    "return_path": "lib/pub_sub_msg.toit"
                  },
                  {
                    "function_name": "Unsub",
                    "parameters": [
                      {
                        "param_name": "topic",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Message",
                    "return_path": "lib/pub_sub_msg.toit"
                  },
                  {
                    "function_name": "Nop",
                    "return_type": "Message",
                    "return_path": "lib/pub_sub_msg.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "type",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "topic",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "payload",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Message",
                    "return_path": "lib/pub_sub_msg.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "type", "field_type": "any" },
                    { "field_name": "topic", "field_type": "any" },
                    { "field_name": "payload", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "pub_sub_msg.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "serialize",
                "parameters": [
                  {
                    "param_name": "object",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "deserialize",
                "parameters": [
                  {
                    "param_name": "bytes",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ]
          },
          "module": "serialization.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "ByteOrder",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "array_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "ByteOrder",
                    "return_path": "lib/binary.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "uint8",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "int8",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put_int8",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "val",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "put_uint8",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "val",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "LittleEndian",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "array",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "LittleEndian",
                    "return_path": "lib/binary.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "uint16",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "int16",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put_int16",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "i16",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put_uint16",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "u16",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "uint32",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "int32",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put_int32",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "i32",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "put_uint32",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "u32",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "int64",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put_int64",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "i64",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "ByteOrder",
              "extend_path": "lib/binary.toit"
            },
            {
              "class_name": "BigEndian",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "array",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "BigEndian",
                    "return_path": "lib/binary.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "uint16",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "int16",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put_int16",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "i16",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put_uint16",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "u16",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "uint32",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "int32",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put_int32",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "i32",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "put_uint32",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "u32",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "int64",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put_int64",
                      "parameters": [
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "i64",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "ByteOrder",
              "extend_path": "lib/binary.toit"
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "INT8_MIN" },
              { "global_name": "INT8_MAX" },
              { "global_name": "INT16_MIN" },
              { "global_name": "INT16_MAX" },
              { "global_name": "INT32_MIN" },
              { "global_name": "INT32_MAX" },
              { "global_name": "UINT8_MAX" }
            ]
          },
          "module": "binary.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Mutex",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Latch",
              "class_structure": {
                "members": {
                  "methods": [
                    { "function_name": "get", "return_type": "any" },
                    {
                      "function_name": "set",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Once",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "initializer_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Lambda",
                        "path": "core/objects.toit"
                      }
                    ],
                    "return_type": "Once",
                    "return_path": "lib/monitor.toit"
                  }
                ],
                "members": {
                  "methods": [{ "function_name": "get", "return_type": "any" }]
                }
              }
            },
            {
              "class_name": "Semaphore",
              "class_structure": {
                "members": {
                  "methods": [
                    { "function_name": "up", "return_type": "none" },
                    { "function_name": "down", "return_type": "none" }
                  ]
                }
              }
            },
            {
              "class_name": "Channel",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "capacity",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Channel",
                    "return_path": "lib/monitor.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "send",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "receive", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "Mailbox",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "send",
                      "parameters": [
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "receive", "return_type": "any" },
                    {
                      "function_name": "reply",
                      "parameters": [
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "ResourceState",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "group_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "resource_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "ResourceState",
                    "return_path": "lib/monitor.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "group", "return_type": "any" },
                    { "function_name": "resource", "return_type": "any" },
                    {
                      "function_name": "wait_for_state",
                      "parameters": [
                        {
                          "param_name": "bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "wait", "return_type": "any" },
                    { "function_name": "clear", "return_type": "none" },
                    {
                      "function_name": "clear_state",
                      "parameters": [
                        {
                          "param_name": "bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "dispose", "return_type": "none" }
                  ]
                }
              }
            },
            {
              "class_name": "StateTracker",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "wait_for_new_state",
                      "parameters": [
                        {
                          "param_name": "known_state",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "Map",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "[]=",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "Used to notify some listeners of a set of states."
                      }
                    ],
                    [
                      { "text": "The listener calls " },
                      {
                        "text": "wait_for_new_state",
                        "path": "lib/monitor.toit/StateTracker"
                      },
                      { "text": " with a set of key-values that are" }
                    ],
                    [
                      {
                        "text": "its current knowledge of the state. When the state changes, the get method"
                      }
                    ],
                    [
                      {
                        "text": "returns with a new map, giving the current state."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "module": "monitor.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "RPC",
              "class_structure": {
                "statics": [
                  { "function_name": "instance", "return_type": "any" }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "invoke",
                      "parameters": [
                        {
                          "param_name": "procedure_name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "args",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "on_message",
                      "parameters": [
                        {
                          "param_name": "type",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "gid",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "pid",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "args",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "invoke",
                "parameters": [
                  {
                    "param_name": "procedure_name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  },
                  {
                    "param_name": "args",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "List",
                    "path": "core/collections.toit"
                  }
                ],
                "return_type": "any"
              }
            ]
          },
          "module": "rpc.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Reader",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "data_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Reader",
                    "return_path": "lib/bytes.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Producer",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "size",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "write_to",
                      "parameters": [
                        {
                          "param_name": "byte_array",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "offset",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "Producer that can produce a fixed size payload of data, on demand. Can be used"
                      }
                    ],
                    [
                      {
                        "text": "to generate data for serializeation, when the amount of data is known ahead of"
                      }
                    ],
                    [{ "text": "time." }]
                  ]
                }
              ]
            },
            {
              "class_name": "Buffer",
              "class_structure": {
                "members": {
                  "methods": [
                    { "function_name": "size", "return_type": "any" },
                    { "function_name": "buffer", "return_type": "any" },
                    {
                      "function_name": "take",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "May not return a fresh byte array every time."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "put_string",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "put_byte",
                      "parameters": [
                        {
                          "param_name": "byte",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "put_bytes",
                      "parameters": [
                        {
                          "param_name": "bytes",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "put_producer",
                      "parameters": [
                        {
                          "param_name": "bytes",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Producer",
                          "path": "lib/bytes.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "grow",
                      "parameters": [
                        {
                          "param_name": "size",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "reserve",
                      "parameters": [
                        {
                          "param_name": "size",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "clear", "return_type": "none" }
                  ]
                }
              }
            }
          ],
          "module": "bytes.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Reader",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "BufferedReader",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "reader_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Reader",
                        "path": "lib/reader.toit"
                      }
                    ],
                    "return_type": "BufferedReader",
                    "return_path": "lib/reader.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "clear", "return_type": "none" },
                    {
                      "function_name": "ensure",
                      "parameters": [
                        {
                          "param_name": "requested",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "can_ensure",
                      "parameters": [
                        {
                          "param_name": "requested",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "are_available",
                      "parameters": [
                        {
                          "param_name": "bytes",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "buffer_all", "return_type": "none" },
                    { "function_name": "buffered", "return_type": "any" },
                    {
                      "function_name": "skip",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "byte",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "bytes",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "index_of_or_throw",
                      "parameters": [
                        {
                          "param_name": "b",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "index_of",
                      "parameters": [
                        {
                          "param_name": "b",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "read", "return_type": "any" },
                    {
                      "function_name": "read_up_to",
                      "parameters": [
                        {
                          "param_name": "max_size",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_string",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "read_byte", "return_type": "any" },
                    {
                      "function_name": "read_bytes",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "peek_string",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "read_word", "return_type": "any" },
                    {
                      "function_name": "read_line",
                      "parameters": [
                        {
                          "param_name": "keep_newlines",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_until",
                      "parameters": [
                        {
                          "param_name": "delimiter",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_bytes_until",
                      "parameters": [
                        {
                          "param_name": "delimiter",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            }
          ],
          "module": "reader.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Font",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "get",
                    "parameters": [
                      {
                        "param_name": "font_name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "Font",
                    "return_path": "lib/font.toit"
                  },
                  {
                    "function_name": "from_pages",
                    "parameters": [
                      {
                        "param_name": "pages",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "List",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Font",
                    "return_path": "lib/font.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Pages is a list of arrays with byte data describing a font page."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "proxy", "return_type": "any" },
                    {
                      "function_name": "text_extent",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Gets the bounding box of the given string "
                              },
                              { "is_code": true, "text": "str" },
                              { "text": " in this font." }
                            ],
                            [
                              {
                                "text": "Returns [width, height, x-offset, y-offset]."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "pixel_width",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Gets the pixel width of the given string "
                              },
                              { "is_code": true, "text": "str" },
                              { "text": " in this font." }
                            ],
                            [
                              {
                                "text": "Note that when you actually draw the text it may go a few pixels to the left of the origin or to the right of x origin + pixel_width. See text_extent."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "close", "return_type": "none" }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "font_get",
                "parameters": [
                  {
                    "param_name": "font_name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ]
          },
          "module": "font.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "push",
                "parameters": [
                  {
                    "param_name": "topic",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  },
                  {
                    "param_name": "data",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "ByteArray",
                    "path": "core/collections.toit"
                  }
                ],
                "return_type": "none"
              }
            ]
          },
          "module": "data.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "PinConfiguration",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "PinConfiguration",
                    "return_path": "lib/gpio.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "pull_up",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "pull_down",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "input",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "output",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "PinConfiguration",
                    "return_path": "lib/gpio.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "pull_up", "field_type": "any" },
                    { "field_name": "pull_down", "field_type": "any" },
                    { "field_name": "input", "field_type": "any" },
                    { "field_name": "output", "field_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "Pin",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "num_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Pin",
                    "return_path": "lib/gpio.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "close", "return_type": "none" },
                    {
                      "function_name": "configure",
                      "parameters": [
                        {
                          "param_name": "conf",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "get", "return_type": "any" },
                    {
                      "function_name": "set",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "wait_for",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "num", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "VirtualPin",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "set_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "VirtualPin",
                    "return_path": "lib/gpio.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "set",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "close", "return_type": "none" },
                    {
                      "function_name": "configure",
                      "parameters": [
                        {
                          "param_name": "conf",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "PinConfiguration",
                          "path": "lib/gpio.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "get", "return_type": "none" },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "wait_for",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "num", "return_type": "none" }
                  ]
                }
              },
              "extends": "Pin",
              "extend_path": "lib/gpio.toit"
            },
            {
              "class_name": "ADC",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "pin",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "ADC",
                    "return_path": "lib/gpio.toit"
                  }
                ],
                "members": {
                  "fields": [{ "field_name": "pin", "field_type": "any" }],
                  "methods": [
                    { "function_name": "get", "return_type": "any" },
                    {
                      "function_name": "get_calibrated",
                      "parameters": [
                        {
                          "param_name": "samples",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "get_pin",
                "parameters": [
                  {
                    "param_name": "num",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "conf",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ],
            "module_globals": [
              { "global_name": "DEFAULT_CONF" },
              { "global_name": "INPUT_CONF" },
              { "global_name": "OUTPUT_CONF" }
            ]
          },
          "module": "gpio.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "PixelDisplay",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "no_rpc",
                    "parameters": [
                      {
                        "param_name": "driver",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "PixelDisplay",
                    "return_path": "lib/pixel_display.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "portrait",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns a transform that uses the display in portrait mode."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "inverted_portrait",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns a transform that uses the display in portrait mode, but rotated 180 degrees relative to the portrait method."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "landscape",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns a transform that uses the display in landscape mode."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "inverted_landscape",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns a transform that uses the display in landscape mode, but rotated 180 degrees relative to the landscape method. Sometimes called 'seascape'."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "texture",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Adds a texture to a display. The next time the display is refreshed, this texture will be drawn. Textures added to this display are drawn in the order they were added, so the first-added textures are at the back and the last-added are at the front. However you can add textures via a TextureGroup. This enables you to later add textures that are not at the front, by adding them to a TextureGroup that is not at the front."
                              }
                            ],
                            [
                              {
                                "text": "Since an InfiniteBackground texture covers the whole display you should add that first. A texture can only be added to one PixelDisplay at any one time."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "texture",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes a texture that was previously added."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove_all",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [[{ "text": "Removes all textures." }]]
                        }
                      ]
                    },
                    {
                      "function_name": "invalidate",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "w",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "h",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "draw",
                      "parameters": [
                        {
                          "param_name": "speed",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Draws the texture." }],
                            [
                              {
                                "text": "After changing the display, for example by adding, removing or moving textures, call this to refresh the screen. Optionally give a "
                              },
                              { "is_code": true, "text": "speed" },
                              {
                                "text": " between 0 and 100 to indicate the speed-image quality tradeoff."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update_frame_buffer",
                      "parameters": [
                        {
                          "param_name": "clean",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        },
                        {
                          "param_name": "refresh_dimensions",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "close",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Frees up the display so other process groups can use it. This happens"
                              }
                            ],
                            [
                              {
                                "text": "automatically when the process group exits."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "class_name": "TwoColorPixelDisplay",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "no_rpc",
                    "parameters": [
                      {
                        "param_name": "driver",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TwoColorPixelDisplay",
                    "return_path": "lib/pixel_display.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TwoColorPixelDisplay",
                    "return_path": "lib/pixel_display.toit"
                  }
                ]
              },
              "extends": "PixelDisplay",
              "extend_path": "lib/pixel_display.toit"
            },
            {
              "class_name": "FourGrayPixelDisplay",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "no_rpc",
                    "parameters": [
                      {
                        "param_name": "driver",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "FourGrayPixelDisplay",
                    "return_path": "lib/pixel_display.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "FourGrayPixelDisplay",
                    "return_path": "lib/pixel_display.toit"
                  }
                ]
              }
            },
            {
              "class_name": "ThreeColorPixelDisplay",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "no_rpc",
                    "parameters": [
                      {
                        "param_name": "driver",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "ThreeColorPixelDisplay",
                    "return_path": "lib/pixel_display.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "ThreeColorPixelDisplay",
                    "return_path": "lib/pixel_display.toit"
                  }
                ]
              }
            },
            {
              "class_name": "TrueColorPixelDisplay",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "no_rpc",
                    "parameters": [
                      {
                        "param_name": "driver",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TrueColorPixelDisplay",
                    "return_path": "lib/pixel_display.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TrueColorPixelDisplay",
                    "return_path": "lib/pixel_display.toit"
                  }
                ]
              },
              "extends": "PixelDisplay",
              "extend_path": "lib/pixel_display.toit"
            },
            {
              "class_name": "FakeRpc",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "display",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "FakeRpc",
                    "return_path": "lib/pixel_display.toit"
                  }
                ],
                "members": {
                  "fields": [{ "field_name": "display", "field_type": "any" }],
                  "methods": [
                    {
                      "function_name": "invoke",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "args",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            }
          ],
          "module": "pixel_display.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Transform",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "identity",
                    "return_type": "Transform",
                    "return_path": "lib/texture.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "apply",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Transform",
                          "path": "lib/texture.toit"
                        }
                      ],
                      "return_type": "Transform",
                      "return_path": "lib/texture.toit"
                    },
                    {
                      "function_name": "xywh",
                      "parameters": [
                        {
                          "param_name": "x_untransformed",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "y_untransformed",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "w",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "h",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Finds the extent of a rectangle after it has been transformed with the transform. [x_untransformed]: The left edge before the transformation is applied. [y_untransformed]: The top edge before the transformation is applied. [w]: The width before the transformation is applied. [h]: The height before the transformation is applied. [block]: A block that is called with arguments left top width height in the transformed coordinate space."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "rotate_left",
                      "return_type": "Transform",
                      "return_path": "lib/texture.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns a new transform which represents this transform rotated left around the origin in the space of this transform"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "rotate_right",
                      "return_type": "Transform",
                      "return_path": "lib/texture.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns a new transform which represents this transform rotated right around the origin in the space of this transform"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "translate",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "Transform",
                      "return_path": "lib/texture.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns a new transform. The origin of the new transform is at the point [x], [y] in the space of this transform."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "x",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the transformed x coordinate of the given point ([x], [y])."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "y",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the transformed y coordinate of the given point ([x], [y])."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "width",
                      "parameters": [
                        {
                          "param_name": "width",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "height",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the transformed width given an unrotated [width] and [height]."
                              }
                            ],
                            [
                              {
                                "text": "A negative result indicates the shape extends to the left of the origin."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "height",
                      "parameters": [
                        {
                          "param_name": "width",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "height",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the transformed height given an unrotated [width] and [height]."
                              }
                            ],
                            [
                              {
                                "text": "A negative result indicates the shape extends to the left of the origin."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Texture",
              "class_structure": {
                "members": {
                  "fields": [
                    { "field_name": "hash_code", "field_type": "int" }
                  ],
                  "methods": [
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "pixels",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Write the image data to a canvas window which is positioned at ([x], [y]) in the global coordinate space."
                              }
                            ],
                            [
                              {
                                "text": "[pixels]: Some sort of canvas. The precise type depends on the depth of the display."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "Something you can draw on a canvas. It could be a text string, a pixmap or a geometric figure. They can be stacked up and will be drawn from back to front, with transparency."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "SizedTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "SizedTexture",
                    "return_path": "lib/texture.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Create a new SizedTexture with the given position and size in the coordinate system of the given transform."
                            }
                          ],
                          [{ "text": "[x_]: The left of the texture." }],
                          [{ "text": "[y_]: The top of the texture." }],
                          [{ "text": "[w_]: The width of the texture." }],
                          [{ "text": "[h_]: The height of the texture." }],
                          [
                            {
                              "text": "[transform_]: The coordinate system of the texture."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "change_tracker", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "get_transform",
                      "return_type": "Transform",
                      "return_path": "lib/texture.toit"
                    },
                    {
                      "function_name": "display_x",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the left edge of the texture in the display coordinates."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "display_y",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the top edge of the texture in the display coordinates."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "display_w",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the width of the texture in the display coordinates."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "display_h",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the height of the texture in the display coordinates."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "x",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the left edge of the texture in the coordinate system of the transform."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "y",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the top edge of the texture in the coordinate system of the transform."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "invalidate",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Invalidates (mark for redrawing) the entire area of this texture."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "set_transform",
                      "parameters": [
                        {
                          "param_name": "new_transform",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Transform",
                          "path": "lib/texture.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Sets a new coordinate system for the texture. This can cause it to move or rotate."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "invalidate",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "w",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "h",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Invalidates (mark for redrawing) a part of this texture. Coordinates are in the transforms coordinate system."
                              }
                            ],
                            [
                              {
                                "text": "[x]: The left edge of the area to redraw."
                              }
                            ],
                            [
                              {
                                "text": "[y]: The top edge of the area to redraw."
                              }
                            ],
                            [
                              {
                                "text": "[w]: The width of the area to redraw."
                              }
                            ],
                            [
                              {
                                "text": "[h]: The height of the area to redraw."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "move_to",
                      "parameters": [
                        {
                          "param_name": "new_x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "new_y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Moves to a new position in the coordinate system of the texture's transform."
                              }
                            ],
                            [
                              {
                                "text": "[new_x]: New left edge in the texture's own coordinate system."
                              }
                            ],
                            [
                              {
                                "text": "[new_y]: New top edge in the texture's own coordinate system."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "extends": "Texture",
              "extend_path": "lib/texture.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "Most [Texture]s have a size and know their own position in the scene, and are thus SizedTextures. A sized texture keeps track of the coordinate system that it lives in, via the [transform]. It also tracks the untransformed left, top, width and height of the texture, and the transformed left, top, width and height of the texture with the current transform."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "TextureGroup",
              "class_structure": {
                "members": {
                  "fields": [
                    { "field_name": "transform", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "change_tracker", "return_type": "any" },
                    {
                      "function_name": "change_tracker=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "element",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "element",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "remove_all", "return_type": "none" }
                  ]
                }
              },
              "extends": "Texture",
              "extend_path": "lib/texture.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "A collections of textures which can be added to a display as a single texture. It is not visible, only the textures it contains are visible. It has no dimensions. Textures added to this group are drawn in the order they were added, so the first-added textures are at the back and the last-added are at the front."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "EAN_13_QUIET_ZONE_WIDTH" },
              { "global_name": "EAN_13_START_WIDTH" },
              { "global_name": "EAN_13_MIDDLE_WIDTH" },
              { "global_name": "EAN_13_DIGIT_WIDTH" },
              { "global_name": "EAN_13_BOTTOM_SPACE" },
              { "global_name": "EAN_13_WIDTH" },
              { "global_name": "EAN_13_HEIGHT" },
              { "global_name": "TEXT_TEXTURE_ALIGN_LEFT" },
              { "global_name": "TEXT_TEXTURE_ALIGN_CENTER" },
              { "global_name": "TEXT_TEXTURE_ALIGN_RIGHT" }
            ]
          },
          "module": "texture.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Canvas",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "height",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Canvas",
                    "return_path": "lib/two_color.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "width", "field_type": "any" },
                    { "field_name": "height", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "set_all_pixels",
                      "parameters": [
                        {
                          "param_name": "color",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "set_pixel",
                      "parameters": [
                        {
                          "param_name": "color",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "get_pixel",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "create_alpha_map",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "itemized": [
                                  [
                                    {
                                      "text": "Creates an alpha map, one bit per pixel, that is the same size as this"
                                    }
                                  ],
                                  [{ "text": "canvas." }]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "create_similar",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "itemized": [
                                  [
                                    {
                                      "text": "Creates an blank texture with the same dimensions as this one."
                                    }
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "composit",
                      "parameters": [
                        {
                          "param_name": "frame_opacity",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "frame_canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "pane_opacity",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "glass_canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "InfiniteBackground",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "InfiniteBackground",
                    "return_path": "lib/two_color.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "Texture",
              "extend_path": "lib/texture.toit"
            },
            {
              "class_name": "FilledRectangle",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "line",
                    "parameters": [
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "x1",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y1",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "x2",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y2",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "FilledRectangle",
                    "return_path": "lib/two_color.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "A line from x1,y1 to x2,y2. The line must be horizontal or vertical."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "FilledRectangle",
                    "return_path": "lib/two_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "TextTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "text_x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "text_y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "alignment",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "text",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "font",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Font",
                        "path": "lib/font.toit"
                      },
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TextTexture",
                    "return_path": "lib/two_color.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "color=",
                      "parameters": [
                        {
                          "param_name": "new_color",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "BitmapTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "BitmapTexture",
                    "return_path": "lib/two_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "OpaqueBitmapTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "OpaqueBitmapTexture",
                    "return_path": "lib/two_color.toit"
                  }
                ]
              },
              "extends": "BitmapTexture",
              "extend_path": "lib/two_color.toit"
            },
            {
              "class_name": "BarCodeEan13",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "code",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "BarCodeEan13",
                    "return_path": "lib/two_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "SimpleWindow",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "border_width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "border_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "SimpleWindow",
                    "return_path": "lib/two_color.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "itemized": [
                                [
                                  {
                                    "text": "A rectangular window with a fixed width colored border. The border is"
                                  }
                                ],
                                [
                                  {
                                    "text": "subtracted from the visible area inside the window."
                                  }
                                ]
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "background_color", "field_type": "any" },
                    { "field_name": "border_color", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "draw_frame",
                      "parameters": [
                        {
                          "param_name": "win_x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "win_y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "draw_background",
                      "parameters": [
                        {
                          "param_name": "win_x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "win_y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "RoundedCornerWindow",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "corner_radius",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "RoundedCornerWindow",
                    "return_path": "lib/two_color.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "background_color", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "draw_background",
                      "parameters": [
                        {
                          "param_name": "win_x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "win_y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "draw_frame",
                      "parameters": [
                        {
                          "param_name": "win_x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "win_y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Pbm",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Pbm",
                    "return_path": "lib/two_color.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "height", "return_type": "any" },
                    { "function_name": "width", "return_type": "any" },
                    {
                      "function_name": "row",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "PbmTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "bytes_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "PbmTexture",
                    "return_path": "lib/two_color.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "set_pixel",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "clear_pixel",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "set_all_pixels",
                      "return_type": "none"
                    },
                    {
                      "function_name": "clear_all_pixels",
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "OpaquePbmTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "OpaquePbmTexture",
                    "return_path": "lib/two_color.toit"
                  }
                ]
              },
              "extends": "PbmTexture",
              "extend_path": "lib/two_color.toit"
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "draw_pbm",
                "parameters": [
                  {
                    "param_name": "texture",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "BitmapTexture",
                    "path": "lib/two_color.toit"
                  },
                  {
                    "param_name": "pbm",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Pbm",
                    "path": "lib/two_color.toit"
                  },
                  {
                    "param_name": "scale",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              }
            ],
            "module_globals": [
              { "global_name": "WHITE" },
              { "global_name": "BLACK" },
              { "global_name": "TRANSPARENT" },
              { "global_name": "MOST_SIGNIFICANT_BIT_OF_BYTE_MASK" }
            ]
          },
          "module": "two_color.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "bitmap_draw_text",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "y",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "color",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "orientation",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "string",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "font",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array_width",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "bytemap_draw_text",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "y",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "color",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "orientation",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "string",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "font",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array_width",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "bitmap_draw_bitmap",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "y",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "color",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "orientation",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "source_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "source_width",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array_offset",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array_width",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "bytewise",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "bitmap_zap",
                "parameters": [
                  {
                    "param_name": "byte_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "color",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "bytemap_zap",
                "parameters": [
                  {
                    "param_name": "byte_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "color",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "bitmap_rectangle",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "y",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "color",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "width",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "height",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array_width",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "bytemap_rectangle",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "y",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "color",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "w",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "h",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "byte_array_width",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "composit_bytes",
                "parameters": [
                  {
                    "param_name": "dest",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "frame_opacity",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "frame",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "pane_opacity",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "glass",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "bits_not_bytes",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ],
            "module_globals": [
              { "global_name": "ORIENTATION_0" },
              { "global_name": "ORIENTATION_90" },
              { "global_name": "ORIENTATION_180" },
              { "global_name": "ORIENTATION_270" }
            ]
          },
          "module": "bitmap.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Canvas",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "height",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Canvas",
                    "return_path": "lib/three_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "InfiniteBackground",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "InfiniteBackground",
                    "return_path": "lib/three_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "FilledRectangle",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "line",
                    "parameters": [
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "x1",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y1",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "x2",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y2",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "FilledRectangle",
                    "return_path": "lib/three_color.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "A line from x1,y1 to x2,y2. The line must be horizontal or vertical."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "FilledRectangle",
                    "return_path": "lib/three_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "TextTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "text_x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "text_y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "alignment",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "text",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "font",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TextTexture",
                    "return_path": "lib/three_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "BitmapTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "BitmapTexture",
                    "return_path": "lib/three_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "OpaqueBitmapTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "foreground_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "OpaqueBitmapTexture",
                    "return_path": "lib/three_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "BarCodeEan13",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "code",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "BarCodeEan13",
                    "return_path": "lib/three_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "SimpleWindow",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "border_width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "border_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "SimpleWindow",
                    "return_path": "lib/three_color.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "itemized": [
                                [
                                  {
                                    "text": "A rectangular window with a fixed width colored border. The border is"
                                  }
                                ],
                                [
                                  {
                                    "text": "subtracted from the visible area inside the window."
                                  }
                                ]
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "class_name": "RoundedCornerWindow",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "corner_radius",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "RoundedCornerWindow",
                    "return_path": "lib/three_color.toit"
                  }
                ]
              }
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "WHITE" },
              { "global_name": "BLACK" },
              { "global_name": "RED" }
            ]
          },
          "module": "three_color.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Canvas",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "height",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Canvas",
                    "return_path": "lib/true_color.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "width", "field_type": "any" },
                    { "field_name": "height", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "set_all_pixels",
                      "parameters": [
                        {
                          "param_name": "color",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "set_pixel",
                      "parameters": [
                        {
                          "param_name": "color",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "get_pixel",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "create_alpha_map",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "itemized": [
                                  [
                                    {
                                      "text": "Creates an alpha map, one byte per pixel, that is the same size as this"
                                    }
                                  ],
                                  [{ "text": "canvas." }]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "create_similar",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "itemized": [
                                  [
                                    {
                                      "text": "Creates an blank texture with the same dimensions as this one."
                                    }
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "composit",
                      "parameters": [
                        {
                          "param_name": "frame_opacity",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "frame_canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "pane_opacity",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "glass_canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "InfiniteBackground",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "InfiniteBackground",
                    "return_path": "lib/true_color.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "Texture",
              "extend_path": "lib/texture.toit"
            },
            {
              "class_name": "FilledRectangle",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "line",
                    "parameters": [
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "x1",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y1",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "x2",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y2",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "FilledRectangle",
                    "return_path": "lib/true_color.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "A line from x1,y1 to x2,y2. The line must be horizontal or vertical."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "FilledRectangle",
                    "return_path": "lib/true_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "TextTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "text_x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "text_y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "alignment",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "text",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "font",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TextTexture",
                    "return_path": "lib/true_color.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "color=",
                      "parameters": [
                        {
                          "param_name": "new_color",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "BitmapTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "BitmapTexture",
                    "return_path": "lib/true_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "OpaqueBitmapTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "foreground_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "background_color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "OpaqueBitmapTexture",
                    "return_path": "lib/true_color.toit"
                  }
                ]
              },
              "extends": "BitmapTexture",
              "extend_path": "lib/true_color.toit"
            },
            {
              "class_name": "BarCodeEan13",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "code",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "BarCodeEan13",
                    "return_path": "lib/true_color.toit"
                  }
                ]
              }
            },
            {
              "class_name": "SimpleWindow",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "border_width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "border_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "SimpleWindow",
                    "return_path": "lib/true_color.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "itemized": [
                                [
                                  {
                                    "text": "A rectangular window with a fixed width colored border. The border is"
                                  }
                                ],
                                [
                                  {
                                    "text": "subtracted from the visible area inside the window."
                                  }
                                ]
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "background_color", "field_type": "any" },
                    { "field_name": "border_color", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "draw_frame",
                      "parameters": [
                        {
                          "param_name": "win_x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "win_y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "draw_background",
                      "parameters": [
                        {
                          "param_name": "win_x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "win_y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "RoundedCornerWindow",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "corner_radius",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "RoundedCornerWindow",
                    "return_path": "lib/true_color.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "background_color", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "draw_background",
                      "parameters": [
                        {
                          "param_name": "win_x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "win_y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "draw_frame",
                      "parameters": [
                        {
                          "param_name": "win_x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "win_y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "get_rgb",
                "parameters": [
                  {
                    "param_name": "r",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "g",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "b",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "red_component",
                "parameters": [
                  {
                    "param_name": "pixel",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "green_component",
                "parameters": [
                  {
                    "param_name": "pixel",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "blue_component",
                "parameters": [
                  {
                    "param_name": "pixel",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ]
          },
          "module": "true_color.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Writer",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "writer_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Writer",
                    "return_path": "lib/writer.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "close_write", "return_type": "none" }
                  ]
                }
              }
            }
          ],
          "module": "writer.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Canvas",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "height",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Canvas",
                    "return_path": "lib/four_gray.toit"
                  }
                ]
              }
            },
            {
              "class_name": "InfiniteBackground",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "InfiniteBackground",
                    "return_path": "lib/four_gray.toit"
                  }
                ]
              }
            },
            {
              "class_name": "FilledRectangle",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "line",
                    "parameters": [
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "x1",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y1",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "x2",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y2",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "FilledRectangle",
                    "return_path": "lib/four_gray.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "A line from " },
                            { "is_code": true, "text": "x1" },
                            { "text": "," },
                            { "is_code": true, "text": "y1" },
                            { "text": " to " },
                            { "is_code": true, "text": "x2" },
                            { "text": "," },
                            { "is_code": true, "text": "y2" },
                            {
                              "text": ". The line must be horizontal or vertical."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "FilledRectangle",
                    "return_path": "lib/four_gray.toit"
                  }
                ]
              }
            },
            {
              "class_name": "TextTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "text_x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "text_y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "alignment",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "text",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "font",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TextTexture",
                    "return_path": "lib/four_gray.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "The coordinates given here to the constructor (and move_to) are the bottom left of the first letter in the string (for left alignment). Once the string has been rotated and aligned, and overhanging letter shapes have been taken into account, the bounding box (properties "
                            },
                            {
                              "text": "display_x",
                              "path": "lib/texture.toit/SizedTexture"
                            },
                            { "text": ", " },
                            {
                              "text": "display_y",
                              "path": "lib/texture.toit/SizedTexture"
                            },
                            { "text": ", " },
                            {
                              "text": "display_w",
                              "path": "lib/texture.toit/SizedTexture"
                            },
                            { "text": ", " },
                            {
                              "text": "display_h",
                              "path": "lib/texture.toit/SizedTexture"
                            },
                            { "text": ", inherited from " },
                            {
                              "text": "SizedTexture",
                              "path": "lib/texture.toit"
                            },
                            {
                              "text": ") reflect the actual bounding box of the text string."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "class_name": "BitmapTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "BitmapTexture",
                    "return_path": "lib/four_gray.toit"
                  }
                ]
              }
            },
            {
              "class_name": "OpaqueBitmapTexture",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "foreground_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "OpaqueBitmapTexture",
                    "return_path": "lib/four_gray.toit"
                  }
                ]
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "A two color bitmap texture. Initially all pixels have the background color."
                      }
                    ],
                    [
                      { "text": "Use " },
                      { "text": "set_pixel", "path": "lib/texture.toit" },
                      { "text": " to paint with the foreground, and " },
                      { "text": "clear_pixel", "path": "lib/texture.toit" },
                      { "text": " to paint with the background." }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "BarCodeEan13",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "code",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      }
                    ],
                    "return_type": "BarCodeEan13",
                    "return_path": "lib/four_gray.toit"
                  }
                ]
              }
            },
            {
              "class_name": "SimpleWindow",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "border_width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "border_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "SimpleWindow",
                    "return_path": "lib/four_gray.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "A rectangular window with a fixed width colored border. The border is subtracted from the visible area inside the window."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ]
              }
            },
            {
              "class_name": "RoundedCornerWindow",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "w",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "h",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "corner_radius",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "background_color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "RoundedCornerWindow",
                    "return_path": "lib/four_gray.toit"
                  }
                ]
              }
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "WHITE" },
              { "global_name": "LIGHT_GRAY" },
              { "global_name": "DARK_GRAY" },
              { "global_name": "BLACK" }
            ]
          },
          "module": "four_gray.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Request",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "procedure",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "timeout_ms",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "data",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Request",
                    "return_path": "lib/mrpc.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "procedure", "field_type": "any" },
                    { "field_name": "timeout_ms", "field_type": "any" },
                    { "field_name": "data", "field_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "Response",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "status_code",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Response",
                    "return_path": "lib/mrpc.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "status_code",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "data",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Response",
                    "return_path": "lib/mrpc.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "status_code",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "status_msg",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "data",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Response",
                    "return_path": "lib/mrpc.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "status_code", "field_type": "any" },
                    { "field_name": "status_msg", "field_type": "any" },
                    { "field_name": "data", "field_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "Client",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "protocol",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "address",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Client",
                    "return_path": "lib/mrpc.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "send",
                      "parameters": [
                        {
                          "param_name": "procedure",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "timeout",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "close", "return_type": "none" }
                  ]
                }
              }
            },
            {
              "class_name": "Server",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "protocol_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "address",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Server",
                    "return_path": "lib/mrpc.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "register",
                      "parameters": [
                        {
                          "param_name": "procedure",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "handler",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "port", "return_type": "any" },
                    { "function_name": "close", "return_type": "none" }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "MRPC_CODE_OK" },
              { "global_name": "MRPC_CODE_UNKNOWN" },
              { "global_name": "MRPC_CODE_UNIMPLEMENTED" },
              { "global_name": "MRPC_CODE_TIMEOUT" },
              { "global_name": "MRPC_CODE_CUSTOM" },
              { "global_name": "MRPC_CODE_MAX" }
            ]
          },
          "module": "mrpc.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "DirectoryStream",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "DirectoryStream",
                    "return_path": "lib/directory.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "read", "return_type": "any" },
                    { "function_name": "close", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "rmdir",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "mkdir",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "mode",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "mkdtemp",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Creates a fresh directory with the given prefix."
                        }
                      ],
                      [
                        {
                          "text": "The [name] must end with 6 'X's which will be replaced with a combination of characters (not just digits) to make it unique."
                        }
                      ]
                    ]
                  },
                  {
                    "title": "Examples",
                    "statements": [
                      {
                        "is_code_section": true,
                        "text": "\nmkdtemp \"/tmp/test-XXXXXX\"\n"
                      }
                    ]
                  }
                ]
              },
              {
                "function_name": "chdir",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "realpath",
                "parameters": [
                  {
                    "param_name": "path",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              { "function_name": "cwd", "return_type": "any" }
            ]
          },
          "module": "directory.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Stream",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "read",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Stream",
                    "return_path": "lib/file.toit"
                  },
                  {
                    "function_name": "write",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Stream",
                    "return_path": "lib/file.toit"
                  }
                ],
                "factories": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "flags",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Stream",
                    "return_path": "lib/file.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "flags",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "permissions",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Stream",
                    "return_path": "lib/file.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "close", "return_type": "none" }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "stat",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "is_file",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "is_directory",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "size",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "delete",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "rename",
                "parameters": [
                  {
                    "param_name": "from",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "to",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "read_contents",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ],
            "module_globals": [
              { "global_name": "RDONLY" },
              { "global_name": "WRONLY" },
              { "global_name": "RDWR" },
              { "global_name": "APPEND" },
              { "global_name": "CREAT" },
              { "global_name": "TRUNC" },
              { "global_name": "ST_DEV" },
              { "global_name": "ST_INO" },
              { "global_name": "ST_MODE" },
              { "global_name": "ST_TYPE" },
              { "global_name": "ST_NLINK" },
              { "global_name": "ST_UID" },
              { "global_name": "ST_GID" },
              { "global_name": "ST_SIZE" },
              { "global_name": "ST_ATIME" },
              { "global_name": "ST_MTIME" },
              { "global_name": "ST_CTIME" },
              { "global_name": "FIFO" },
              { "global_name": "CHARACTER_DEVICE" },
              { "global_name": "DIRECTORY" },
              { "global_name": "BLOCK_DEVICE" },
              { "global_name": "REGULAR_FILE" },
              { "global_name": "SYMBOLIC_LINK" },
              { "global_name": "SOCKET" }
            ]
          },
          "module": "file.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "expect",
                "parameters": [
                  {
                    "param_name": "condition",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Expects the given [condition] to evaluate to true."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "expect",
                "parameters": [
                  {
                    "param_name": "condition",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  },
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "String",
                    "path": "core/string.toit"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Expects the given [condition] to be true." }],
                      [
                        {
                          "text": "Otherwise reports an error (using the provided [message], if given) and exits the program."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "expect_not",
                "parameters": [
                  {
                    "param_name": "condition",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  },
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "String",
                    "path": "core/string.toit"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Expects the given [condition] to be false." }
                      ],
                      [
                        {
                          "text": "Otherwise reports an error (using the provided [message], if given) and exits the program."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "expect_equals",
                "parameters": [
                  {
                    "param_name": "expected",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "actual",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Expects [actual] to be equal to [expected]."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "expect_null",
                "parameters": [
                  {
                    "param_name": "actual",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Expects [actual] to be equal to " },
                        { "is_code": true, "text": "null" },
                        { "text": "." }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "expect_not_null",
                "parameters": [
                  {
                    "param_name": "actual",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Expects [actual] to be not " },
                        { "is_code": true, "text": "null" },
                        { "text": "." }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "expect_list_equals",
                "parameters": [
                  {
                    "param_name": "expected",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "List",
                    "path": "core/collections.toit"
                  },
                  {
                    "param_name": "actual",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "List",
                    "path": "core/collections.toit"
                  }
                ],
                "return_type": "any",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Expects the [actual] list to be equal to the [expected] list."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "expect_throw",
                "parameters": [
                  {
                    "param_name": "expected",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "throw_block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Expected [throw_block] to throw the [expected]."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "expect_no_throw",
                "parameters": [
                  {
                    "param_name": "no_throw_block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Expected [no_throw_block] to not throw." }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "expect.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Driver",
              "class_structure": {
                "statics": [
                  { "function_name": "CR", "return_type": "any" },
                  { "function_name": "LF", "return_type": "any" }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "bus_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "auto_run",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      },
                      {
                        "param_name": "logger",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "Logger",
                        "path": "log/log.toit"
                      },
                      {
                        "param_name": "s3",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "s4",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Driver",
                    "return_path": "lib/at.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "s3", "field_type": "int" },
                    { "field_name": "s4", "field_type": "int" }
                  ],
                  "methods": [
                    { "function_name": "flush", "return_type": "none" },
                    { "function_name": "close", "return_type": "none" },
                    {
                      "function_name": "read",
                      "parameters": [
                        {
                          "param_name": "command_name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "test",
                      "parameters": [
                        {
                          "param_name": "command_name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "set",
                      "parameters": [
                        {
                          "param_name": "command_name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "values",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "action",
                      "parameters": [
                        {
                          "param_name": "command_name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "event_region",
                      "parameters": [
                        {
                          "param_name": "prefix",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "wait_for_event",
                      "parameters": [
                        {
                          "param_name": "prefix",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "run", "return_type": "none" }
                  ]
                }
              }
            },
            {
              "class_name": "Result",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "code",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "responses",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Result",
                    "return_path": "lib/at.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "code", "field_type": "any" },
                    { "field_name": "responses", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "single", "return_type": "any" },
                    { "function_name": "last", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "at.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Counter",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "Counter",
                    "parameters": [
                      {
                        "param_name": "name_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "Counter",
                    "return_path": "lib/metrics.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Gauge",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "Gauge",
                    "parameters": [
                      {
                        "param_name": "name_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "Gauge",
                    "return_path": "lib/metrics.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "set",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Plot",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "Plot",
                    "parameters": [
                      {
                        "param_name": "name_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "Plot",
                    "return_path": "lib/metrics.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "set",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "time",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Scope",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "Scope",
                    "parameters": [
                      {
                        "param_name": "delimiter",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Scope",
                    "return_path": "lib/metrics.toit"
                  },
                  {
                    "function_name": "Scope",
                    "parameters": [
                      {
                        "param_name": "name_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "delimiter",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Scope",
                    "return_path": "lib/metrics.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "Sub",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Scope",
                      "return_path": "lib/metrics.toit"
                    },
                    {
                      "function_name": "counter",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Counter",
                      "return_path": "lib/metrics.toit"
                    },
                    {
                      "function_name": "gauge",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Gauge",
                      "return_path": "lib/metrics.toit"
                    },
                    {
                      "function_name": "plot",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Plot",
                      "return_path": "lib/metrics.toit"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "update_gauge",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  },
                  {
                    "param_name": "value",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Number",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "increment_counter",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  },
                  {
                    "param_name": "value",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "plot",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  },
                  {
                    "param_name": "value",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Number",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "time",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "Time",
                    "path": "core/time.toit"
                  }
                ],
                "return_type": "none"
              }
            ]
          },
          "module": "metrics.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "UncompressedZlibEncoder",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "UncompressedZlibEncoder",
                    "return_path": "lib/zlib.toit"
                  }
                ]
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "Creates an uncompressed data stream that is compatible with zlib decoders expecting compressed data. This has a write and a read method, which should be used from different tasks to prevent deadlocks."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "UncompressedGzipEncoder",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "UncompressedGzipEncoder",
                    "return_path": "lib/zlib.toit"
                  }
                ]
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "Creates an uncompressed data stream that is compatible with gzip decoders expecting compressed data. This has a write and a read method, which should be used from different tasks to prevent deadlocks."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "RunLengthZlibEncoder",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "RunLengthZlibEncoder",
                    "return_path": "lib/zlib.toit"
                  }
                ]
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "Creates a run length encoded data stream that is compatible with zlib decoders expecting compressed data. This has a write and a read method, which should be used from different tasks to prevent deadlocks."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "RunLengthGzipEncoder",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "RunLengthGzipEncoder",
                    "return_path": "lib/zlib.toit"
                  }
                ]
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "Creates a run length encoded data stream that is compatible with gzip decoders expecting compressed data. This has a write and a read method, which should be used from different tasks to prevent deadlocks."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "module": "zlib.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Tar",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "writer",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Tar",
                    "return_path": "lib/tar.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "file_name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "content",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Adds a new \"file\" to the generated tar-archive."
                              }
                            ],
                            [
                              {
                                "text": "This function sets all file attributes to some default values. For example, the"
                              }
                            ],
                            [
                              {
                                "text": "modification date is set to 0 (epoch time)."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "close",
                      "parameters": [
                        {
                          "param_name": "close_writer",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Closes the tar stream, and invokes " },
                              { "is_code": true, "text": "close_write" },
                              { "text": " on the stored writer if " },
                              { "is_code": true, "text": "close_writer" },
                              { "text": " is true." }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [{ "text": "A tar archiver." }],
                    [
                      {
                        "text": "Writes the given files into the writer in tar file format."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "top_level": {
            "module_functions": [
              { "function_name": "main", "return_type": "none" }
            ]
          },
          "module": "tar.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Registers",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "read_u8",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_bytes",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "count",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_u8",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "dump",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "width",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "I2CRegisters",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "i2c_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "I2CRegisters",
                    "return_path": "lib/serial.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read_u8",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_u16_be",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_u16_be",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "failure",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_u24_be",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_u16_le",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_i16_le",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_u24_le",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_bytes",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "count",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_bytes",
                      "parameters": [
                        {
                          "param_name": "bytes",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_u8",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "val",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "Registers",
              "extend_path": "lib/serial.toit"
            },
            {
              "class_name": "SpiRegisters",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "device_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "msb_write",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "SpiRegisters",
                    "return_path": "lib/serial.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Set msb_write to true, to indicate a high Most-Significant-Bit for writes."
                            }
                          ],
                          [
                            {
                              "text": "Default is false. The opposite is used for read."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read_bytes",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "count",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read_u8",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_u8",
                      "parameters": [
                        {
                          "param_name": "reg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "Registers",
              "extend_path": "lib/serial.toit"
            }
          ],
          "module": "serial.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Point3f",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Point3f",
                    "return_path": "lib/point.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "float",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "float",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "z",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "float",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Point3f",
                    "return_path": "lib/point.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "x", "field_type": "float" },
                    { "field_name": "y", "field_type": "float" },
                    { "field_name": "z", "field_type": "float" }
                  ],
                  "methods": [
                    { "function_name": "to_byte_array", "return_type": "any" },
                    {
                      "function_name": "*",
                      "parameters": [
                        {
                          "param_name": "factor",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Point3f",
                      "return_path": "lib/point.toit"
                    },
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "point.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "GnssLocation",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "GnssLocation",
                    "return_path": "lib/gnss_location.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "location",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "altitude_msl",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "time",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "horizontal_accuracy",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "vertical_accuracy",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "GnssLocation",
                    "return_path": "lib/gnss_location.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "time", "field_type": "any" },
                    {
                      "field_name": "horizontal_accuracy",
                      "field_type": "any"
                    },
                    { "field_name": "vertical_accuracy", "field_type": "any" },
                    { "field_name": "altitude_msl", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              },
              "extends": "Location",
              "extend_path": "lib/location.toit"
            }
          ],
          "module": "gnss_location.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Location",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Location",
                    "return_path": "lib/location.toit"
                  },
                  {
                    "function_name": "from_values",
                    "parameters": [
                      {
                        "param_name": "latitude",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "float",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "longitude",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "float",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Location",
                    "return_path": "lib/location.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "latitude",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Latitude",
                        "path": "lib/location.toit"
                      },
                      {
                        "param_name": "longitude",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Longitude",
                        "path": "lib/location.toit"
                      }
                    ],
                    "return_type": "Location",
                    "return_path": "lib/location.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "latitude", "field_type": "Latitude" },
                    { "field_name": "longitude", "field_type": "Longitude" }
                  ],
                  "methods": [
                    { "function_name": "print_string", "return_type": "any" },
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "Latitude",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "value",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "float",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Latitude",
                    "return_path": "lib/location.toit"
                  }
                ],
                "members": {
                  "fields": [{ "field_name": "value", "field_type": "float" }],
                  "methods": [
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "Longitude",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "value",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "float",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Longitude",
                    "return_path": "lib/location.toit"
                  }
                ],
                "members": {
                  "fields": [{ "field_name": "value", "field_type": "float" }],
                  "methods": [
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "location.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Publisher",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "Publisher",
                    "return_path": "lib/publisher.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "on_message",
                      "parameters": [
                        {
                          "param_name": "type",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "gid",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "pid",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "args",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "subscribe",
                      "parameters": [
                        {
                          "param_name": "topic",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "subscription",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Lambda",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Lambda",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "publish",
                      "parameters": [
                        {
                          "param_name": "topic",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "payload",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            }
          ],
          "module": "publisher.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "matches",
                "parameters": [
                  {
                    "param_name": "topic_filter",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  },
                  {
                    "param_name": "topic_name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  }
                ],
                "return_type": "bool",
                "return_path": "core/objects.toit"
              },
              {
                "function_name": "valid",
                "parameters": [
                  {
                    "param_name": "topic",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  }
                ],
                "return_type": "bool",
                "return_path": "core/objects.toit"
              },
              {
                "function_name": "absolute",
                "parameters": [
                  {
                    "param_name": "topic",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  }
                ],
                "return_type": "bool",
                "return_path": "core/objects.toit"
              }
            ],
            "module_globals": [
              { "global_name": "MULTI_LEVEL_WILDCARD" },
              { "global_name": "SINGLE_LEVEL_WILDCARD" },
              { "global_name": "SEPARATOR" }
            ]
          },
          "module": "topic.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "UUID",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "all_zeros",
                    "return_type": "UUID",
                    "return_path": "lib/uuid.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "bytes_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "UUID",
                    "return_path": "lib/uuid.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "print_string", "return_type": "any" },
                    { "function_name": "to_byte_array", "return_type": "any" },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "hash_code",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "is_nil",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "parse",
                "parameters": [
                  {
                    "param_name": "str",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "uuid5",
                "parameters": [
                  {
                    "param_name": "ns",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "data",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ],
            "module_globals": [
              { "global_name": "SIZE" },
              { "global_name": "NIL" }
            ]
          },
          "module": "uuid.toit"
        },
        {
          "top_level": {
            "module_globals": [
              { "global_name": "words1" },
              { "global_name": "words2" },
              { "global_name": "words3" },
              { "global_name": "words4" },
              { "global_name": "words5" },
              { "global_name": "words6" },
              { "global_name": "words7" },
              { "global_name": "words8" },
              { "global_name": "words9" },
              { "global_name": "words10" },
              { "global_name": "words11" },
              { "global_name": "words12" },
              { "global_name": "words13" }
            ]
          },
          "module": "words.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Histogram",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "h_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "scale_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Number",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Histogram",
                    "return_path": "lib/histogram.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "sample",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "draw_rectangle",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "w",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "h",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              },
              "extends": "SizedTexture",
              "extend_path": "lib/texture.toit"
            },
            {
              "class_name": "TwoColorHistogram",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "height",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "scale",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Number",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TwoColorHistogram",
                    "return_path": "lib/histogram.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "draw_rectangle",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "w",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "h",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "Histogram",
              "extend_path": "lib/histogram.toit"
            },
            {
              "class_name": "ThreeColorHistogram",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "height",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "scale",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Number",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "ThreeColorHistogram",
                    "return_path": "lib/histogram.toit"
                  }
                ]
              }
            },
            {
              "class_name": "FourGrayHistogram",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "height",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "scale",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Number",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "color",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "FourGrayHistogram",
                    "return_path": "lib/histogram.toit"
                  }
                ]
              }
            },
            {
              "class_name": "TrueColorHistogram",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "x",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "y",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "width",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "height",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "transform",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transform",
                        "path": "lib/texture.toit"
                      },
                      {
                        "param_name": "scale",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Number",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "color_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "TrueColorHistogram",
                    "return_path": "lib/histogram.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "draw_rectangle",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "y",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "w",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "h",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "canvas",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "Histogram",
              "extend_path": "lib/histogram.toit"
            }
          ],
          "module": "histogram.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "sin",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "cos",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "tan",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "sinh",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "cosh",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "tanh",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "asin",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "acos",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "atan",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "atan2",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "y",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "sqrt",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "pow",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "y",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "exp",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ]
          },
          "module": "math.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "WebSocketClient",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "http_connection",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "request",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "WebSocketClient",
                    "return_path": "lib/web_socket.toit"
                  }
                ]
              },
              "extends": "WebSocket",
              "extend_path": "lib/web_socket.toit"
            },
            {
              "class_name": "WebSocketServer",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "http_connection",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "request",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "WebSocketServer",
                    "return_path": "lib/web_socket.toit"
                  }
                ]
              },
              "extends": "WebSocket",
              "extend_path": "lib/web_socket.toit"
            },
            {
              "class_name": "WebSocket",
              "class_structure": {
                "statics": [
                  { "function_name": "OPCODE_MASK", "return_type": "any" },
                  {
                    "function_name": "PAYLOAD_LENGTH_MASK",
                    "return_type": "any"
                  },
                  { "function_name": "MASK_MASK", "return_type": "any" },
                  { "function_name": "CONTINUATION", "return_type": "any" },
                  { "function_name": "TEXT", "return_type": "any" },
                  { "function_name": "BINARY", "return_type": "any" },
                  { "function_name": "CLOSE", "return_type": "any" },
                  { "function_name": "PING", "return_type": "any" },
                  { "function_name": "PONG", "return_type": "any" },
                  { "function_name": "FIN", "return_type": "any" },
                  { "function_name": "TWO_BYTE_LENGTH", "return_type": "any" },
                  { "function_name": "EIGHT_BYTE_LENGTH", "return_type": "any" }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "reader_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "writer_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "send_masked_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "WebSocket",
                    "return_path": "lib/web_socket.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "read", "return_type": "any" },
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "close_write", "return_type": "none" },
                    { "function_name": "close", "return_type": "none" },
                    { "function_name": "is_connected", "return_type": "any" },
                    { "function_name": "peer_port", "return_type": "any" },
                    { "function_name": "peer_address", "return_type": "any" },
                    { "function_name": "hash_code", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "web_socket.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "HTTPHeaders",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "single",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "matches",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "starts_with",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "set",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "write_to",
                      "parameters": [
                        {
                          "param_name": "writer",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "HTTPConnection",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "socket_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "host_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "HTTPConnection",
                    "return_path": "lib/http.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "reader", "return_type": "any" },
                    {
                      "function_name": "new_request",
                      "parameters": [
                        {
                          "param_name": "method",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "url",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "url",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "read_request", "return_type": "any" },
                    { "function_name": "is_connected", "return_type": "any" },
                    { "function_name": "close", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "HTTPRequest",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "connection_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "writer_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "method",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "path",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "HTTPRequest",
                    "return_path": "lib/http.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "connection_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "reader_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "method",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "path",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "version",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "headers",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "HTTPRequest",
                    "return_path": "lib/http.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "method", "field_type": "any" },
                    { "field_name": "path", "field_type": "any" },
                    { "field_name": "version", "field_type": "any" },
                    { "field_name": "headers", "field_type": "any" },
                    { "field_name": "body", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "send", "return_type": "any" },
                    { "function_name": "read", "return_type": "any" },
                    { "function_name": "response", "return_type": "any" },
                    {
                      "function_name": "should_web_socket_upgrade",
                      "return_type": "any"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "HTTPDetachedSocket",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "reader_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "socket_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "HTTPDetachedSocket",
                    "return_path": "lib/http.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "read", "return_type": "any" },
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "close_write", "return_type": "any" },
                    { "function_name": "close", "return_type": "any" },
                    { "function_name": "is_connected", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "HTTPResponse",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "connection_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "writer_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "HTTPResponse",
                    "return_path": "lib/http.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "connection_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "reader_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "version",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "status_code",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "status_message",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "headers",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "HTTPResponse",
                    "return_path": "lib/http.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "headers", "field_type": "any" },
                    { "field_name": "version", "field_type": "any" },
                    { "field_name": "status_code", "field_type": "any" },
                    { "field_name": "status_message", "field_type": "any" },
                    { "field_name": "body", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "send", "return_type": "none" },
                    { "function_name": "detach", "return_type": "any" },
                    { "function_name": "read", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "http.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Store",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "delete",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "set",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "FlashStore",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "delete",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "set",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "name",
                "return_type": "String",
                "return_path": "core/string.toit"
              }
            ],
            "module_globals": [
              { "global_name": "RPC_SYSTEM_DEVICE_NAME" },
              { "global_name": "RPC_SYSTEM_FLASHSTORE_GET" },
              { "global_name": "RPC_SYSTEM_FLASHSTORE_SET" },
              { "global_name": "RPC_SYSTEM_FLASHSTORE_DELETE" }
            ]
          },
          "module": "device.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "OpenPipe",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "input",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "OpenPipe",
                    "return_path": "lib/pipe.toit"
                  }
                ],
                "members": {
                  "fields": [{ "field_name": "fd", "field_type": "any" }],
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "x",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "close", "return_type": "none" },
                    { "function_name": "is_a_terminal", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "fork",
                "parameters": [
                  {
                    "param_name": "use_path",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "stdin",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "stdout",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "stderr",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arguments",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "to",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "to",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "to",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg3",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "to",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg3",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg4",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "to",
                "parameters": [
                  {
                    "param_name": "arguments",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "from",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "from",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "from",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg3",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "from",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg3",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg4",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "from",
                "parameters": [
                  {
                    "param_name": "arguments",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "backticks",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "backticks",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "backticks",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg3",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "backticks",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg3",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg4",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "backticks",
                "parameters": [
                  {
                    "param_name": "arguments",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "wait_for",
                "parameters": [
                  {
                    "param_name": "subprocess",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Returns the exit value of the process which can then be decoded into exit code or signal number."
                        }
                      ],
                      [{ "text": "See [exit_code] and [exit_signal]." }]
                    ]
                  }
                ]
              },
              {
                "function_name": "system",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "run_program",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "run_program",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "run_program",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg3",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "run_program",
                "parameters": [
                  {
                    "param_name": "command",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg1",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg2",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg3",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "arg4",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "run_program",
                "parameters": [
                  {
                    "param_name": "arguments",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              { "function_name": "stdin", "return_type": "any" },
              { "function_name": "stdout", "return_type": "any" },
              { "function_name": "stderr", "return_type": "any" },
              {
                "function_name": "print_to_stdout",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "print_to_stderr",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "exit_code",
                "parameters": [
                  {
                    "param_name": "exit_value",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Decodes the exit value (of [wait_for]) and returns the exit code."
                        }
                      ],
                      [
                        {
                          "text": "Returns null if the process exited due to an uncaught signal. Use"
                        }
                      ],
                      [{ "text": "[exit_signal] in that case." }]
                    ]
                  }
                ]
              },
              {
                "function_name": "exit_signal",
                "parameters": [
                  {
                    "param_name": "exit_value",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Decodes the exit value (of [wait_for]) and returns the exit signal."
                        }
                      ],
                      [
                        {
                          "text": "Returns null if the process exited normally with an exit code, and not because of an uncaught signal. Use [exit_code] in that case."
                        }
                      ],
                      [
                        {
                          "text": "Use [signal_to_string] to convert the signal to a string."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "dont_wait_for",
                "parameters": [
                  {
                    "param_name": "subprocess",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "signal_to_string",
                "parameters": [
                  {
                    "param_name": "signal",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ],
            "module_globals": [
              { "global_name": "PROCESS_EXITED" },
              { "global_name": "PROCESS_SIGNALLED" },
              { "global_name": "PROCESS_EXIT_CODE_SHIFT" },
              { "global_name": "PROCESS_EXIT_CODE_MASK" },
              { "global_name": "PROCESS_SIGNAL_SHIFT" },
              { "global_name": "PROCESS_SIGNAL_MASK" },
              { "global_name": "PIPE_INHERITED" },
              { "global_name": "PIPE_CREATED" }
            ]
          },
          "module": "pipe.toit"
        }
      ]
    },
    {
      "lib_name": "core",
      "lib_modules": [
        {
          "export_classes": [
            {
              "class_name": "Collection",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              { "text": " on each element of this instance." }
                            ],
                            [
                              {
                                "text": "Users must not modify the collection while iterating over it."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Needs to be implemented by all subclasses."
                              }
                            ],
                            [{ "text": "This function should never throw." }],
                            [
                              {
                                "text": "This function does *not* need to protect itself against modifications of this instance during the iteration. Subclasses are, however, encouraged to do so if they can do it cheaply (especially in debug-mode)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n[1, 2].do: debug it  // Prints 1, 2\n"
                            }
                          ]
                        },
                        {
                          "title": "Categories",
                          "statements": [
                            [{ "itemized": [[{ "text": "Iteration" }]] }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "size",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "The number of elements in this instance."
                              }
                            ],
                            [
                              {
                                "text": "This operation can be assumed to be in O(1)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "This method must be implemented by subclasses."
                              }
                            ],
                            [
                              {
                                "text": "If the operation is not in O(1) consider not implementing the "
                              },
                              {
                                "text": "Collection",
                                "path": "core/collections.toit"
                              },
                              {
                                "text": " interface. Exceptional cases, where all users are clearly aware of this restriction, are permitted."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Collection",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Whether this instance is equal to " },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Equality only returns true when both operands are of the same type."
                              }
                            ],
                            [
                              {
                                "text": "Returns false, if this instance and "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " are not of the same " },
                              {
                                "text": "size",
                                "path": "core/collections.toit/Collection"
                              },
                              {
                                "text": ", or if the contained elements are not equal themselves. Unless otherwise specified or configured, uses the default "
                              },
                              { "is_code": true, "text": "==" },
                              { "text": " operator for comparison." }
                            ],
                            [
                              {
                                "text": "Subclasses may decide not to support deep equality."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to compare self-recursive data-structures."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Collections do *not* need to ensure that recursive data structures don't lead to infinite loops."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "is_empty",
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Whether this instance is empty." }]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Subclasses should overwrite this method if the "
                              },
                              {
                                "text": "size",
                                "path": "core/collections.toit/Collection"
                              },
                              {
                                "text": " getter is not constant and the subclass has a more efficient way of determining whether this instance is empty."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "every",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether every element in the collection satisfies the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns true, if the collection is empty."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "any",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether any element in the collection satisfies the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns false, if the collection is empty."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "contains",
                      "parameters": [
                        {
                          "param_name": "element",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance contains the given "
                              },
                              { "is_code": true, "text": "element" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Takes all elements and combines them using "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "It's an error if this instance does not have at least one element."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "initial",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Takes all elements and combines them using "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns the " },
                              { "is_code": true, "text": "initial" },
                              { "text": " value if this instance is empty." }
                            ],
                            [
                              {
                                "text": "If this instance contains at least one element calls "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": " first with the " },
                              { "is_code": true, "text": "initial" },
                              { "text": " value and the first element." }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "exported_from": "core/collections.toit",
              "class_toitdoc": [
                { "statements": [[{ "text": "A collection of elements." }]] }
              ]
            },
            {
              "class_name": "CollectionBase",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "size",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Collection",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "is_empty",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "every",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "any",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "contains",
                      "parameters": [
                        {
                          "param_name": "element",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "initial",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              },
              "exported_from": "core/collections.toit"
            },
            {
              "class_name": "List",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "from_subclass",
                    "return_type": "List",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "from",
                    "parameters": [
                      {
                        "param_name": "collection",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Collection",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "List",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a List, containing all elements of the given "
                            },
                            { "is_code": true, "text": "collection" }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "factories": [
                  {
                    "function_name": "constructor",
                    "return_type": "List",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [{ "text": "Creates an empty list." }],
                          [
                            {
                              "text": "This operation is identical to creating a list with a list-literal: "
                            },
                            { "is_code": true, "text": "[]" },
                            { "text": "." }
                          ]
                        ]
                      }
                    ]
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "filler",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "List",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Creates a new List of the given " },
                            { "is_code": true, "text": "size" },
                            {
                              "text": " where every slot is filled with the given "
                            },
                            { "is_code": true, "text": "filler" },
                            { "text": "." }
                          ]
                        ]
                      }
                    ]
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "block",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "List",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a List and initializes each element with the result of invoking the block."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "resize",
                      "parameters": [
                        {
                          "param_name": "new_size",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Changes the size of this list to the given "
                              },
                              { "is_code": true, "text": "new_size" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If the list grows as a result of this operation, then the elements are filled with null."
                              }
                            ],
                            [
                              {
                                "text": "If the list shrinks as a result of this operation, then these elements are dropped."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the element in the slot of the given [index]."
                              }
                            ],
                            [
                              {
                                "text": "// TODO(florian): document whether it's ok to index with -1 etc."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]=",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Stores the given [value] in the slot of the given [index]."
                              }
                            ],
                            [
                              {
                                "text": "// TODO(florian): document whether it's ok to index with -1 etc."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Creates a copy of a slice of this list."
                              }
                            ],
                            [
                              {
                                "text": "The returned object generally has the same type is this instance. Some subclasses may decide to return an object of different type, if the new size allows a more efficient class to be used."
                              }
                            ],
                            [
                              { "text": "The arguments " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              { "text": " must satisfy: " },
                              {
                                "is_code": true,
                                "text": "0 <= from <= to <= size"
                              },
                              { "text": "." }
                            ]
                          ]
                        },
                        {
                          "title": "Aliases",
                          "statements": [
                            [
                              {
                                "itemized": [
                                  [
                                    { "is_code": true, "text": "slice" },
                                    { "text": ": JavaScript." }
                                  ],
                                  [
                                    { "is_code": true, "text": "sublist" },
                                    { "text": ": Dart, Java," }
                                  ]
                                ]
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "This method should be implemented by each subclass of "
                              },
                              { "is_code": true, "text": "List" },
                              {
                                "text": ", as the type of the returned object should match the one of this instance. As exception, classes that have multiple implementations (such as "
                              },
                              { "is_code": true, "text": "SmallArray" },
                              { "text": " and " },
                              { "is_code": true, "text": "LargeArray" },
                              {
                                "text": ") may switch type, *especially* if the individual types are not visible to the users."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "copy",
                      "return_type": "List",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "source",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Replaces this[index..index+(source.size)[ with "
                              },
                              { "is_code": true, "text": "source" },
                              { "text": "[0..source.size[." }
                            ]
                          ]
                        },
                        {
                          "title": "Note",
                          "statements": [
                            [
                              {
                                "text": "We use forwarding instead of default values here because in subclasses the 5-argument version is a primitive method, that can't have default arguments."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "source",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Replaces this[index..index+(to-from)[ with source[from..to["
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds the given " },
                              { "is_code": true, "text": "value" },
                              { "text": " to the list." }
                            ],
                            [
                              {
                                "text": "This operation increases the size of this instance."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to call this method on lists that can't grow."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add_all",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Collection",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds all elements of the given " },
                              { "is_code": true, "text": "collection" },
                              { "text": " to the list." }
                            ],
                            [
                              {
                                "text": "This operation increases the size of this instance."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to call this method on lists that can't grow."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove_last",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes the last element of this instance."
                              }
                            ],
                            [{ "text": "Returns the removed element." }],
                            [
                              {
                                "text": "It is an error to call this method on lists that can't change size."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to call this method on empty lists."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes the first entry that is equal to the given "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Does nothing if the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is not in this instance." }
                            ],
                            [
                              { "text": "This operation is in " },
                              { "is_code": true, "text": "O(n)" },
                              { "text": " and thus not efficient." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "all",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes all entries that are equal to the given "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Does nothing if the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is not in this instance." }
                            ],
                            [
                              { "text": "This operation is in " },
                              { "is_code": true, "text": "O(n)" },
                              { "text": " and thus not efficient." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "last",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes the last entry that is equal to the given "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Does nothing if the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is not in this instance." }
                            ],
                            [
                              { "text": "This operation is in " },
                              { "is_code": true, "text": "O(n)" },
                              { "text": " and thus not efficient." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "clear",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Clears this list, setting the size to 0."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to call this method on lists that can't change size."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Concatenates this list with the " },
                              { "is_code": true, "text": "other" },
                              { "text": " list." }
                            ],
                            [
                              { "text": "Returns a new " },
                              {
                                "text": "List",
                                "path": "core/collections.toit"
                              },
                              { "text": " object." }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Subclasses may return a subclass of "
                              },
                              {
                                "text": "List",
                                "path": "core/collections.toit"
                              },
                              {
                                "text": ", but should mention this in the documentation or in the return-type."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "equals",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "element_equals",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Whether this instance is equal to " },
                              { "is_code": true, "text": "other" },
                              { "text": ", using " },
                              { "is_code": true, "text": "element_equals" },
                              { "text": " to compare the elements." }
                            ],
                            [
                              {
                                "text": "Equality only returns true when both operands are of the same type."
                              }
                            ],
                            [
                              {
                                "text": "Returns false, if this instance and "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " are not of the same " },
                              {
                                "text": "size",
                                "path": "core/collections.toit/CollectionBase"
                              },
                              {
                                "text": ", or if the contained elements are not equal themselves (using "
                              },
                              { "is_code": true, "text": "element_equals" },
                              { "text": ")." }
                            ],
                            [
                              {
                                "text": "It is an error to compare self-recursive data-structures, if the "
                              },
                              { "is_code": true, "text": "element_equals" },
                              {
                                "text": " block is not ensuring that the comparison leads to infinite loops."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Collections do *not* need to ensure that recursive data structures don't lead to infinite loops."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/CollectionBase"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/CollectionBase"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "reversed",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Iterates over all elements in reverse order and invokes the given "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": " on each of them." }
                            ],
                            [
                              { "text": "The argument " },
                              { "is_code": true, "text": "reversed" },
                              { "text": " must be true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "first",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "The first element of the list." }],
                            [{ "text": "It is an error if the list is empty." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "last",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "The last element of the list." }],
                            [{ "text": "It is an error if the list is empty." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each element and returns a new list with the results."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each element and stores the result in this list if "
                              },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is true." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false, then this function is equivalent to "
                              },
                              {
                                "text": "map [block]",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "filter",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Filters this instance using the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns a new list if " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false. Returns this instance otherwise."
                              }
                            ],
                            [
                              {
                                "text": "The result contains all the elements of this instance for which the "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": " returns true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "fill",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Fills " },
                              { "is_code": true, "text": "value" },
                              { "text": " into list elements [" },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": "[." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "fill",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Fills values, computed by evaluating "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": ", into list elements [" },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": "[." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "print_string",
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              { "text": "super", "path": "core/objects.toit" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "join",
                      "parameters": [
                        {
                          "param_name": "separator",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    {
                      "function_name": "sort",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "compare",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Sorts the range [" },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": "[ using the given " },
                              { "is_code": true, "text": "compare" },
                              {
                                "text": " block. The sort is stable, meaning that equal elements do not change their relative order."
                              }
                            ],
                            [
                              { "text": "Returns a new list if " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false. Returns this instance otherwise."
                              }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "compare" },
                              { "text": " block should take two arguments " },
                              { "is_code": true, "text": "a" },
                              { "text": " and " },
                              { "is_code": true, "text": "b" },
                              { "text": " and should return:" }
                            ],
                            [
                              {
                                "itemized": [
                                  [
                                    { "text": "-1 if " },
                                    { "is_code": true, "text": "a < b" },
                                    { "text": "," }
                                  ],
                                  [
                                    { "text": "0 if " },
                                    { "is_code": true, "text": "a == b" },
                                    { "text": ", and" }
                                  ],
                                  [
                                    { "text": "1 if " },
                                    { "is_code": true, "text": "a > b" },
                                    { "text": "." }
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "sort",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Sorts the range [" },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              {
                                "text": "[ using the the < and > operators. The sort is stable, meaning that equal elements do not change their relative order."
                              }
                            ],
                            [
                              { "text": "Returns a new list if " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false. Returns this instance otherwise."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "is_sorted",
                      "parameters": [
                        {
                          "param_name": "compare",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "is_sorted", "return_type": "any" },
                    {
                      "function_name": "swap",
                      "parameters": [
                        {
                          "param_name": "i",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "j",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "CollectionBase",
              "extend_path": "core/collections.toit",
              "exported_from": "core/collections.toit"
            },
            {
              "class_name": "Array",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "from",
                    "parameters": [
                      {
                        "param_name": "collection",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Collection",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Array",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "from_subclass",
                    "return_type": "Array",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "ensure",
                    "parameters": [
                      {
                        "param_name": "collection",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Collection",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Array",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Returns the given " },
                            { "is_code": true, "text": "collection" },
                            { "text": " as an " },
                            {
                              "text": "Array",
                              "path": "core/collections.toit"
                            },
                            { "text": "." }
                          ],
                          [
                            {
                              "text": "If it is already one, returns the input."
                            }
                          ],
                          [
                            { "text": "Otherwise copies the content of the " },
                            { "is_code": true, "text": "collection" },
                            { "text": " into a freshly allocated " },
                            {
                              "text": "Array",
                              "path": "core/collections.toit"
                            },
                            { "text": "." }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "factories": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "filler",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Array",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "block",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "Array",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates an array and initializes each element with the result of invoking the block."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              {
                                "text": ". This is an optimized implementation."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "resize",
                      "parameters": [
                        {
                          "param_name": "new_size",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Array",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "return_type": "Array",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Array",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Array",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              },
              "extends": "List",
              "extend_path": "core/collections.toit",
              "exported_from": "core/collections.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [{ "text": "A non-growable list." }],
                    [
                      {
                        "text": "This class is the most efficient way of storing elements, but requires the user to know the size of the list in advance."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "ByteArray",
              "class_structure": {
                "factories": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "ByteArray",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a new byte array of the given "
                            },
                            { "is_code": true, "text": "size" },
                            { "text": "." }
                          ],
                          [{ "text": "All elements are initialized to 0." }]
                        ]
                      }
                    ]
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "initializer",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "ByteArray",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a new byte array of the given "
                            },
                            { "is_code": true, "text": "size" },
                            {
                              "text": " and initializes the elements using the provided "
                            },
                            { "is_code": true, "text": "initializer" },
                            { "text": "." }
                          ],
                          [
                            { "text": "The " },
                            { "is_code": true, "text": "initializer" },
                            {
                              "text": " is invoked for each element, receiving the index as argument."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "size",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/CollectionBase"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "resize",
                      "parameters": [
                        {
                          "param_name": "new_size",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]=",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "to_string",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    {
                      "function_name": "to_float",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "big_endian",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "to_string_non_throwing",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Converts the UTF-8 byte array to a string. If we encounter invalid UTF-8 we replace sequences of invalid bytes with a Unicode replacement character, "
                              },
                              { "is_code": true, "text": "\\uFFFD" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "is_valid_string_content",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Byte arrays always return a new Byte array as a result of concatenating."
                              }
                            ],
                            [
                              { "text": "Users can write " },
                              {
                                "is_code": true,
                                "text": "[] + byte_array + other"
                              },
                              {
                                "text": " if the result should be a normal list."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "source",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              },
              "extends": "List",
              "extend_path": "core/collections.toit",
              "exported_from": "core/collections.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [{ "text": "A list specialized for bytes." }],
                    [
                      {
                        "text": "A byte array can only contain (non-null) integers in the range 0-255."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "Set",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes the given " },
                              { "is_code": true, "text": "key" },
                              { "text": " from this instance." }
                            ],
                            [
                              { "text": "If the key is absent, calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds the given " },
                              { "is_code": true, "text": "key" },
                              { "text": " to this instance." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add_all",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Collection",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds all elements of the given " },
                              { "is_code": true, "text": "collection" },
                              { "text": " to this instance." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.do",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Set",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.==",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "every",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.every",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "any",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.any",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.reduce [block]",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "initial",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.reduce --initial [block]",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "Set",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each element and returns a new set with the results."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "filter",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Set",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Filters this instance using the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns a new set if " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is false (the default)." }
                            ],
                            [
                              { "text": "Returns this instance if " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is true." }
                            ],
                            [
                              {
                                "text": "The result contains all the elements of this instance for which the "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": " returns true." }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance during the operation."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "intersect",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Set",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Set",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Intersects this instance with the " },
                              { "is_code": true, "text": "other" },
                              { "text": " set." }
                            ],
                            [
                              {
                                "text": "The result contains all elements that are both in this instance, as well as in the "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " set." }
                            ],
                            [
                              { "text": "Returns a new set if " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is false (the default)." }
                            ],
                            [
                              { "text": "Returns this instance, if " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is true." }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              },
              "exported_from": "core/collections.toit",
              "class_toitdoc": [
                { "statements": [[{ "text": "A set of keys." }]] }
              ]
            },
            {
              "class_name": "IdentitySet",
              "class_structure": {},
              "extends": "Set",
              "extend_path": "core/collections.toit",
              "exported_from": "core/collections.toit"
            },
            {
              "class_name": "Map",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "Map",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "get_key",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      },
                      {
                        "param_name": "get_value",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "Map",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Constructs a Map with a given " },
                            { "is_code": true, "text": "size" },
                            { "text": "." }
                          ],
                          [
                            {
                              "text": "For each key-value pair, first the block "
                            },
                            { "is_code": true, "text": "get_key" },
                            { "text": " and then the block " },
                            { "is_code": true, "text": "get_value" },
                            { "text": " are called." }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes the given " },
                              { "is_code": true, "text": "key" },
                              { "text": " from this instance." }
                            ],
                            [
                              { "text": "If the key is absent, calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the element stored at location "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "key" },
                              { "text": " must be in the map." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]=",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Stores " },
                              { "is_code": true, "text": "value" },
                              { "text": " in the location for the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If the " },
                              { "is_code": true, "text": "key" },
                              {
                                "text": " is already present, overrides the previous value."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns the value verbatim, if the " },
                              { "is_code": true, "text": "key" },
                              { "text": " is contained in the map." }
                            ],
                            [{ "text": "Returns null, otherwise." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns the value verbatim, if this instance contains the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Otherwise, calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              { "text": " and returns the result of the call." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_present",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If this instance contains the " },
                              { "is_code": true, "text": "key" },
                              { "text": " calls " },
                              { "is_code": true, "text": "if_present" },
                              {
                                "text": " with the corresponding value and returns the result."
                              }
                            ],
                            [{ "text": "Returns null otherwise." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        },
                        {
                          "param_name": "if_present",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If this instance contains the " },
                              { "is_code": true, "text": "key" },
                              { "text": " calls " },
                              { "is_code": true, "text": "if_present" },
                              {
                                "text": " with the corresponding value and returns the result."
                              }
                            ],
                            [
                              { "text": "Otherwise, calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              { "text": " and returns the result of the call." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "init",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns the value verbatim, if this instance contains the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Otherwise, initializes the slot with the result of calling [init] first."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value, and replaces the old value with the result."
                              }
                            ],
                            [
                              { "text": "Returns the result of calling the " },
                              { "is_code": true, "text": "updater" },
                              { "text": "." }
                            ],
                            [
                              { "text": "This instance must contain the " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If this instance contains the " },
                              { "is_code": true, "text": "key" },
                              { "text": ", calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value, and replaces the old value with the result. Returns the result of the call."
                              }
                            ],
                            [
                              {
                                "text": "If this instance does not contain the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": ", calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              {
                                "text": " instead, and stores the result of the call in this instance. Returns the result of the call."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If this instance contains the " },
                              { "is_code": true, "text": "key" },
                              { "text": ", calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value, and replaces the old value with the result. Returns the result of the call."
                              }
                            ],
                            [
                              {
                                "text": "If this instance does not contain the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": ", stores " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " in this instance. Returns " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "init",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If this instance does not contain the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": ", calls " },
                              { "is_code": true, "text": "init" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              {
                                "text": " first, and stores it in this instance."
                              }
                            ],
                            [
                              { "text": "Calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value (which might be the initial value that was just stored) and replaces the old value with the result."
                              }
                            ],
                            [
                              {
                                "text": "Returns the result of the call to the "
                              },
                              { "is_code": true, "text": "updater" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "init",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If this instance does not contain the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": ", stores " },
                              { "is_code": true, "text": "init" },
                              { "text": " in this instance." }
                            ],
                            [
                              { "text": "Calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value (which might be the initial value that was just stored) and replaces the old value with the result."
                              }
                            ],
                            [
                              {
                                "text": "Returns the result of the call to the "
                              },
                              { "is_code": true, "text": "updater" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each key/value pair of this instance."
                              }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance while iterating over it."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "keys",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              { "text": " on each key of this instance." }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance while iterating over it."
                              }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "keys" },
                              { "text": " must be true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "values",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              { "text": " on each value of this instance." }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance while iterating over it."
                              }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "values" },
                              { "text": " must be true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "keys",
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the keys of this instance as a list."
                              }
                            ],
                            [
                              {
                                "text": "This operation instantiates a fresh list and is thus in O(n)."
                              }
                            ],
                            [
                              { "text": "When possible use " },
                              {
                                "text": "do --keys [block]",
                                "path": "core/collections.toit/Map"
                              },
                              { "text": " instead." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "values",
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the values of this instance as a list."
                              }
                            ],
                            [
                              {
                                "text": "This operation instantiates a fresh list and is thus in O(n)."
                              }
                            ],
                            [
                              { "text": "When possible use " },
                              {
                                "text": "do --values [block]",
                                "path": "core/collections.toit/Map"
                              },
                              { "text": " instead." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "Map",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each key/value pair and returns a new map with the results."
                              }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " is invoked with two arguments for each entry in this instance: the key and the value. The returned value becomes the new value for the key."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Maps the values of this instance." }],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " must be true." }
                            ],
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each key/value pair and replaces the old value with the result of the call."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "filter",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Map",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Filters this instance using the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns a new list if " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false. Returns this instance otherwise."
                              }
                            ],
                            [
                              {
                                "text": "The result contains all the elements of this instance for which the "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": " returns true." }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance during the operation."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              },
              "exported_from": "core/collections.toit"
            },
            {
              "class_name": "IdentityMap",
              "class_structure": {},
              "extends": "Map",
              "extend_path": "core/collections.toit",
              "exported_from": "core/collections.toit"
            },
            {
              "class_name": "SystemMessageHandler",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "on_message",
                      "parameters": [
                        {
                          "param_name": "type",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "gid",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "pid",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "args",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              },
              "exported_from": "core/message.toit"
            },
            {
              "class_name": "Number",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "to_int",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "sign",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    { "function_name": "-", "return_type": "any" },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "*",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "/",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "%",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "abs",
                      "return_type": "Number",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "to_float",
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "if_equal",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              },
              "exported_from": "core/numbers.toit"
            },
            {
              "class_name": "int",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "str",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "from",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "to",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "radix",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "int",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "str",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "from",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "to",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "radix",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      },
                      {
                        "param_name": "on_error",
                        "is_block": true,
                        "is_named": true,
                        "is_required": true
                      }
                    ],
                    "return_type": "int",
                    "return_path": "core/numbers.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "-",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "~",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "&",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "|",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "^",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": ">>",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": ">>>",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "<<",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "print_string",
                      "parameters": [
                        {
                          "param_name": "base",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "to_int",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "sign",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "hash_code",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "sqrt",
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "is_power_of_two",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "is_aligned",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "repeat",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "Number",
              "extend_path": "core/numbers.toit",
              "exported_from": "core/numbers.toit"
            },
            {
              "class_name": "LargeInteger",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "*",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "/",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "%",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "-",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    { "function_name": "~", "return_type": "any" },
                    {
                      "function_name": "&",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "|",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "^",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">>",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">>>",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<<",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "print_string",
                      "parameters": [
                        {
                          "param_name": "base",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "to_int",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              },
              "extends": "int",
              "extend_path": "core/numbers.toit",
              "exported_from": "core/numbers.toit"
            },
            {
              "class_name": "float",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "NAN",
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "INFINITY",
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "MAX_FINITE",
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "MIN_POSITIVE",
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "str",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "from_bits",
                    "parameters": [
                      {
                        "param_name": "raw",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "sign",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Returns the sign of this instance." }],
                            [{ "text": "The sign is:" }],
                            [
                              {
                                "itemized": [
                                  [
                                    {
                                      "text": "-1 for negative numbers, and for -0.0"
                                    }
                                  ],
                                  [{ "text": "0 for 0.0" }],
                                  [{ "text": "1 for positive numbers." }]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "-",
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "*",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "/",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "%",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "sqrt",
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "print_string",
                      "parameters": [
                        {
                          "param_name": "precision",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    {
                      "function_name": "is_nan",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "is_finite",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "to_int",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "bits",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              },
              "extends": "Number",
              "extend_path": "core/numbers.toit",
              "exported_from": "core/numbers.toit"
            },
            {
              "class_name": "bool",
              "class_structure": {},
              "exported_from": "core/objects.toit"
            },
            {
              "class_name": "Lambda",
              "class_structure": {
                "members": {
                  "methods": [
                    { "function_name": "call", "return_type": "any" },
                    {
                      "function_name": "call",
                      "parameters": [
                        {
                          "param_name": "a",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "call",
                      "parameters": [
                        {
                          "param_name": "a",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "b",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "call",
                      "parameters": [
                        {
                          "param_name": "a",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "b",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "c",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "call",
                      "parameters": [
                        {
                          "param_name": "a",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "b",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "c",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "d",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              },
              "exported_from": "core/objects.toit"
            },
            {
              "class_name": "String",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "from_rune",
                    "parameters": [
                      {
                        "param_name": "rune",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "String",
                    "return_path": "core/string.toit"
                  },
                  {
                    "function_name": "format",
                    "parameters": [
                      {
                        "param_name": "format",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "object",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "String",
                    "return_path": "core/string.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Formats the " },
                            { "is_code": true, "text": "object" },
                            { "text": " according to the given " },
                            { "is_code": true, "text": "format" },
                            { "text": "." }
                          ],
                          [
                            { "text": "The " },
                            { "is_code": true, "text": "format" },
                            { "text": " description is very similar to " },
                            { "is_code": true, "text": "printf" },
                            { "text": "." }
                          ],
                          [{ "text": "Extensions relative to printf:" }],
                          [
                            {
                              "itemized": [
                                [
                                  { "is_code": true, "text": "^" },
                                  { "text": " for centering." }
                                ]
                              ]
                            }
                          ],
                          [
                            {
                              "text": "Missing relative to printf: No support for "
                            },
                            { "is_code": true, "text": "%g" },
                            { "text": " or " },
                            { "is_code": true, "text": "%p" },
                            { "text": "." }
                          ],
                          [{ "text": "Format Description:" }],
                          {
                            "is_code_section": true,
                            "text": "\n[alignment][precision][type]\nalignment = flags<digits>\nflags = '-' | '^' | '>'   (> is default, can't be used in the syntax)\nprecision = .<digits>\ntype 'd' | 'f' | 's' | 'o' | 'x' | 'c'\n"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "size",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "The size of this instance in UTF-8 code units (byte-sized)."
                              }
                            ],
                            [
                              {
                                "text": "The string may have fewer runes (Unicode \"codepoints\") than its size."
                              }
                            ],
                            [
                              {
                                "text": "For example the string \"Amélie\" has a size of 7, but a "
                              },
                              { "is_code": true, "text": "size --runes" },
                              { "text": " of 6." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "is_empty",
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns whether this instance is the empty string ("
                              },
                              { "is_code": true, "text": "\"\"" },
                              { "text": ")" }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "size",
                      "parameters": [
                        {
                          "param_name": "runes",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the number of runes (Unicode \"codepoints\") in this string."
                              }
                            ],
                            [
                              {
                                "text": "This operation takes linear time to complete as it runs through the whole string."
                              }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "runes" },
                              { "text": " must be true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]",
                      "parameters": [
                        {
                          "param_name": "i",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "The rune (Unicode \"codepoint\") at position "
                              },
                              { "is_code": true, "text": "i" },
                              { "text": " of the underlying bytes." }
                            ],
                            [
                              { "text": "Returns null if " },
                              { "is_code": true, "text": "i" },
                              {
                                "text": " points into the middle of a multi-byte sequence."
                              }
                            ],
                            [
                              { "text": "It is an error if " },
                              { "is_code": true, "text": "i" },
                              { "text": " is not in range 0 (inclusive) to " },
                              {
                                "text": "size",
                                "path": "core/string.toit/String"
                              },
                              { "text": " (exclusive)." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"Amélie\"\ndebug \"$(%c str[2])\" // => é\ndebug str[3]         // => null\ndebug \"$(%c str[4])\" // => l\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "at",
                      "parameters": [
                        {
                          "param_name": "i",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "raw",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "The raw byte (Unicode codeunit) at position "
                              },
                              { "is_code": true, "text": "i" },
                              {
                                "text": " in the UTF-8 byte representation of this string."
                              }
                            ],
                            [
                              { "text": "Contrary to " },
                              {
                                "text": "at",
                                "path": "core/string.toit/String"
                              },
                              { "text": " this method never returns null." }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "raw" },
                              { "text": " must be true" }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Iterates over all slots in the string (as if using "
                              },
                              {
                                "text": "at",
                                "path": "core/string.toit/String"
                              },
                              { "text": ") and calls the given " },
                              { "is_code": true, "text": "block" },
                              { "text": " with the values." }
                            ],
                            [
                              {
                                "text": "For every multi-byte sequences in the string, the "
                              },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " is invoked first with the rune (Unicode \"codepoint\"), then with null for each remaining codeunit of the sequence."
                              }
                            ],
                            [{ "text": "This function is equivalent to:" }],
                            {
                              "is_code_section": true,
                              "text": "\nsize.repeat: block.call this[it]\n"
                            }
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"é\".do: debug it // 233, null\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "runes",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Iterates over all runes (Unicode \"codepoint\") and calls the given "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": " with the values." }
                            ],
                            [
                              { "text": "Contrary to " },
                              {
                                "text": "do",
                                "path": "core/string.toit/String"
                              },
                              { "text": ", only invokes " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " with valid integer values. For every multi-byte sequences there is only one call to "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "runes" },
                              { "text": " must be true." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"Amélie\".do --runes: debug \"$(%c it)\"\" // A, m, é, l, i, e\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Copies the string between " },
                              { "is_code": true, "text": "from" },
                              { "text": " (inclusive) and " },
                              { "is_code": true, "text": "to" },
                              { "text": " (exclusive)." }
                            ],
                            [
                              {
                                "text": "The given substring must be legal. That is, neither "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": " nor " },
                              { "is_code": true, "text": "to" },
                              {
                                "text": " can point into the middle of a multi-byte sequence."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "force_valid",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Copies the string between " },
                              { "is_code": true, "text": "from" },
                              { "text": " (inclusive) and " },
                              { "is_code": true, "text": "to" },
                              { "text": " (exclusive)." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "force_valid" },
                              { "text": " is true, adjusts " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              {
                                "text": " so that they are valid substring indixes. If "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": " (resp. " },
                              { "is_code": true, "text": "to" },
                              {
                                "text": ") points to the middle of a multi-byte sequence decreases the index until it points to the beginning of the sequence. Also see "
                              },
                              {
                                "text": "rune_index",
                                "path": "core/string.toit/String"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "rune_index",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the index of the rune pointed to by "
                              },
                              { "is_code": true, "text": "index" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns " },
                              { "is_code": true, "text": "index" },
                              { "text": " if it is equal to the size." }
                            ],
                            [
                              { "text": "Returns " },
                              { "is_code": true, "text": "index" },
                              {
                                "text": " if it points to the beginning of a rune."
                              }
                            ],
                            [
                              { "text": "Otherwise decreases " },
                              { "is_code": true, "text": "index" },
                              {
                                "text": " until it points to the beginning of the multi-byte sequence."
                              }
                            ],
                            [
                              { "text": "The parameter " },
                              { "is_code": true, "text": "index" },
                              { "text": " must satisfy: " },
                              { "is_code": true, "text": "0 <= index <= size" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "hash_code",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "The hash code for this instance." }],
                            [
                              { "text": "This operation is in " },
                              { "is_code": true, "text": "O(1)" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Concatenates this instance with the given "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " string." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "*",
                      "parameters": [
                        {
                          "param_name": "amount",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Concatenates " },
                              { "is_code": true, "text": "amount" },
                              { "text": " copies of this instance." }
                            ],
                            [
                              { "text": "The parameter " },
                              { "is_code": true, "text": "amount" },
                              { "text": " must be >= 0." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              { "text": "super", "path": "core/objects.toit" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Whether this instance is less than " },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Uses " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " to determine the ordering of the two strings."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance is less or equal to "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Uses " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " to determine the ordering of the two strings."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance is greater than "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Uses " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " to determine the ordering of the two strings."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance is greater or equal to "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Uses " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " to determine the ordering of the two strings."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Compares the two given strings." }],
                            [
                              {
                                "text": "Returns 1 if this instance is greater than "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns 0 if this instance is equal to "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns -1 if this instance is less than "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "The comparison is done based on Unicode values. That is, string A is considered less than string B, if a leading prefix (potentially empty) is the same, and string A has a Unicode value (rune/code unit) less than string B at the following position."
                              }
                            ],
                            [
                              {
                                "text": "If string A is a prefix of string B, then A is less than B."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Errors",
                          "statements": [
                            [
                              {
                                "text": "Since natural languages often have different requirements for sorting, it is not sufficient to use this method for natural language sorting (also known as \"collation\")."
                              }
                            ],
                            [
                              {
                                "text": "For example, this method considers \"Amélie\" as greater than \"Amzlie\". In French, accented characters should be ordered similar to non-accented characters. This ordering would thus be wrong."
                              }
                            ],
                            [
                              {
                                "text": "Similarly, in Spanish, words containing \"ñ\" would not be sorted correctly. The \"ñ\" is collated between \"n\" and \"o\" (contrary to Unicode's position after all ASCII characters)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"a\".compare_to \"b\"    // => -1\n\"a\".compare_to \"a\"    // => 0\n\"b\".compare_to \"a\"    // => 1\n\"ab\".compare_to \"abc\" // => -1\n\"abc\".compare_to \"ab\" // => 1\n\"Amélie\".compare_to \"Amelie\"  // => 1\n\"Amélie\".compare_to \"Amzlie\"  // => 1\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "if_equal",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Compares this instance with " },
                              { "is_code": true, "text": "other" },
                              { "text": " and calls " },
                              { "is_code": true, "text": "if_equal" },
                              { "text": " if the two are equal." }
                            ],
                            [
                              { "text": "See " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              { "text": " for documentation on the ordering." }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "if_equal" },
                              {
                                "text": " block is called only if this instance and "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " are equal." }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "if_equal" },
                              {
                                "text": " block should return -1, 0, or 1 (since it becomes the result of the call to this method)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "if_equal" },
                              { "text": " block allows easy chaining of " },
                              { "is_code": true, "text": "compare_to" },
                              { "text": " calls." }
                            ],
                            {
                              "is_code_section": true,
                              "text": "\n// In class A with fields str_field1 and str_field2:\ncompare_to other/A -> int:\n  return str_field1.compare_to other.str_field1 --if_equal=:\n    str_field2.compare_to other.str_field2\n"
                            }
                          ]
                        }
                      ]
                    },
                    { "function_name": "stringify", "return_type": "any" },
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "pad",
                      "parameters": [
                        {
                          "param_name": "amount",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "char",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "left",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Pads this instance with char on the left, until the total size of the string is "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns this instance directly if this instance is longer than "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "left" },
                              { "text": " must be true." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"foo\"\nstr.pad --left 5     // => \"  foo\"\nstr.pad --left 5 '0' // => \"00foo\"\n\nstr.pad --left 3     // => \"foo\"\nstr.pad --left 1     // => \"foo\"\n\nstr.pad 5     // => \"  foo\"\nstr.pad 5 '0' // => \"00foo\"\n\nstr.pad 3     // => \"foo\"\nstr.pad 1     // => \"foo\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "pad",
                      "parameters": [
                        {
                          "param_name": "amount",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "char",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "right",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Pads this instance with " },
                              { "is_code": true, "text": "char" },
                              {
                                "text": " on the right, until the total size of the string is "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns this instance directly if this instance is longer than "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [{ "text": "The flag [right] must be true." }]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"foo\"\nstr.pad --right 5     // => \"foo  \"\nstr.pad --right 5 '0' // => \"foo00\"\n\nstr.pad --right 3     // => \"foo\"\nstr.pad --right 1     // => \"foo\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "pad",
                      "parameters": [
                        {
                          "param_name": "amount",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "char",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "center",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Pads this instance with " },
                              { "is_code": true, "text": "char" },
                              {
                                "text": " on the left and right, until the total size of the string is "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns a string where this instance is centered. If the padding can't be divided evenly, adds more padding to the right."
                              }
                            ],
                            [
                              {
                                "text": "Returns this instance directly if this instance is longer than "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "center" },
                              { "text": " must be true." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"foo\"\nstr.pad --center 5     // => \" foo \"\nstr.pad --center 5 '0' // => \"0foo0\"\n\nstr.pad --center 6     // => \" foo  \"\nstr.pad --center 6 '0' // => \"0foo00\"\n\nstr.pad --center 3     // => \"foo\"\nstr.pad --center 1     // => \"foo\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "starts_with",
                      "parameters": [
                        {
                          "param_name": "prefix",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance starts with the given "
                              },
                              { "is_code": true, "text": "prefix" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "ends_with",
                      "parameters": [
                        {
                          "param_name": "suffix",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance ends with the given "
                              },
                              { "is_code": true, "text": "suffix" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "matches",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "at",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance has an occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " at index " },
                              { "is_code": true, "text": "at" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The index " },
                              { "is_code": true, "text": "at" },
                              { "text": " does not need to be valid." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"Toad the Wet Sprocket\".matches \"Toad\"     --at=0   // => true\n\"Toad the Wet Sprocket\".matches \"Toad\"     --at=-1  // => false\n\"Toad the Wet Sprocket\".matches \"Sprocket\" --at=13  // => true\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "glob",
                      "parameters": [
                        {
                          "param_name": "pattern",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "position_",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "index_of",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "last",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Searches for " },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the range " },
                              { "is_code": true, "text": "from" },
                              { "text": " (inclusive) - " },
                              { "is_code": true, "text": "to" },
                              { "text": " (exclusive)." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "last" },
                              {
                                "text": " is false (the default) returns the first occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the given range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "last" },
                              {
                                "text": " is true returns the last occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the given range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": ", by searching backward. The " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " must be entirely contained within the range."
                              }
                            ],
                            [
                              { "text": "The optional parameters " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              { "text": " delimit the range in which the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is searched in. The " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " must be fully contained in the range "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              {
                                "text": " (as if taking a [copy] with these parameters) to find the "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": " does not need to be valid." }
                            ],
                            [
                              {
                                "itemized": [
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " < " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " returns -1. Considers the " },
                                    { "is_code": true, "text": "needle" },
                                    {
                                      "text": " as not found (even if it's the empty string)."
                                    }
                                  ],
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " < 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " > " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": ", adjusts " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " to 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " to " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": "." }
                                  ]
                                ]
                              }
                            ],
                            [
                              { "text": "Returns -1 if " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is not found." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"foobar\".index_of \"foo\"  // => 0\n\"foobar\".index_of \"bar\"  // => 3\n\"foo\".index_of \"bar\"     // => -1\n\n\"foobarfoo\".index_of \"foo\"           // => 0\n\"foobarfoo\".index_of \"foo\" 1         // => 6\n\"foobarfoo\".index_of \"foo\" 1 8       // => -1\n\n// Invalid ranges:\n\"foobarfoo\".index_of \"foo\" -1 999    // => 0\n\"foobarfoo\".index_of \"foo\" 1 999     // => 6\n\n\"\".index_of \"\" 0 0   // => 0\n\"\".index_of \"\" -3 -3 // => -1\n\"\".index_of \"\" 2 2   // => -1\n\n// Last:\n\"foobarfoo\".index_of --last \"foo\"           // => 6\n\"foobarfoo\".index_of --last \"foo\" 1         // => 6\n\"foobarfoo\".index_of --last \"foo\" 1 6       // => 0\n\"foobarfoo\".index_of --last \"foo\" 0 1       // => 0\n\"foobarfoo\".index_of --last \"foo\" 0 8       // => 0\n\n\"foobarfoo\".index_of --last \"gee\"           // => -1\n\"foobarfoo\".index_of --last \"foo\" 1 5       // => -1\n\"foobarfoo\".index_of --last \"foo\" 0 8       // => 0\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "index_of",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "last",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Searches for " },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the range " },
                              { "is_code": true, "text": "from" },
                              { "text": " (inclusive) - " },
                              { "is_code": true, "text": "to" },
                              { "text": " (exclusive)." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "last" },
                              {
                                "text": " is false (the default) returns the first occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the given range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "last" },
                              {
                                "text": " is true returns the last occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the given range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": ", by searching backward." }
                            ],
                            [
                              { "text": "The optional parameters " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              { "text": " delimit the range in which the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is searched in. The " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " must be fully contained in the range "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": " (as if taking a " },
                              {
                                "text": "copy",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " with these parameters) to find the "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": " does not need to be valid." }
                            ],
                            [
                              {
                                "itemized": [
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " < " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " returns -1. Considers the " },
                                    { "is_code": true, "text": "needle" },
                                    {
                                      "text": " as not found (even if it's the empty string)."
                                    }
                                  ],
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " < 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " > " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": ", adjusts " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " to 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " to " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": "." }
                                  ]
                                ]
                              }
                            ],
                            [
                              { "text": "Calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with this instance if " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " is not found, and returns the result of that call."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            [
                              { "text": "Also see " },
                              {
                                "text": "index_of",
                                "path": "core/string.toit/String"
                              },
                              { "text": " for more examples." }
                            ],
                            {
                              "is_code_section": true,
                              "text": "\n\"foo\".index_of \"bar\" --if_absent=: it.size            // => 3 (the size of \"foo\")\n\"foobarfoo\".index_of \"foo\" 1 8 --if_absent=: 499      // => 499\n\"\".index_of \"\" -3 -3 --if_absent=: throw \"not found\"  // Error\n\"\".index_of \"\" 2 2   --if_absent=: -1                 // => -1\n\"foobarfoo\".index_of \"foo\" 1 8 --if_absent=: 42       // => 42\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes leading and trailing spaces. // TODO(florian): should we also remove newlines...?"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "left",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes leading spaces. // TODO(florian): should we also remove newlines... ?"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "right",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes trailing spaces. // TODO(florian): should we also remove newlines... ?"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "prefix",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes a leading " },
                              { "is_code": true, "text": "str" },
                              { "text": " (if present)." }
                            ],
                            [
                              {
                                "text": "Returns this instance verbatim, if it doesn't start with "
                              },
                              { "is_code": true, "text": "str" },
                              { "text": "." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"http://www.example.com\".trim --prefix \"http://\" // => \"www.example.com\"\nstr := \"foobar\"\nstr.trim --prefix \"foo\"  // => \"bar\"\nstr.trim --prefix \"bar\"  // => \"foobar\"\nstr.trim --prefix \"gee\"  // => \"foobar\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "prefix",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes a leading " },
                              { "is_code": true, "text": "str" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Calls " },
                              { "is_code": true, "text": "if_absent" },
                              {
                                "text": " if this instance does not start with "
                              },
                              { "is_code": true, "text": "str" },
                              {
                                "text": ". The argument to the block is this instance."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"https://www.example.com\".trim --prefix \"http://\" --if_absent=: it.trim --prefix \"https://\"  // => \"www.example.com\"\nstr := \"foobar\"\nstr.trim --prefix \"foo\" --if_absent=: \"not_used\" // => \"bar\"\nstr.trim --prefix \"\"    --if_absent=: \"not_used\" // => \"foobar\"\nstr.trim --prefix \"gee\" --if_absent=: it         // => \"foobar\"   (the default behavior)\nstr.trim --prefix \"gee\" --if_absent=: throw \"missing prefix\" // ERROR\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "suffix",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes a trailing " },
                              { "is_code": true, "text": "str" },
                              { "text": " (if present)." }
                            ],
                            [
                              {
                                "text": "Returns this instance verbatim, if it doesn't end with "
                              },
                              { "is_code": true, "text": "str" },
                              { "text": "." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"hello.toit\".trim --suffix \".toit\"  // => \"hello\"\nstr := \"foobar\"\nstr.trim --suffix \"bar\"  // => \"foo\"\nstr.trim --suffix \"foo\"  // => \"foobar\"\nstr.trim --suffix \"gee\"  // => \"foobar\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "suffix",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes a trailing " },
                              { "is_code": true, "text": "str" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Calls " },
                              { "is_code": true, "text": "if_absent" },
                              {
                                "text": " if this instance does not end with "
                              },
                              { "is_code": true, "text": "str" },
                              {
                                "text": ". The argument to the block is this instance."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"foobar\"\nstr.trim --suffix \"bar\" --if_absent=: \"not_used\" // => \"bar\"\nstr.trim --suffix \"\"    --if_absent=: \"not_used\" // => \"foobar\"\nstr.trim --suffix \"gee\" --if_absent=: it         // => \"foobar\"   (the default behavior)\nstr.trim --suffix \"gee\" --if_absent=: throw \"missing suffix\" // ERROR\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "split",
                      "parameters": [
                        {
                          "param_name": "separator",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "process_part",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "at_first",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Splits this instance at " },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If [at_first] is false (the default) splits at *every* occurrence of "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If [at_first] is true, splits only at the first occurrence of "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Calls " },
                              { "is_code": true, "text": "process_part" },
                              {
                                "text": " for each part. It this instance starts or ends with a "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": ", then " },
                              { "is_code": true, "text": "process_part" },
                              {
                                "text": " is invoked with the empty string first and last, respectively."
                              }
                            ],
                            [
                              {
                                "text": "Splits are never in the middle of a UTF-8 multi-byte sequence. This is normally a consequence of the seperator (as well as this instance) being well-formed UTF-8. However, it is explicitly enforced for the zero length separator (the empty string)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"Toad the Wet Sprocket\".split \"e\": debug it  // debugs \"Toad th\", \" W\", \"t Sprock\", and \"t\"\n\" the dust \".split \" \": debug it             // debugs \"\", \"the\", \"dust\", and \"\"\n\"abc\".split  \"\":    debug it                 // debugs \"\", \"a\", \"b\", and \"c\"\n\"foo\".split  \"foo\": debug it                 // debugs \"\" and \"\"\n\"afoo\".split \"foo\": debug it                 // debugs \"a\" and \"\"\n\"foob\".split \"foo\": debug it                 // debugs \"\" and \"b\"\n\"\".split \"\": debug it                        // debugs \"\"\n\ngadsby := \"If youth, throughout all history, had had a champion to stand up for it;\"\ngadsby.split \"e\": debug it // debugs the contents of gadsby\n\n\"Toad the Wet Sprocket\".split --at_first \"e\": debug it  // debugs \"Toad th\", \" Wet Sprocket\"\n\" the dust \".split            --at_first \" \": debug it  // debugs \"\", \"the dust \"\ngadsby.split                  --at_first \"e\": debug it  // debugs the contents of gadsby\n\n\"abc\".split  --at_first \"\":    debug it     // debugs \"\" and \"abc\"\n\"foo\".split  --at_first \"foo\": debug it     // debugs \"\" and \"\"\n\"afoo\".split --at_first \"foo\": debug it     // debugs \"a\" and \"\"\n\"foob\".split --at_first \"foo\": debug it     // debugs \"\" and \"b\"\n\"\".split     --at_first \"\":    debug it     // debugs \"\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "split",
                      "parameters": [
                        {
                          "param_name": "separator",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "at_first",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Splits this instance at " },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns a list of the separated parts."
                              }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "at_first" },
                              {
                                "text": " is false (the default) splits at *every* occurrence of "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "at_first" },
                              {
                                "text": " is true, splits only at the first occurrence of "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Splits are never in the middle of a UTF-8 multi-byte sequence. This is normally a consequence of the seperator (as well as this instance) being well-formed UTF-8. However, it is explicitly enforced for the zero length separator (the empty string)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"Toad the Wet Sprocket\".split \"e\"  // => [\"Toad th\", \" W\", \"t Sprock\", \"t\"]\n\" the dust \".split \" \"             // => [\"\", \"the\", \"dust\", \"\"]\n\"abc\".split  \"\"                    // => [\"\", \"a\", \"b\", \"c\"]\n\"foo\".split  \"foo\"                 // => [\"\", \"\"]\n\"afoo\".split \"foo\"                 // => [\"a\", \"\"]\n\"foob\".split \"foo\"                 // => [\"\", \"b\"]\n\"\".split \"\"                        // => [\"\"]\n\ngadsby := \"If youth, throughout all history, had had a champion to stand up for it;\"\ngadsby.split \"e\"   // => [gadsby]\n\n\"Toad the Wet Sprocket\".split --at_first \"e\"  // => [\"Toad th\", \" Wet Sprocket\"]\n\" the dust \".split            --at_first \" \"  // => [\"\", \"the dust \"]\ngadsby.split                  --at_first \"e\"  // => [gadsby]\n\n\"abc\".split  --at_first \"\"      // => [\"\", \"abc\"]\n\"foo\".split  --at_first \"foo\"   // => [\"\", \"\"]\n\"afoo\".split --at_first \"foo\"   // => [\"a\", \"\"]\n\"foob\".split --at_first \"foo\"   // => [\"\", \"b\"]\n\"\".split     --at_first \"\"      // => [\"\"]\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "contains",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Returns whether " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is present in this instance." }
                            ],
                            [
                              { "text": "The optional parameters " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              { "text": " delimit the range in which the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is searched in. The " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " must be fully contained in the range "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": " (as if taking a " },
                              {
                                "text": "copy",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " with these parameters) to return true."
                              }
                            ],
                            [
                              { "text": "The range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": " does not need to be valid." }
                            ],
                            [
                              {
                                "itemized": [
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " < " },
                                    { "is_code": true, "text": "from" },
                                    {
                                      "text": " returns false. Considers the "
                                    },
                                    { "is_code": true, "text": "needle" },
                                    {
                                      "text": " as not found (even if it's the empty string)."
                                    }
                                  ],
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " < 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " > " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": ", adjusts " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " to 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " to " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": "." }
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "replacement",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "all",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Replaces the given " },
                              { "is_code": true, "text": "needle" },
                              { "text": " with the " },
                              { "is_code": true, "text": "replacement" },
                              { "text": " string." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "all" },
                              {
                                "text": " is true, replaces all occurrences of "
                              },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": ". Otherwise, only replaces the first occurrence."
                              }
                            ],
                            [
                              {
                                "text": "Does nothing, if this instance doesn't contain the "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "This operation only replaces occurrences of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " that are fully contained in " },
                              { "is_code": true, "text": "from" },
                              { "text": "-" },
                              { "is_code": true, "text": "to" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "replacement_callback",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "all",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Replaces the given " },
                              { "is_code": true, "text": "needle" },
                              { "text": " with the result of calling " },
                              {
                                "is_code": true,
                                "text": "replacement_callback"
                              },
                              { "text": "." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "all" },
                              {
                                "text": " is true, replaces all occurrences of "
                              },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": ". For each found occurrence calls the "
                              },
                              {
                                "is_code": true,
                                "text": "replacement_callback"
                              },
                              {
                                "text": " with the matched string as argument."
                              }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "all" },
                              {
                                "text": " is false, only replaces the first occurrence with the result of calling "
                              },
                              {
                                "is_code": true,
                                "text": "replacement_callback"
                              },
                              { "text": " with the matched string." }
                            ],
                            [
                              {
                                "text": "Does nothing, if this instance doesn't contain the "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "This operation only replaces occurrences of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " that are fully contained in " },
                              { "is_code": true, "text": "from" },
                              { "text": "-" },
                              { "is_code": true, "text": "to" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "to_byte_array", "return_type": "any" },
                    {
                      "function_name": "to_byte_array",
                      "parameters": [
                        {
                          "param_name": "start",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "end",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_to_byte_array",
                      "parameters": [
                        {
                          "param_name": "byte_array",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_to_byte_array",
                      "parameters": [
                        {
                          "param_name": "byte_array",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "dest_index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_to_byte_array",
                      "parameters": [
                        {
                          "param_name": "byte_array",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "start",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "end",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "dest_index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              },
              "exported_from": "core/string.toit"
            },
            {
              "class_name": "TaskLatch",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "TaskLatch",
                    "return_path": "core/task.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "wait", "return_type": "any" },
                    { "function_name": "increment", "return_type": "none" },
                    {
                      "function_name": "decrement",
                      "parameters": [
                        {
                          "param_name": "has_exception",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "exported_from": "core/task.toit"
            },
            {
              "class_name": "Duration",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "of",
                    "parameters": [
                      {
                        "param_name": "block",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "Duration",
                    "return_path": "core/time.toit"
                  },
                  { "function_name": "ZERO", "return_type": "any" }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "hours",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "minutes",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "ms",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "ns",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "seconds",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "us",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Duration",
                    "return_path": "core/time.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "ns_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Duration",
                    "return_path": "core/time.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "periodic",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "ns",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "us",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "ms",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "seconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "minutes",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "hours",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "/",
                      "parameters": [
                        {
                          "param_name": "factor",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "Duration",
                      "return_path": "core/time.toit"
                    }
                  ]
                }
              },
              "exported_from": "core/time.toit"
            },
            {
              "class_name": "TimeInfo",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "from",
                    "parameters": [
                      {
                        "param_name": "seconds",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "TimeInfo",
                    "return_path": "core/time.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "day",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "hours",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "minutes",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "month",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "seconds",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "year",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "TimeInfo",
                    "return_path": "core/time.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "seconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "seconds=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "minutes",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "minutes=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "hours",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "hours=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "day",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "day=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "month",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "month=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "year",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "year=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "weekday",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "yearday",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "to_time",
                      "return_type": "Time",
                      "return_path": "core/time.toit"
                    },
                    {
                      "function_name": "to_seconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              },
              "exported_from": "core/time.toit"
            },
            {
              "class_name": "Time",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "now",
                    "return_type": "Time",
                    "return_path": "core/time.toit"
                  },
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Time",
                    "return_path": "core/time.toit"
                  },
                  {
                    "function_name": "from_string",
                    "parameters": [
                      {
                        "param_name": "str",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "Time",
                    "return_path": "core/time.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "ns",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "seconds",
                        "is_block": false,
                        "is_named": true,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Time",
                    "return_path": "core/time.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "duration",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "Time",
                      "return_path": "core/time.toit"
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "timestamp",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "seconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "ns",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "milliseconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "hash_code",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "to_time_info",
                      "return_type": "TimeInfo",
                      "return_path": "core/time.toit"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "days",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "hours",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "minutes",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "months",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "seconds",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "years",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "Time",
                      "return_path": "core/time.toit"
                    },
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              },
              "exported_from": "core/time.toit"
            },
            {
              "class_name": "Profiler",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "install",
                    "parameters": [
                      {
                        "param_name": "profile_all_tasks",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "bool",
                        "path": "core/objects.toit"
                      }
                    ],
                    "return_type": "none"
                  },
                  { "function_name": "start", "return_type": "none" },
                  { "function_name": "stop", "return_type": "none" },
                  {
                    "function_name": "report",
                    "parameters": [
                      {
                        "param_name": "title",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "cutoff",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "none"
                  },
                  {
                    "function_name": "encode",
                    "parameters": [
                      {
                        "param_name": "title",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "cutoff",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "ByteArray",
                    "return_path": "core/collections.toit"
                  },
                  { "function_name": "uninstall", "return_type": "none" },
                  {
                    "function_name": "do",
                    "parameters": [
                      {
                        "param_name": "block",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "any"
                  }
                ]
              },
              "exported_from": "core/utils.toit"
            }
          ],
          "top_level": {
            "export_functions": [
              {
                "function_name": "defines",
                "exported_from": "core/entry.toit",
                "return_type": "any"
              },
              {
                "function_name": "throw",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "exception",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "rethrow",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "exception",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "trace",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "ByteArray",
                    "path": "core/collections.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "catch",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "trace",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  },
                  {
                    "param_name": "unwind",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "trace",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  },
                  {
                    "param_name": "unwind",
                    "is_block": true,
                    "is_named": true,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "unwind",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  },
                  {
                    "param_name": "trace",
                    "is_block": true,
                    "is_named": true,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "trace",
                    "is_block": true,
                    "is_named": true,
                    "is_required": true
                  },
                  {
                    "param_name": "unwind",
                    "is_block": true,
                    "is_named": true,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch_and_trace",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "execute",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "execute",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "fail_block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "print_trace",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch_exception",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "lambda",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch_and_trace_exception",
                "exported_from": "core/exceptions.toit",
                "parameters": [
                  {
                    "param_name": "lambda",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "system_send",
                "exported_from": "core/message.toit",
                "parameters": [
                  {
                    "param_name": "type",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "args",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "set_system_message_handler",
                "exported_from": "core/message.toit",
                "parameters": [
                  {
                    "param_name": "type",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "handler",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "SystemMessageHandler",
                    "path": "core/message.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "print_for_manually_decoding",
                "exported_from": "core/message.toit",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "ByteArray",
                    "path": "core/collections.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "log",
                "exported_from": "core/print.toit",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Logs the " },
                        { "is_code": true, "text": "message" },
                        { "text": "." }
                      ],
                      [
                        {
                          "text": "The resulting message is stringified using "
                        },
                        {
                          "text": "Object_.stringify",
                          "path": "core/objects.toit"
                        },
                        { "text": "." }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "log",
                "exported_from": "core/print.toit",
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Logs an empty line." }],
                      [
                        {
                          "text": "This function is generally used to improve the output of the console output, but may have no effect on other receivers of the log message."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "debug",
                "exported_from": "core/print.toit",
                "parameters": [
                  {
                    "param_name": "object",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Prints the given " },
                        { "is_code": true, "text": "object" },
                        { "text": " for debugging." }
                      ],
                      [{ "text": "Does not yield the currently running task." }]
                    ]
                  }
                ]
              },
              {
                "function_name": "debug",
                "exported_from": "core/print.toit",
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Prints an empty line." }],
                      [{ "text": "Does not yield the currently running task." }]
                    ]
                  }
                ]
              },
              {
                "function_name": "print_heap",
                "exported_from": "core/print.toit",
                "return_type": "any"
              },
              {
                "function_name": "object_histogram",
                "exported_from": "core/print.toit",
                "return_type": "Array",
                "return_path": "core/collections.toit"
              },
              {
                "function_name": "print_object_histogram",
                "exported_from": "core/print.toit",
                "return_type": "none"
              },
              {
                "function_name": "hatch",
                "exported_from": "core/process.toit",
                "parameters": [
                  {
                    "param_name": "lambda",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "process_count",
                "exported_from": "core/process.toit",
                "return_type": "any"
              },
              {
                "function_name": "signal_kill",
                "exported_from": "core/process.toit",
                "parameters": [
                  {
                    "param_name": "id",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Only used by the system process, otherwise throws \"NOT ALLOWED\"."
                        }
                      ],
                      [
                        {
                          "text": "May also throw \"NOT ALLOWED\" if the process already terminated."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "utf_8_bytes",
                "exported_from": "core/string.toit",
                "parameters": [
                  {
                    "param_name": "char",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "write_utf_8_to_byte_array",
                "exported_from": "core/string.toit",
                "parameters": [
                  {
                    "param_name": "byte_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "position",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "char",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "task",
                "exported_from": "core/task.toit",
                "return_type": "any"
              },
              {
                "function_name": "task",
                "exported_from": "core/task.toit",
                "parameters": [
                  {
                    "param_name": "code",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "yield",
                "exported_from": "core/task.toit",
                "return_type": "none"
              },
              {
                "function_name": "log_tasks",
                "exported_from": "core/task.toit",
                "return_type": "any"
              },
              {
                "function_name": "is_epoch_set",
                "exported_from": "core/time.toit",
                "return_type": "bool",
                "return_path": "core/objects.toit"
              },
              {
                "function_name": "get_real_time_clock",
                "exported_from": "core/time.toit",
                "return_type": "any"
              },
              {
                "function_name": "is_leap",
                "exported_from": "core/time.toit",
                "parameters": [
                  {
                    "param_name": "year",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "bool",
                "return_path": "core/objects.toit"
              },
              {
                "function_name": "normalize",
                "exported_from": "core/time.toit",
                "parameters": [
                  {
                    "param_name": "high",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "low",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "base",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit"
              },
              {
                "function_name": "seconds_since_epoch",
                "exported_from": "core/time.toit",
                "parameters": [
                  {
                    "param_name": "year",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "month",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "day",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "hour",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "min",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "sec",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit"
              },
              {
                "function_name": "sleep",
                "exported_from": "core/timer.toit",
                "parameters": [
                  {
                    "param_name": "duration",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Duration",
                    "path": "core/time.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "sleep",
                "exported_from": "core/timer.toit",
                "parameters": [
                  {
                    "param_name": "ms",
                    "is_block": false,
                    "is_named": true,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "identical",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "y",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "min",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "a",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "b",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "max",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "a",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "b",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "round_up",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "value",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "divisor",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Round a non-negative " },
                        { "is_code": true, "text": "value" },
                        { "text": " up to the next multiple of the " },
                        { "is_code": true, "text": "divisor" },
                        { "text": "." }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "round_down",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "value",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "divisor",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Round a non-negative " },
                        { "is_code": true, "text": "value" },
                        { "text": " down to the previous multiple of the " },
                        { "is_code": true, "text": "divisor" },
                        { "text": "." }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "random",
                "exported_from": "core/utils.toit",
                "return_type": "any"
              },
              {
                "function_name": "random",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "n",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "random",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "start",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "end",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "time",
                "exported_from": "core/utils.toit",
                "return_type": "any"
              },
              {
                "function_name": "with_timeout",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "timeout",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Duration",
                    "path": "core/time.toit"
                  },
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "with_timeout",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "ms",
                    "is_block": false,
                    "is_named": true,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "deep_sleep",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "duration",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Duration",
                    "path": "core/time.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "deep_sleep",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "ms",
                    "is_block": false,
                    "is_named": true,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "host_word_size",
                "exported_from": "core/utils.toit",
                "return_type": "any"
              },
              {
                "function_name": "exit",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "status",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "log_execution_time",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  },
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "iterations",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "launch_snapshot",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "snapshot",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "pass_arguments",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "create_off_heap_byte_array",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "size",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "concat_strings",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "array_of_strings",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "add_finalizer",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "object",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "lambda",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "remove_finalizer",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "object",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "platform",
                "exported_from": "core/utils.toit",
                "return_type": "any"
              },
              {
                "function_name": "process_ids",
                "exported_from": "core/utils.toit",
                "return_type": "any"
              },
              {
                "function_name": "process_stats",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "group",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "id",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "gc_count",
                "exported_from": "core/utils.toit",
                "return_type": "int",
                "return_path": "core/numbers.toit"
              },
              {
                "function_name": "vm_sdk_version",
                "exported_from": "core/utils.toit",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "vm_sdk_info",
                "exported_from": "core/utils.toit",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "vm_sdk_model",
                "exported_from": "core/utils.toit",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "app_sdk_version",
                "exported_from": "core/utils.toit",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "app_sdk_info",
                "exported_from": "core/utils.toit",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "set_max_heap_size",
                "exported_from": "core/utils.toit",
                "parameters": [
                  {
                    "param_name": "bytes",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              }
            ],
            "export_globals": [
              {
                "global_name": "CANCELED_ERROR",
                "exported_from": "core/exceptions.toit"
              },
              {
                "global_name": "DEADLINE_EXCEEDED_ERROR",
                "exported_from": "core/exceptions.toit"
              },
              {
                "global_name": "SYSTEM_PUB_SUB",
                "exported_from": "core/message.toit"
              },
              {
                "global_name": "SYSTEM_READ_BLOB",
                "exported_from": "core/message.toit"
              },
              {
                "global_name": "SYSTEM_RPC_CALL",
                "exported_from": "core/message.toit"
              },
              {
                "global_name": "SYSTEM_RPC_RETURN",
                "exported_from": "core/message.toit"
              },
              {
                "global_name": "SYSTEM_PUB_SUB_TO_SYS",
                "exported_from": "core/message.toit"
              },
              { "global_name": "STARTING", "exported_from": "core/task.toit" },
              { "global_name": "RUNNING", "exported_from": "core/task.toit" },
              {
                "global_name": "TERMINATING",
                "exported_from": "core/task.toit"
              },
              { "global_name": "EXITING", "exported_from": "core/task.toit" },
              { "global_name": "DEAD", "exported_from": "core/task.toit" },
              {
                "global_name": "NANOSECONDS_PER_MICROSECOND",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "NANOSECONDS_PER_MILLISECOND",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "NANOSECONDS_PER_SECOND",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "NANOSECONDS_PER_MINUTE",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "NANOSECONDS_PER_HOUR",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "DAYS_BEFORE",
                "exported_from": "core/time.toit"
              },
              { "global_name": "MARCH", "exported_from": "core/time.toit" },
              {
                "global_name": "ABSOLUTE_ZERO_YEAR",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "INTERNAL_YEAR",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "ABSOLUTE_TO_INTERNAL",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "INTERNAL_TO_ABSOLUTE",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "EPOCH_TO_INTERNAL",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "INTERNAL_TO_EPOCH",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "WALL_TO_INTERNAL",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "INTERNAL_TO_WALL",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "ABSOLUTE_TO_EPOCH",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "SECONDS_PER_MINUTE",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "SECONDS_PER_HOUR",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "SECONDS_PER_DAY",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "SECONDS_PER_WEEK",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "DAYS_PER_400_YEARS",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "DAYS_PER_100_YEARS",
                "exported_from": "core/time.toit"
              },
              {
                "global_name": "DAYS_PER_4_YEARS",
                "exported_from": "core/time.toit"
              }
            ]
          },
          "module": "core.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Collection",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              { "text": " on each element of this instance." }
                            ],
                            [
                              {
                                "text": "Users must not modify the collection while iterating over it."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Needs to be implemented by all subclasses."
                              }
                            ],
                            [{ "text": "This function should never throw." }],
                            [
                              {
                                "text": "This function does *not* need to protect itself against modifications of this instance during the iteration. Subclasses are, however, encouraged to do so if they can do it cheaply (especially in debug-mode)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n[1, 2].do: debug it  // Prints 1, 2\n"
                            }
                          ]
                        },
                        {
                          "title": "Categories",
                          "statements": [
                            [{ "itemized": [[{ "text": "Iteration" }]] }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "size",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "The number of elements in this instance."
                              }
                            ],
                            [
                              {
                                "text": "This operation can be assumed to be in O(1)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "This method must be implemented by subclasses."
                              }
                            ],
                            [
                              {
                                "text": "If the operation is not in O(1) consider not implementing the "
                              },
                              {
                                "text": "Collection",
                                "path": "core/collections.toit"
                              },
                              {
                                "text": " interface. Exceptional cases, where all users are clearly aware of this restriction, are permitted."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Collection",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Whether this instance is equal to " },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Equality only returns true when both operands are of the same type."
                              }
                            ],
                            [
                              {
                                "text": "Returns false, if this instance and "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " are not of the same " },
                              {
                                "text": "size",
                                "path": "core/collections.toit/Collection"
                              },
                              {
                                "text": ", or if the contained elements are not equal themselves. Unless otherwise specified or configured, uses the default "
                              },
                              { "is_code": true, "text": "==" },
                              { "text": " operator for comparison." }
                            ],
                            [
                              {
                                "text": "Subclasses may decide not to support deep equality."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to compare self-recursive data-structures."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Collections do *not* need to ensure that recursive data structures don't lead to infinite loops."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "is_empty",
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Whether this instance is empty." }]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Subclasses should overwrite this method if the "
                              },
                              {
                                "text": "size",
                                "path": "core/collections.toit/Collection"
                              },
                              {
                                "text": " getter is not constant and the subclass has a more efficient way of determining whether this instance is empty."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "every",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether every element in the collection satisfies the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns true, if the collection is empty."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "any",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether any element in the collection satisfies the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns false, if the collection is empty."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "contains",
                      "parameters": [
                        {
                          "param_name": "element",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance contains the given "
                              },
                              { "is_code": true, "text": "element" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Takes all elements and combines them using "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "It's an error if this instance does not have at least one element."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "initial",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Takes all elements and combines them using "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns the " },
                              { "is_code": true, "text": "initial" },
                              { "text": " value if this instance is empty." }
                            ],
                            [
                              {
                                "text": "If this instance contains at least one element calls "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": " first with the " },
                              { "is_code": true, "text": "initial" },
                              { "text": " value and the first element." }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [
                { "statements": [[{ "text": "A collection of elements." }]] }
              ]
            },
            {
              "class_name": "CollectionBase",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "size",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Collection",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "is_empty",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "every",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "any",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "contains",
                      "parameters": [
                        {
                          "param_name": "element",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "initial",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "List",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "from_subclass",
                    "return_type": "List",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "from",
                    "parameters": [
                      {
                        "param_name": "collection",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Collection",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "List",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a List, containing all elements of the given "
                            },
                            { "is_code": true, "text": "collection" }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "factories": [
                  {
                    "function_name": "constructor",
                    "return_type": "List",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [{ "text": "Creates an empty list." }],
                          [
                            {
                              "text": "This operation is identical to creating a list with a list-literal: "
                            },
                            { "is_code": true, "text": "[]" },
                            { "text": "." }
                          ]
                        ]
                      }
                    ]
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "filler",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "List",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Creates a new List of the given " },
                            { "is_code": true, "text": "size" },
                            {
                              "text": " where every slot is filled with the given "
                            },
                            { "is_code": true, "text": "filler" },
                            { "text": "." }
                          ]
                        ]
                      }
                    ]
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "block",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "List",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a List and initializes each element with the result of invoking the block."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "resize",
                      "parameters": [
                        {
                          "param_name": "new_size",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Changes the size of this list to the given "
                              },
                              { "is_code": true, "text": "new_size" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If the list grows as a result of this operation, then the elements are filled with null."
                              }
                            ],
                            [
                              {
                                "text": "If the list shrinks as a result of this operation, then these elements are dropped."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the element in the slot of the given [index]."
                              }
                            ],
                            [
                              {
                                "text": "// TODO(florian): document whether it's ok to index with -1 etc."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]=",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Stores the given [value] in the slot of the given [index]."
                              }
                            ],
                            [
                              {
                                "text": "// TODO(florian): document whether it's ok to index with -1 etc."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Creates a copy of a slice of this list."
                              }
                            ],
                            [
                              {
                                "text": "The returned object generally has the same type is this instance. Some subclasses may decide to return an object of different type, if the new size allows a more efficient class to be used."
                              }
                            ],
                            [
                              { "text": "The arguments " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              { "text": " must satisfy: " },
                              {
                                "is_code": true,
                                "text": "0 <= from <= to <= size"
                              },
                              { "text": "." }
                            ]
                          ]
                        },
                        {
                          "title": "Aliases",
                          "statements": [
                            [
                              {
                                "itemized": [
                                  [
                                    { "is_code": true, "text": "slice" },
                                    { "text": ": JavaScript." }
                                  ],
                                  [
                                    { "is_code": true, "text": "sublist" },
                                    { "text": ": Dart, Java," }
                                  ]
                                ]
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "This method should be implemented by each subclass of "
                              },
                              { "is_code": true, "text": "List" },
                              {
                                "text": ", as the type of the returned object should match the one of this instance. As exception, classes that have multiple implementations (such as "
                              },
                              { "is_code": true, "text": "SmallArray" },
                              { "text": " and " },
                              { "is_code": true, "text": "LargeArray" },
                              {
                                "text": ") may switch type, *especially* if the individual types are not visible to the users."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "copy",
                      "return_type": "List",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "source",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Replaces this[index..index+(source.size)[ with "
                              },
                              { "is_code": true, "text": "source" },
                              { "text": "[0..source.size[." }
                            ]
                          ]
                        },
                        {
                          "title": "Note",
                          "statements": [
                            [
                              {
                                "text": "We use forwarding instead of default values here because in subclasses the 5-argument version is a primitive method, that can't have default arguments."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "source",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Replaces this[index..index+(to-from)[ with source[from..to["
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds the given " },
                              { "is_code": true, "text": "value" },
                              { "text": " to the list." }
                            ],
                            [
                              {
                                "text": "This operation increases the size of this instance."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to call this method on lists that can't grow."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add_all",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Collection",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds all elements of the given " },
                              { "is_code": true, "text": "collection" },
                              { "text": " to the list." }
                            ],
                            [
                              {
                                "text": "This operation increases the size of this instance."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to call this method on lists that can't grow."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove_last",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes the last element of this instance."
                              }
                            ],
                            [{ "text": "Returns the removed element." }],
                            [
                              {
                                "text": "It is an error to call this method on lists that can't change size."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to call this method on empty lists."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes the first entry that is equal to the given "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Does nothing if the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is not in this instance." }
                            ],
                            [
                              { "text": "This operation is in " },
                              { "is_code": true, "text": "O(n)" },
                              { "text": " and thus not efficient." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "all",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes all entries that are equal to the given "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Does nothing if the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is not in this instance." }
                            ],
                            [
                              { "text": "This operation is in " },
                              { "is_code": true, "text": "O(n)" },
                              { "text": " and thus not efficient." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "last",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes the last entry that is equal to the given "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Does nothing if the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is not in this instance." }
                            ],
                            [
                              { "text": "This operation is in " },
                              { "is_code": true, "text": "O(n)" },
                              { "text": " and thus not efficient." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "clear",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Clears this list, setting the size to 0."
                              }
                            ],
                            [
                              {
                                "text": "It is an error to call this method on lists that can't change size."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Concatenates this list with the " },
                              { "is_code": true, "text": "other" },
                              { "text": " list." }
                            ],
                            [
                              { "text": "Returns a new " },
                              {
                                "text": "List",
                                "path": "core/collections.toit"
                              },
                              { "text": " object." }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Subclasses may return a subclass of "
                              },
                              {
                                "text": "List",
                                "path": "core/collections.toit"
                              },
                              {
                                "text": ", but should mention this in the documentation or in the return-type."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "equals",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "element_equals",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Whether this instance is equal to " },
                              { "is_code": true, "text": "other" },
                              { "text": ", using " },
                              { "is_code": true, "text": "element_equals" },
                              { "text": " to compare the elements." }
                            ],
                            [
                              {
                                "text": "Equality only returns true when both operands are of the same type."
                              }
                            ],
                            [
                              {
                                "text": "Returns false, if this instance and "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " are not of the same " },
                              {
                                "text": "size",
                                "path": "core/collections.toit/CollectionBase"
                              },
                              {
                                "text": ", or if the contained elements are not equal themselves (using "
                              },
                              { "is_code": true, "text": "element_equals" },
                              { "text": ")." }
                            ],
                            [
                              {
                                "text": "It is an error to compare self-recursive data-structures, if the "
                              },
                              { "is_code": true, "text": "element_equals" },
                              {
                                "text": " block is not ensuring that the comparison leads to infinite loops."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Inheritance",
                          "statements": [
                            [
                              {
                                "text": "Collections do *not* need to ensure that recursive data structures don't lead to infinite loops."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/CollectionBase"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/CollectionBase"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "reversed",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Iterates over all elements in reverse order and invokes the given "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": " on each of them." }
                            ],
                            [
                              { "text": "The argument " },
                              { "is_code": true, "text": "reversed" },
                              { "text": " must be true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "first",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "The first element of the list." }],
                            [{ "text": "It is an error if the list is empty." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "last",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "The last element of the list." }],
                            [{ "text": "It is an error if the list is empty." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each element and returns a new list with the results."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each element and stores the result in this list if "
                              },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is true." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false, then this function is equivalent to "
                              },
                              {
                                "text": "map [block]",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "filter",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Filters this instance using the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns a new list if " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false. Returns this instance otherwise."
                              }
                            ],
                            [
                              {
                                "text": "The result contains all the elements of this instance for which the "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": " returns true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "fill",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Fills " },
                              { "is_code": true, "text": "value" },
                              { "text": " into list elements [" },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": "[." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "fill",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Fills values, computed by evaluating "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": ", into list elements [" },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": "[." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "print_string",
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              { "text": "super", "path": "core/objects.toit" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "join",
                      "parameters": [
                        {
                          "param_name": "separator",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    {
                      "function_name": "sort",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "compare",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Sorts the range [" },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": "[ using the given " },
                              { "is_code": true, "text": "compare" },
                              {
                                "text": " block. The sort is stable, meaning that equal elements do not change their relative order."
                              }
                            ],
                            [
                              { "text": "Returns a new list if " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false. Returns this instance otherwise."
                              }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "compare" },
                              { "text": " block should take two arguments " },
                              { "is_code": true, "text": "a" },
                              { "text": " and " },
                              { "is_code": true, "text": "b" },
                              { "text": " and should return:" }
                            ],
                            [
                              {
                                "itemized": [
                                  [
                                    { "text": "-1 if " },
                                    { "is_code": true, "text": "a < b" },
                                    { "text": "," }
                                  ],
                                  [
                                    { "text": "0 if " },
                                    { "is_code": true, "text": "a == b" },
                                    { "text": ", and" }
                                  ],
                                  [
                                    { "text": "1 if " },
                                    { "is_code": true, "text": "a > b" },
                                    { "text": "." }
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "sort",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Sorts the range [" },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              {
                                "text": "[ using the the < and > operators. The sort is stable, meaning that equal elements do not change their relative order."
                              }
                            ],
                            [
                              { "text": "Returns a new list if " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false. Returns this instance otherwise."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "is_sorted",
                      "parameters": [
                        {
                          "param_name": "compare",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "is_sorted", "return_type": "any" },
                    {
                      "function_name": "swap",
                      "parameters": [
                        {
                          "param_name": "i",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "j",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "CollectionBase",
              "extend_path": "core/collections.toit"
            },
            {
              "class_name": "Array",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "from",
                    "parameters": [
                      {
                        "param_name": "collection",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Collection",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Array",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "from_subclass",
                    "return_type": "Array",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "ensure",
                    "parameters": [
                      {
                        "param_name": "collection",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Collection",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Array",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Returns the given " },
                            { "is_code": true, "text": "collection" },
                            { "text": " as an " },
                            {
                              "text": "Array",
                              "path": "core/collections.toit"
                            },
                            { "text": "." }
                          ],
                          [
                            {
                              "text": "If it is already one, returns the input."
                            }
                          ],
                          [
                            { "text": "Otherwise copies the content of the " },
                            { "is_code": true, "text": "collection" },
                            { "text": " into a freshly allocated " },
                            {
                              "text": "Array",
                              "path": "core/collections.toit"
                            },
                            { "text": "." }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "factories": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "filler",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Array",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "block",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "Array",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates an array and initializes each element with the result of invoking the block."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              {
                                "text": ". This is an optimized implementation."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "resize",
                      "parameters": [
                        {
                          "param_name": "new_size",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Array",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "return_type": "Array",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Array",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Array",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              },
              "extends": "List",
              "extend_path": "core/collections.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [{ "text": "A non-growable list." }],
                    [
                      {
                        "text": "This class is the most efficient way of storing elements, but requires the user to know the size of the list in advance."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "ByteArray",
              "class_structure": {
                "factories": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "ByteArray",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a new byte array of the given "
                            },
                            { "is_code": true, "text": "size" },
                            { "text": "." }
                          ],
                          [{ "text": "All elements are initialized to 0." }]
                        ]
                      }
                    ]
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "initializer",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "ByteArray",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a new byte array of the given "
                            },
                            { "is_code": true, "text": "size" },
                            {
                              "text": " and initializes the elements using the provided "
                            },
                            { "is_code": true, "text": "initializer" },
                            { "text": "." }
                          ],
                          [
                            { "text": "The " },
                            { "is_code": true, "text": "initializer" },
                            {
                              "text": " is invoked for each element, receiving the index as argument."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "size",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/CollectionBase"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "resize",
                      "parameters": [
                        {
                          "param_name": "new_size",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]=",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "to_string",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    {
                      "function_name": "to_float",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "big_endian",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "to_string_non_throwing",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Converts the UTF-8 byte array to a string. If we encounter invalid UTF-8 we replace sequences of invalid bytes with a Unicode replacement character, "
                              },
                              { "is_code": true, "text": "\\uFFFD" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "is_valid_string_content",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Byte arrays always return a new Byte array as a result of concatenating."
                              }
                            ],
                            [
                              { "text": "Users can write " },
                              {
                                "is_code": true,
                                "text": "[] + byte_array + other"
                              },
                              {
                                "text": " if the result should be a normal list."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "source",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "super",
                                "path": "core/collections.toit/List"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              },
              "extends": "List",
              "extend_path": "core/collections.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [{ "text": "A list specialized for bytes." }],
                    [
                      {
                        "text": "A byte array can only contain (non-null) integers in the range 0-255."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "Set",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes the given " },
                              { "is_code": true, "text": "key" },
                              { "text": " from this instance." }
                            ],
                            [
                              { "text": "If the key is absent, calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds the given " },
                              { "is_code": true, "text": "key" },
                              { "text": " to this instance." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add_all",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Collection",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds all elements of the given " },
                              { "is_code": true, "text": "collection" },
                              { "text": " to this instance." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.do",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Set",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.==",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "every",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.every",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "any",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.any",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.reduce [block]",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "reduce",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "initial",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              {
                                "text": "Collection.reduce --initial [block]",
                                "path": "core/collections.toit/Collection"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "Set",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each element and returns a new set with the results."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "filter",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Set",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Filters this instance using the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns a new set if " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is false (the default)." }
                            ],
                            [
                              { "text": "Returns this instance if " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is true." }
                            ],
                            [
                              {
                                "text": "The result contains all the elements of this instance for which the "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": " returns true." }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance during the operation."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "intersect",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Set",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Set",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Intersects this instance with the " },
                              { "is_code": true, "text": "other" },
                              { "text": " set." }
                            ],
                            [
                              {
                                "text": "The result contains all elements that are both in this instance, as well as in the "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " set." }
                            ],
                            [
                              { "text": "Returns a new set if " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is false (the default)." }
                            ],
                            [
                              { "text": "Returns this instance, if " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " is true." }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              },
              "class_toitdoc": [
                { "statements": [[{ "text": "A set of keys." }]] }
              ]
            },
            {
              "class_name": "IdentitySet",
              "class_structure": {},
              "extends": "Set",
              "extend_path": "core/collections.toit"
            },
            {
              "class_name": "Map",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "Map",
                    "return_path": "core/collections.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "size",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "get_key",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      },
                      {
                        "param_name": "get_value",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "Map",
                    "return_path": "core/collections.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Constructs a Map with a given " },
                            { "is_code": true, "text": "size" },
                            { "text": "." }
                          ],
                          [
                            {
                              "text": "For each key-value pair, first the block "
                            },
                            { "is_code": true, "text": "get_key" },
                            { "text": " and then the block " },
                            { "is_code": true, "text": "get_value" },
                            { "text": " are called." }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "remove",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes the given " },
                              { "is_code": true, "text": "key" },
                              { "text": " from this instance." }
                            ],
                            [
                              { "text": "If the key is absent, calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the element stored at location "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "key" },
                              { "text": " must be in the map." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]=",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Stores " },
                              { "is_code": true, "text": "value" },
                              { "text": " in the location for the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If the " },
                              { "is_code": true, "text": "key" },
                              {
                                "text": " is already present, overrides the previous value."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns the value verbatim, if the " },
                              { "is_code": true, "text": "key" },
                              { "text": " is contained in the map." }
                            ],
                            [{ "text": "Returns null, otherwise." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns the value verbatim, if this instance contains the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Otherwise, calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              { "text": " and returns the result of the call." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_present",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If this instance contains the " },
                              { "is_code": true, "text": "key" },
                              { "text": " calls " },
                              { "is_code": true, "text": "if_present" },
                              {
                                "text": " with the corresponding value and returns the result."
                              }
                            ],
                            [{ "text": "Returns null otherwise." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        },
                        {
                          "param_name": "if_present",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If this instance contains the " },
                              { "is_code": true, "text": "key" },
                              { "text": " calls " },
                              { "is_code": true, "text": "if_present" },
                              {
                                "text": " with the corresponding value and returns the result."
                              }
                            ],
                            [
                              { "text": "Otherwise, calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              { "text": " and returns the result of the call." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "init",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Retrieves the value for " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns the value verbatim, if this instance contains the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Otherwise, initializes the slot with the result of calling [init] first."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value, and replaces the old value with the result."
                              }
                            ],
                            [
                              { "text": "Returns the result of calling the " },
                              { "is_code": true, "text": "updater" },
                              { "text": "." }
                            ],
                            [
                              { "text": "This instance must contain the " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If this instance contains the " },
                              { "is_code": true, "text": "key" },
                              { "text": ", calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value, and replaces the old value with the result. Returns the result of the call."
                              }
                            ],
                            [
                              {
                                "text": "If this instance does not contain the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": ", calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              {
                                "text": " instead, and stores the result of the call in this instance. Returns the result of the call."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If this instance contains the " },
                              { "is_code": true, "text": "key" },
                              { "text": ", calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value, and replaces the old value with the result. Returns the result of the call."
                              }
                            ],
                            [
                              {
                                "text": "If this instance does not contain the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": ", stores " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " in this instance. Returns " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "init",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If this instance does not contain the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": ", calls " },
                              { "is_code": true, "text": "init" },
                              { "text": " with the " },
                              { "is_code": true, "text": "key" },
                              {
                                "text": " first, and stores it in this instance."
                              }
                            ],
                            [
                              { "text": "Calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value (which might be the initial value that was just stored) and replaces the old value with the result."
                              }
                            ],
                            [
                              {
                                "text": "Returns the result of the call to the "
                              },
                              { "is_code": true, "text": "updater" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "update",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "updater",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "init",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Updates the value of the given " },
                              { "is_code": true, "text": "key" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If this instance does not contain the "
                              },
                              { "is_code": true, "text": "key" },
                              { "text": ", stores " },
                              { "is_code": true, "text": "init" },
                              { "text": " in this instance." }
                            ],
                            [
                              { "text": "Calls the " },
                              { "is_code": true, "text": "updater" },
                              {
                                "text": " with the current value (which might be the initial value that was just stored) and replaces the old value with the result."
                              }
                            ],
                            [
                              {
                                "text": "Returns the result of the call to the "
                              },
                              { "is_code": true, "text": "updater" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each key/value pair of this instance."
                              }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance while iterating over it."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "keys",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              { "text": " on each key of this instance." }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance while iterating over it."
                              }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "keys" },
                              { "text": " must be true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "values",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              { "text": " on each value of this instance." }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance while iterating over it."
                              }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "values" },
                              { "text": " must be true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "keys",
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the keys of this instance as a list."
                              }
                            ],
                            [
                              {
                                "text": "This operation instantiates a fresh list and is thus in O(n)."
                              }
                            ],
                            [
                              { "text": "When possible use " },
                              {
                                "text": "do --keys [block]",
                                "path": "core/collections.toit/Map"
                              },
                              { "text": " instead." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "values",
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the values of this instance as a list."
                              }
                            ],
                            [
                              {
                                "text": "This operation instantiates a fresh list and is thus in O(n)."
                              }
                            ],
                            [
                              { "text": "When possible use " },
                              {
                                "text": "do --values [block]",
                                "path": "core/collections.toit/Map"
                              },
                              { "text": " instead." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "Map",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each key/value pair and returns a new map with the results."
                              }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " is invoked with two arguments for each entry in this instance: the key and the value. The returned value becomes the new value for the key."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "map",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Maps the values of this instance." }],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "in_place" },
                              { "text": " must be true." }
                            ],
                            [
                              { "text": "Invokes the given " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " on each key/value pair and replaces the old value with the result of the call."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "filter",
                      "parameters": [
                        {
                          "param_name": "predicate",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "in_place",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Map",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Filters this instance using the given "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns a new list if " },
                              { "is_code": true, "text": "in_place" },
                              {
                                "text": " is false. Returns this instance otherwise."
                              }
                            ],
                            [
                              {
                                "text": "The result contains all the elements of this instance for which the "
                              },
                              { "is_code": true, "text": "predicate" },
                              { "text": " returns true." }
                            ],
                            [
                              {
                                "text": "Users must not modify this instance during the operation."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "IdentityMap",
              "class_structure": {},
              "extends": "Map",
              "extend_path": "core/collections.toit"
            }
          ],
          "module": "collections.toit"
        },
        {
          "top_level": {
            "module_functions": [
              { "function_name": "defines", "return_type": "any" }
            ]
          },
          "module": "entry.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "throw",
                "parameters": [
                  {
                    "param_name": "exception",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "rethrow",
                "parameters": [
                  {
                    "param_name": "exception",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "trace",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "ByteArray",
                    "path": "core/collections.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "catch",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "trace",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  },
                  {
                    "param_name": "unwind",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "trace",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  },
                  {
                    "param_name": "unwind",
                    "is_block": true,
                    "is_named": true,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "unwind",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "bool",
                    "path": "core/objects.toit"
                  },
                  {
                    "param_name": "trace",
                    "is_block": true,
                    "is_named": true,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "trace",
                    "is_block": true,
                    "is_named": true,
                    "is_required": true
                  },
                  {
                    "param_name": "unwind",
                    "is_block": true,
                    "is_named": true,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch_and_trace",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "execute",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "execute",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "fail_block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "print_trace",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch_exception",
                "parameters": [
                  {
                    "param_name": "lambda",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "catch_and_trace_exception",
                "parameters": [
                  {
                    "param_name": "lambda",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ],
            "module_globals": [
              { "global_name": "CANCELED_ERROR" },
              { "global_name": "DEADLINE_EXCEEDED_ERROR" }
            ]
          },
          "module": "exceptions.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "SystemMessageHandler",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "on_message",
                      "parameters": [
                        {
                          "param_name": "type",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "gid",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "pid",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "args",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "system_send",
                "parameters": [
                  {
                    "param_name": "type",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "args",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "set_system_message_handler",
                "parameters": [
                  {
                    "param_name": "type",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "handler",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "SystemMessageHandler",
                    "path": "core/message.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "print_for_manually_decoding",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "ByteArray",
                    "path": "core/collections.toit"
                  }
                ],
                "return_type": "none"
              }
            ],
            "module_globals": [
              { "global_name": "SYSTEM_PUB_SUB" },
              { "global_name": "SYSTEM_READ_BLOB" },
              { "global_name": "SYSTEM_RPC_CALL" },
              { "global_name": "SYSTEM_RPC_RETURN" },
              { "global_name": "SYSTEM_PUB_SUB_TO_SYS" }
            ]
          },
          "module": "message.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Number",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "to_int",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "sign",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    { "function_name": "-", "return_type": "any" },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "*",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "/",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "%",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "abs",
                      "return_type": "Number",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "to_float",
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Number",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "if_equal",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "int",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "str",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "from",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "to",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "radix",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "int",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "str",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "from",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "to",
                        "is_block": false,
                        "is_named": false,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "radix",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      },
                      {
                        "param_name": "on_error",
                        "is_block": true,
                        "is_named": true,
                        "is_required": true
                      }
                    ],
                    "return_type": "int",
                    "return_path": "core/numbers.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "-",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "~",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "&",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "|",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "^",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": ">>",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": ">>>",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "<<",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "print_string",
                      "parameters": [
                        {
                          "param_name": "base",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "to_int",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "sign",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "hash_code",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "sqrt",
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "is_power_of_two",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "is_aligned",
                      "parameters": [
                        {
                          "param_name": "n",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "repeat",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "Number",
              "extend_path": "core/numbers.toit"
            },
            {
              "class_name": "LargeInteger",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "*",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "/",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "%",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "-",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    { "function_name": "~", "return_type": "any" },
                    {
                      "function_name": "&",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "|",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "^",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">>",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">>>",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<<",
                      "parameters": [
                        {
                          "param_name": "number_of_bits",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "print_string",
                      "parameters": [
                        {
                          "param_name": "base",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "to_int",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              },
              "extends": "int",
              "extend_path": "core/numbers.toit"
            },
            {
              "class_name": "float",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "NAN",
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "INFINITY",
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "MAX_FINITE",
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "MIN_POSITIVE",
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "str",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  },
                  {
                    "function_name": "from_bits",
                    "parameters": [
                      {
                        "param_name": "raw",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "float",
                    "return_path": "core/numbers.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "sign",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Returns the sign of this instance." }],
                            [{ "text": "The sign is:" }],
                            [
                              {
                                "itemized": [
                                  [
                                    {
                                      "text": "-1 for negative numbers, and for -0.0"
                                    }
                                  ],
                                  [{ "text": "0 for 0.0" }],
                                  [{ "text": "1 for positive numbers." }]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "-",
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "*",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "/",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "%",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "sqrt",
                      "return_type": "float",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "print_string",
                      "parameters": [
                        {
                          "param_name": "precision",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    {
                      "function_name": "is_nan",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "is_finite",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "to_int",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "bits",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              },
              "extends": "Number",
              "extend_path": "core/numbers.toit"
            }
          ],
          "module": "numbers.toit"
        },
        {
          "module_classes": [
            { "class_name": "bool", "class_structure": {} },
            {
              "class_name": "Lambda",
              "class_structure": {
                "members": {
                  "methods": [
                    { "function_name": "call", "return_type": "any" },
                    {
                      "function_name": "call",
                      "parameters": [
                        {
                          "param_name": "a",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "call",
                      "parameters": [
                        {
                          "param_name": "a",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "b",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "call",
                      "parameters": [
                        {
                          "param_name": "a",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "b",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "c",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "call",
                      "parameters": [
                        {
                          "param_name": "a",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "b",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "c",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "d",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            }
          ],
          "module": "objects.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "log",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Logs the " },
                        { "is_code": true, "text": "message" },
                        { "text": "." }
                      ],
                      [
                        {
                          "text": "The resulting message is stringified using "
                        },
                        {
                          "text": "Object_.stringify",
                          "path": "core/objects.toit"
                        },
                        { "text": "." }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "log",
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Logs an empty line." }],
                      [
                        {
                          "text": "This function is generally used to improve the output of the console output, but may have no effect on other receivers of the log message."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "debug",
                "parameters": [
                  {
                    "param_name": "object",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Prints the given " },
                        { "is_code": true, "text": "object" },
                        { "text": " for debugging." }
                      ],
                      [{ "text": "Does not yield the currently running task." }]
                    ]
                  }
                ]
              },
              {
                "function_name": "debug",
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Prints an empty line." }],
                      [{ "text": "Does not yield the currently running task." }]
                    ]
                  }
                ]
              },
              { "function_name": "print_heap", "return_type": "any" },
              {
                "function_name": "object_histogram",
                "return_type": "Array",
                "return_path": "core/collections.toit"
              },
              {
                "function_name": "print_object_histogram",
                "return_type": "none"
              }
            ]
          },
          "module": "print.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "hatch",
                "parameters": [
                  {
                    "param_name": "lambda",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              { "function_name": "process_count", "return_type": "any" },
              {
                "function_name": "signal_kill",
                "parameters": [
                  {
                    "param_name": "id",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Only used by the system process, otherwise throws \"NOT ALLOWED\"."
                        }
                      ],
                      [
                        {
                          "text": "May also throw \"NOT ALLOWED\" if the process already terminated."
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "process.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "String",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "from_rune",
                    "parameters": [
                      {
                        "param_name": "rune",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "String",
                    "return_path": "core/string.toit"
                  },
                  {
                    "function_name": "format",
                    "parameters": [
                      {
                        "param_name": "format",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "object",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "String",
                    "return_path": "core/string.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Formats the " },
                            { "is_code": true, "text": "object" },
                            { "text": " according to the given " },
                            { "is_code": true, "text": "format" },
                            { "text": "." }
                          ],
                          [
                            { "text": "The " },
                            { "is_code": true, "text": "format" },
                            { "text": " description is very similar to " },
                            { "is_code": true, "text": "printf" },
                            { "text": "." }
                          ],
                          [{ "text": "Extensions relative to printf:" }],
                          [
                            {
                              "itemized": [
                                [
                                  { "is_code": true, "text": "^" },
                                  { "text": " for centering." }
                                ]
                              ]
                            }
                          ],
                          [
                            {
                              "text": "Missing relative to printf: No support for "
                            },
                            { "is_code": true, "text": "%g" },
                            { "text": " or " },
                            { "is_code": true, "text": "%p" },
                            { "text": "." }
                          ],
                          [{ "text": "Format Description:" }],
                          {
                            "is_code_section": true,
                            "text": "\n[alignment][precision][type]\nalignment = flags<digits>\nflags = '-' | '^' | '>'   (> is default, can't be used in the syntax)\nprecision = .<digits>\ntype 'd' | 'f' | 's' | 'o' | 'x' | 'c'\n"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "size",
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "The size of this instance in UTF-8 code units (byte-sized)."
                              }
                            ],
                            [
                              {
                                "text": "The string may have fewer runes (Unicode \"codepoints\") than its size."
                              }
                            ],
                            [
                              {
                                "text": "For example the string \"Amélie\" has a size of 7, but a "
                              },
                              { "is_code": true, "text": "size --runes" },
                              { "text": " of 6." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "is_empty",
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns whether this instance is the empty string ("
                              },
                              { "is_code": true, "text": "\"\"" },
                              { "text": ")" }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "size",
                      "parameters": [
                        {
                          "param_name": "runes",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the number of runes (Unicode \"codepoints\") in this string."
                              }
                            ],
                            [
                              {
                                "text": "This operation takes linear time to complete as it runs through the whole string."
                              }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "runes" },
                              { "text": " must be true." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]",
                      "parameters": [
                        {
                          "param_name": "i",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "The rune (Unicode \"codepoint\") at position "
                              },
                              { "is_code": true, "text": "i" },
                              { "text": " of the underlying bytes." }
                            ],
                            [
                              { "text": "Returns null if " },
                              { "is_code": true, "text": "i" },
                              {
                                "text": " points into the middle of a multi-byte sequence."
                              }
                            ],
                            [
                              { "text": "It is an error if " },
                              { "is_code": true, "text": "i" },
                              { "text": " is not in range 0 (inclusive) to " },
                              {
                                "text": "size",
                                "path": "core/string.toit/String"
                              },
                              { "text": " (exclusive)." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"Amélie\"\ndebug \"$(%c str[2])\" // => é\ndebug str[3]         // => null\ndebug \"$(%c str[4])\" // => l\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "at",
                      "parameters": [
                        {
                          "param_name": "i",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "raw",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "The raw byte (Unicode codeunit) at position "
                              },
                              { "is_code": true, "text": "i" },
                              {
                                "text": " in the UTF-8 byte representation of this string."
                              }
                            ],
                            [
                              { "text": "Contrary to " },
                              {
                                "text": "at",
                                "path": "core/string.toit/String"
                              },
                              { "text": " this method never returns null." }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "raw" },
                              { "text": " must be true" }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Iterates over all slots in the string (as if using "
                              },
                              {
                                "text": "at",
                                "path": "core/string.toit/String"
                              },
                              { "text": ") and calls the given " },
                              { "is_code": true, "text": "block" },
                              { "text": " with the values." }
                            ],
                            [
                              {
                                "text": "For every multi-byte sequences in the string, the "
                              },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " is invoked first with the rune (Unicode \"codepoint\"), then with null for each remaining codeunit of the sequence."
                              }
                            ],
                            [{ "text": "This function is equivalent to:" }],
                            {
                              "is_code_section": true,
                              "text": "\nsize.repeat: block.call this[it]\n"
                            }
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"é\".do: debug it // 233, null\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "do",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "runes",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Iterates over all runes (Unicode \"codepoint\") and calls the given "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": " with the values." }
                            ],
                            [
                              { "text": "Contrary to " },
                              {
                                "text": "do",
                                "path": "core/string.toit/String"
                              },
                              { "text": ", only invokes " },
                              { "is_code": true, "text": "block" },
                              {
                                "text": " with valid integer values. For every multi-byte sequences there is only one call to "
                              },
                              { "is_code": true, "text": "block" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "runes" },
                              { "text": " must be true." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"Amélie\".do --runes: debug \"$(%c it)\"\" // A, m, é, l, i, e\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Copies the string between " },
                              { "is_code": true, "text": "from" },
                              { "text": " (inclusive) and " },
                              { "is_code": true, "text": "to" },
                              { "text": " (exclusive)." }
                            ],
                            [
                              {
                                "text": "The given substring must be legal. That is, neither "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": " nor " },
                              { "is_code": true, "text": "to" },
                              {
                                "text": " can point into the middle of a multi-byte sequence."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "copy",
                      "parameters": [
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "force_valid",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Copies the string between " },
                              { "is_code": true, "text": "from" },
                              { "text": " (inclusive) and " },
                              { "is_code": true, "text": "to" },
                              { "text": " (exclusive)." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "force_valid" },
                              { "text": " is true, adjusts " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              {
                                "text": " so that they are valid substring indixes. If "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": " (resp. " },
                              { "is_code": true, "text": "to" },
                              {
                                "text": ") points to the middle of a multi-byte sequence decreases the index until it points to the beginning of the sequence. Also see "
                              },
                              {
                                "text": "rune_index",
                                "path": "core/string.toit/String"
                              },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "rune_index",
                      "parameters": [
                        {
                          "param_name": "index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the index of the rune pointed to by "
                              },
                              { "is_code": true, "text": "index" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Returns " },
                              { "is_code": true, "text": "index" },
                              { "text": " if it is equal to the size." }
                            ],
                            [
                              { "text": "Returns " },
                              { "is_code": true, "text": "index" },
                              {
                                "text": " if it points to the beginning of a rune."
                              }
                            ],
                            [
                              { "text": "Otherwise decreases " },
                              { "is_code": true, "text": "index" },
                              {
                                "text": " until it points to the beginning of the multi-byte sequence."
                              }
                            ],
                            [
                              { "text": "The parameter " },
                              { "is_code": true, "text": "index" },
                              { "text": " must satisfy: " },
                              { "is_code": true, "text": "0 <= index <= size" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "hash_code",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "The hash code for this instance." }],
                            [
                              { "text": "This operation is in " },
                              { "is_code": true, "text": "O(1)" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Concatenates this instance with the given "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " string." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "*",
                      "parameters": [
                        {
                          "param_name": "amount",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Concatenates " },
                              { "is_code": true, "text": "amount" },
                              { "text": " copies of this instance." }
                            ],
                            [
                              { "text": "The parameter " },
                              { "is_code": true, "text": "amount" },
                              { "text": " must be >= 0." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "See " },
                              { "text": "super", "path": "core/objects.toit" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Whether this instance is less than " },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Uses " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " to determine the ordering of the two strings."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance is less or equal to "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Uses " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " to determine the ordering of the two strings."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance is greater than "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Uses " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " to determine the ordering of the two strings."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance is greater or equal to "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Uses " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " to determine the ordering of the two strings."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Compares the two given strings." }],
                            [
                              {
                                "text": "Returns 1 if this instance is greater than "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns 0 if this instance is equal to "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns -1 if this instance is less than "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "The comparison is done based on Unicode values. That is, string A is considered less than string B, if a leading prefix (potentially empty) is the same, and string A has a Unicode value (rune/code unit) less than string B at the following position."
                              }
                            ],
                            [
                              {
                                "text": "If string A is a prefix of string B, then A is less than B."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Errors",
                          "statements": [
                            [
                              {
                                "text": "Since natural languages often have different requirements for sorting, it is not sufficient to use this method for natural language sorting (also known as \"collation\")."
                              }
                            ],
                            [
                              {
                                "text": "For example, this method considers \"Amélie\" as greater than \"Amzlie\". In French, accented characters should be ordered similar to non-accented characters. This ordering would thus be wrong."
                              }
                            ],
                            [
                              {
                                "text": "Similarly, in Spanish, words containing \"ñ\" would not be sorted correctly. The \"ñ\" is collated between \"n\" and \"o\" (contrary to Unicode's position after all ASCII characters)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"a\".compare_to \"b\"    // => -1\n\"a\".compare_to \"a\"    // => 0\n\"b\".compare_to \"a\"    // => 1\n\"ab\".compare_to \"abc\" // => -1\n\"abc\".compare_to \"ab\" // => 1\n\"Amélie\".compare_to \"Amelie\"  // => 1\n\"Amélie\".compare_to \"Amzlie\"  // => 1\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "compare_to",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "if_equal",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Compares this instance with " },
                              { "is_code": true, "text": "other" },
                              { "text": " and calls " },
                              { "is_code": true, "text": "if_equal" },
                              { "text": " if the two are equal." }
                            ],
                            [
                              { "text": "See " },
                              {
                                "text": "compare_to",
                                "path": "core/string.toit/String"
                              },
                              { "text": " for documentation on the ordering." }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "if_equal" },
                              {
                                "text": " block is called only if this instance and "
                              },
                              { "is_code": true, "text": "other" },
                              { "text": " are equal." }
                            ],
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "if_equal" },
                              {
                                "text": " block should return -1, 0, or 1 (since it becomes the result of the call to this method)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            [
                              { "text": "The " },
                              { "is_code": true, "text": "if_equal" },
                              { "text": " block allows easy chaining of " },
                              { "is_code": true, "text": "compare_to" },
                              { "text": " calls." }
                            ],
                            {
                              "is_code_section": true,
                              "text": "\n// In class A with fields str_field1 and str_field2:\ncompare_to other/A -> int:\n  return str_field1.compare_to other.str_field1 --if_equal=:\n    str_field2.compare_to other.str_field2\n"
                            }
                          ]
                        }
                      ]
                    },
                    { "function_name": "stringify", "return_type": "any" },
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "pad",
                      "parameters": [
                        {
                          "param_name": "amount",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "char",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "left",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Pads this instance with char on the left, until the total size of the string is "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns this instance directly if this instance is longer than "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "left" },
                              { "text": " must be true." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"foo\"\nstr.pad --left 5     // => \"  foo\"\nstr.pad --left 5 '0' // => \"00foo\"\n\nstr.pad --left 3     // => \"foo\"\nstr.pad --left 1     // => \"foo\"\n\nstr.pad 5     // => \"  foo\"\nstr.pad 5 '0' // => \"00foo\"\n\nstr.pad 3     // => \"foo\"\nstr.pad 1     // => \"foo\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "pad",
                      "parameters": [
                        {
                          "param_name": "amount",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "char",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "right",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Pads this instance with " },
                              { "is_code": true, "text": "char" },
                              {
                                "text": " on the right, until the total size of the string is "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns this instance directly if this instance is longer than "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [{ "text": "The flag [right] must be true." }]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"foo\"\nstr.pad --right 5     // => \"foo  \"\nstr.pad --right 5 '0' // => \"foo00\"\n\nstr.pad --right 3     // => \"foo\"\nstr.pad --right 1     // => \"foo\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "pad",
                      "parameters": [
                        {
                          "param_name": "amount",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "char",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "center",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Pads this instance with " },
                              { "is_code": true, "text": "char" },
                              {
                                "text": " on the left and right, until the total size of the string is "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns a string where this instance is centered. If the padding can't be divided evenly, adds more padding to the right."
                              }
                            ],
                            [
                              {
                                "text": "Returns this instance directly if this instance is longer than "
                              },
                              { "is_code": true, "text": "amount" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The flag " },
                              { "is_code": true, "text": "center" },
                              { "text": " must be true." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"foo\"\nstr.pad --center 5     // => \" foo \"\nstr.pad --center 5 '0' // => \"0foo0\"\n\nstr.pad --center 6     // => \" foo  \"\nstr.pad --center 6 '0' // => \"0foo00\"\n\nstr.pad --center 3     // => \"foo\"\nstr.pad --center 1     // => \"foo\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "starts_with",
                      "parameters": [
                        {
                          "param_name": "prefix",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance starts with the given "
                              },
                              { "is_code": true, "text": "prefix" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "ends_with",
                      "parameters": [
                        {
                          "param_name": "suffix",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance ends with the given "
                              },
                              { "is_code": true, "text": "suffix" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "matches",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "at",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Whether this instance has an occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " at index " },
                              { "is_code": true, "text": "at" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The index " },
                              { "is_code": true, "text": "at" },
                              { "text": " does not need to be valid." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"Toad the Wet Sprocket\".matches \"Toad\"     --at=0   // => true\n\"Toad the Wet Sprocket\".matches \"Toad\"     --at=-1  // => false\n\"Toad the Wet Sprocket\".matches \"Sprocket\" --at=13  // => true\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "glob",
                      "parameters": [
                        {
                          "param_name": "pattern",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "position_",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "index_of",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "last",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Searches for " },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the range " },
                              { "is_code": true, "text": "from" },
                              { "text": " (inclusive) - " },
                              { "is_code": true, "text": "to" },
                              { "text": " (exclusive)." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "last" },
                              {
                                "text": " is false (the default) returns the first occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the given range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "last" },
                              {
                                "text": " is true returns the last occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the given range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": ", by searching backward. The " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " must be entirely contained within the range."
                              }
                            ],
                            [
                              { "text": "The optional parameters " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              { "text": " delimit the range in which the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is searched in. The " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " must be fully contained in the range "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              {
                                "text": " (as if taking a [copy] with these parameters) to find the "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": " does not need to be valid." }
                            ],
                            [
                              {
                                "itemized": [
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " < " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " returns -1. Considers the " },
                                    { "is_code": true, "text": "needle" },
                                    {
                                      "text": " as not found (even if it's the empty string)."
                                    }
                                  ],
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " < 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " > " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": ", adjusts " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " to 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " to " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": "." }
                                  ]
                                ]
                              }
                            ],
                            [
                              { "text": "Returns -1 if " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is not found." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"foobar\".index_of \"foo\"  // => 0\n\"foobar\".index_of \"bar\"  // => 3\n\"foo\".index_of \"bar\"     // => -1\n\n\"foobarfoo\".index_of \"foo\"           // => 0\n\"foobarfoo\".index_of \"foo\" 1         // => 6\n\"foobarfoo\".index_of \"foo\" 1 8       // => -1\n\n// Invalid ranges:\n\"foobarfoo\".index_of \"foo\" -1 999    // => 0\n\"foobarfoo\".index_of \"foo\" 1 999     // => 6\n\n\"\".index_of \"\" 0 0   // => 0\n\"\".index_of \"\" -3 -3 // => -1\n\"\".index_of \"\" 2 2   // => -1\n\n// Last:\n\"foobarfoo\".index_of --last \"foo\"           // => 6\n\"foobarfoo\".index_of --last \"foo\" 1         // => 6\n\"foobarfoo\".index_of --last \"foo\" 1 6       // => 0\n\"foobarfoo\".index_of --last \"foo\" 0 1       // => 0\n\"foobarfoo\".index_of --last \"foo\" 0 8       // => 0\n\n\"foobarfoo\".index_of --last \"gee\"           // => -1\n\"foobarfoo\".index_of --last \"foo\" 1 5       // => -1\n\"foobarfoo\".index_of --last \"foo\" 0 8       // => 0\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "index_of",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "last",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Searches for " },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the range " },
                              { "is_code": true, "text": "from" },
                              { "text": " (inclusive) - " },
                              { "is_code": true, "text": "to" },
                              { "text": " (exclusive)." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "last" },
                              {
                                "text": " is false (the default) returns the first occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the given range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "last" },
                              {
                                "text": " is true returns the last occurrence of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " in the given range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": ", by searching backward." }
                            ],
                            [
                              { "text": "The optional parameters " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              { "text": " delimit the range in which the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is searched in. The " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " must be fully contained in the range "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": " (as if taking a " },
                              {
                                "text": "copy",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " with these parameters) to find the "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": " does not need to be valid." }
                            ],
                            [
                              {
                                "itemized": [
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " < " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " returns -1. Considers the " },
                                    { "is_code": true, "text": "needle" },
                                    {
                                      "text": " as not found (even if it's the empty string)."
                                    }
                                  ],
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " < 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " > " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": ", adjusts " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " to 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " to " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": "." }
                                  ]
                                ]
                              }
                            ],
                            [
                              { "text": "Calls " },
                              { "is_code": true, "text": "if_absent" },
                              { "text": " with this instance if " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " is not found, and returns the result of that call."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            [
                              { "text": "Also see " },
                              {
                                "text": "index_of",
                                "path": "core/string.toit/String"
                              },
                              { "text": " for more examples." }
                            ],
                            {
                              "is_code_section": true,
                              "text": "\n\"foo\".index_of \"bar\" --if_absent=: it.size            // => 3 (the size of \"foo\")\n\"foobarfoo\".index_of \"foo\" 1 8 --if_absent=: 499      // => 499\n\"\".index_of \"\" -3 -3 --if_absent=: throw \"not found\"  // Error\n\"\".index_of \"\" 2 2   --if_absent=: -1                 // => -1\n\"foobarfoo\".index_of \"foo\" 1 8 --if_absent=: 42       // => 42\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes leading and trailing spaces. // TODO(florian): should we also remove newlines...?"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "left",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes leading spaces. // TODO(florian): should we also remove newlines... ?"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "right",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Removes trailing spaces. // TODO(florian): should we also remove newlines... ?"
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "prefix",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes a leading " },
                              { "is_code": true, "text": "str" },
                              { "text": " (if present)." }
                            ],
                            [
                              {
                                "text": "Returns this instance verbatim, if it doesn't start with "
                              },
                              { "is_code": true, "text": "str" },
                              { "text": "." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"http://www.example.com\".trim --prefix \"http://\" // => \"www.example.com\"\nstr := \"foobar\"\nstr.trim --prefix \"foo\"  // => \"bar\"\nstr.trim --prefix \"bar\"  // => \"foobar\"\nstr.trim --prefix \"gee\"  // => \"foobar\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "prefix",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes a leading " },
                              { "is_code": true, "text": "str" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Calls " },
                              { "is_code": true, "text": "if_absent" },
                              {
                                "text": " if this instance does not start with "
                              },
                              { "is_code": true, "text": "str" },
                              {
                                "text": ". The argument to the block is this instance."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"https://www.example.com\".trim --prefix \"http://\" --if_absent=: it.trim --prefix \"https://\"  // => \"www.example.com\"\nstr := \"foobar\"\nstr.trim --prefix \"foo\" --if_absent=: \"not_used\" // => \"bar\"\nstr.trim --prefix \"\"    --if_absent=: \"not_used\" // => \"foobar\"\nstr.trim --prefix \"gee\" --if_absent=: it         // => \"foobar\"   (the default behavior)\nstr.trim --prefix \"gee\" --if_absent=: throw \"missing prefix\" // ERROR\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "suffix",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes a trailing " },
                              { "is_code": true, "text": "str" },
                              { "text": " (if present)." }
                            ],
                            [
                              {
                                "text": "Returns this instance verbatim, if it doesn't end with "
                              },
                              { "is_code": true, "text": "str" },
                              { "text": "." }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"hello.toit\".trim --suffix \".toit\"  // => \"hello\"\nstr := \"foobar\"\nstr.trim --suffix \"bar\"  // => \"foo\"\nstr.trim --suffix \"foo\"  // => \"foobar\"\nstr.trim --suffix \"gee\"  // => \"foobar\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "trim",
                      "parameters": [
                        {
                          "param_name": "str",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "suffix",
                          "is_block": false,
                          "is_named": true,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        },
                        {
                          "param_name": "if_absent",
                          "is_block": true,
                          "is_named": true,
                          "is_required": true
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Removes a trailing " },
                              { "is_code": true, "text": "str" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Calls " },
                              { "is_code": true, "text": "if_absent" },
                              {
                                "text": " if this instance does not end with "
                              },
                              { "is_code": true, "text": "str" },
                              {
                                "text": ". The argument to the block is this instance."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\nstr := \"foobar\"\nstr.trim --suffix \"bar\" --if_absent=: \"not_used\" // => \"bar\"\nstr.trim --suffix \"\"    --if_absent=: \"not_used\" // => \"foobar\"\nstr.trim --suffix \"gee\" --if_absent=: it         // => \"foobar\"   (the default behavior)\nstr.trim --suffix \"gee\" --if_absent=: throw \"missing suffix\" // ERROR\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "split",
                      "parameters": [
                        {
                          "param_name": "separator",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "process_part",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "at_first",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Splits this instance at " },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If [at_first] is false (the default) splits at *every* occurrence of "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "If [at_first] is true, splits only at the first occurrence of "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              { "text": "Calls " },
                              { "is_code": true, "text": "process_part" },
                              {
                                "text": " for each part. It this instance starts or ends with a "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": ", then " },
                              { "is_code": true, "text": "process_part" },
                              {
                                "text": " is invoked with the empty string first and last, respectively."
                              }
                            ],
                            [
                              {
                                "text": "Splits are never in the middle of a UTF-8 multi-byte sequence. This is normally a consequence of the seperator (as well as this instance) being well-formed UTF-8. However, it is explicitly enforced for the zero length separator (the empty string)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"Toad the Wet Sprocket\".split \"e\": debug it  // debugs \"Toad th\", \" W\", \"t Sprock\", and \"t\"\n\" the dust \".split \" \": debug it             // debugs \"\", \"the\", \"dust\", and \"\"\n\"abc\".split  \"\":    debug it                 // debugs \"\", \"a\", \"b\", and \"c\"\n\"foo\".split  \"foo\": debug it                 // debugs \"\" and \"\"\n\"afoo\".split \"foo\": debug it                 // debugs \"a\" and \"\"\n\"foob\".split \"foo\": debug it                 // debugs \"\" and \"b\"\n\"\".split \"\": debug it                        // debugs \"\"\n\ngadsby := \"If youth, throughout all history, had had a champion to stand up for it;\"\ngadsby.split \"e\": debug it // debugs the contents of gadsby\n\n\"Toad the Wet Sprocket\".split --at_first \"e\": debug it  // debugs \"Toad th\", \" Wet Sprocket\"\n\" the dust \".split            --at_first \" \": debug it  // debugs \"\", \"the dust \"\ngadsby.split                  --at_first \"e\": debug it  // debugs the contents of gadsby\n\n\"abc\".split  --at_first \"\":    debug it     // debugs \"\" and \"abc\"\n\"foo\".split  --at_first \"foo\": debug it     // debugs \"\" and \"\"\n\"afoo\".split --at_first \"foo\": debug it     // debugs \"a\" and \"\"\n\"foob\".split --at_first \"foo\": debug it     // debugs \"\" and \"b\"\n\"\".split     --at_first \"\":    debug it     // debugs \"\"\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "split",
                      "parameters": [
                        {
                          "param_name": "separator",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "at_first",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Splits this instance at " },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Returns a list of the separated parts."
                              }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "at_first" },
                              {
                                "text": " is false (the default) splits at *every* occurrence of "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "at_first" },
                              {
                                "text": " is true, splits only at the first occurrence of "
                              },
                              { "is_code": true, "text": "separator" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "Splits are never in the middle of a UTF-8 multi-byte sequence. This is normally a consequence of the seperator (as well as this instance) being well-formed UTF-8. However, it is explicitly enforced for the zero length separator (the empty string)."
                              }
                            ]
                          ]
                        },
                        {
                          "title": "Examples",
                          "statements": [
                            {
                              "is_code_section": true,
                              "text": "\n\"Toad the Wet Sprocket\".split \"e\"  // => [\"Toad th\", \" W\", \"t Sprock\", \"t\"]\n\" the dust \".split \" \"             // => [\"\", \"the\", \"dust\", \"\"]\n\"abc\".split  \"\"                    // => [\"\", \"a\", \"b\", \"c\"]\n\"foo\".split  \"foo\"                 // => [\"\", \"\"]\n\"afoo\".split \"foo\"                 // => [\"a\", \"\"]\n\"foob\".split \"foo\"                 // => [\"\", \"b\"]\n\"\".split \"\"                        // => [\"\"]\n\ngadsby := \"If youth, throughout all history, had had a champion to stand up for it;\"\ngadsby.split \"e\"   // => [gadsby]\n\n\"Toad the Wet Sprocket\".split --at_first \"e\"  // => [\"Toad th\", \" Wet Sprocket\"]\n\" the dust \".split            --at_first \" \"  // => [\"\", \"the dust \"]\ngadsby.split                  --at_first \"e\"  // => [gadsby]\n\n\"abc\".split  --at_first \"\"      // => [\"\", \"abc\"]\n\"foo\".split  --at_first \"foo\"   // => [\"\", \"\"]\n\"afoo\".split --at_first \"foo\"   // => [\"a\", \"\"]\n\"foob\".split --at_first \"foo\"   // => [\"\", \"b\"]\n\"\".split     --at_first \"\"      // => [\"\"]\n"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "contains",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Returns whether " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is present in this instance." }
                            ],
                            [
                              { "text": "The optional parameters " },
                              { "is_code": true, "text": "from" },
                              { "text": " and " },
                              { "is_code": true, "text": "to" },
                              { "text": " delimit the range in which the " },
                              { "is_code": true, "text": "needle" },
                              { "text": " is searched in. The " },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": " must be fully contained in the range "
                              },
                              { "is_code": true, "text": "from" },
                              { "text": ".." },
                              { "is_code": true, "text": "to" },
                              { "text": " (as if taking a " },
                              {
                                "text": "copy",
                                "path": "core/string.toit/String"
                              },
                              {
                                "text": " with these parameters) to return true."
                              }
                            ],
                            [
                              { "text": "The range " },
                              { "is_code": true, "text": "from" },
                              { "text": " - " },
                              { "is_code": true, "text": "to" },
                              { "text": " does not need to be valid." }
                            ],
                            [
                              {
                                "itemized": [
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " < " },
                                    { "is_code": true, "text": "from" },
                                    {
                                      "text": " returns false. Considers the "
                                    },
                                    { "is_code": true, "text": "needle" },
                                    {
                                      "text": " as not found (even if it's the empty string)."
                                    }
                                  ],
                                  [
                                    { "text": "if " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " < 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " > " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": ", adjusts " },
                                    { "is_code": true, "text": "from" },
                                    { "text": " to 0, and/or " },
                                    { "is_code": true, "text": "to" },
                                    { "text": " to " },
                                    {
                                      "text": "size",
                                      "path": "core/string.toit/String"
                                    },
                                    { "text": "." }
                                  ]
                                ]
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "replacement",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "all",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Replaces the given " },
                              { "is_code": true, "text": "needle" },
                              { "text": " with the " },
                              { "is_code": true, "text": "replacement" },
                              { "text": " string." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "all" },
                              {
                                "text": " is true, replaces all occurrences of "
                              },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": ". Otherwise, only replaces the first occurrence."
                              }
                            ],
                            [
                              {
                                "text": "Does nothing, if this instance doesn't contain the "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "This operation only replaces occurrences of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " that are fully contained in " },
                              { "is_code": true, "text": "from" },
                              { "text": "-" },
                              { "is_code": true, "text": "to" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "replace",
                      "parameters": [
                        {
                          "param_name": "needle",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "replacement_callback",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "all",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Replaces the given " },
                              { "is_code": true, "text": "needle" },
                              { "text": " with the result of calling " },
                              {
                                "is_code": true,
                                "text": "replacement_callback"
                              },
                              { "text": "." }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "all" },
                              {
                                "text": " is true, replaces all occurrences of "
                              },
                              { "is_code": true, "text": "needle" },
                              {
                                "text": ". For each found occurrence calls the "
                              },
                              {
                                "is_code": true,
                                "text": "replacement_callback"
                              },
                              {
                                "text": " with the matched string as argument."
                              }
                            ],
                            [
                              { "text": "If " },
                              { "is_code": true, "text": "all" },
                              {
                                "text": " is false, only replaces the first occurrence with the result of calling "
                              },
                              {
                                "is_code": true,
                                "text": "replacement_callback"
                              },
                              { "text": " with the matched string." }
                            ],
                            [
                              {
                                "text": "Does nothing, if this instance doesn't contain the "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": "." }
                            ],
                            [
                              {
                                "text": "This operation only replaces occurrences of "
                              },
                              { "is_code": true, "text": "needle" },
                              { "text": " that are fully contained in " },
                              { "is_code": true, "text": "from" },
                              { "text": "-" },
                              { "is_code": true, "text": "to" },
                              { "text": "." }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "to_byte_array", "return_type": "any" },
                    {
                      "function_name": "to_byte_array",
                      "parameters": [
                        {
                          "param_name": "start",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "end",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_to_byte_array",
                      "parameters": [
                        {
                          "param_name": "byte_array",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_to_byte_array",
                      "parameters": [
                        {
                          "param_name": "byte_array",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "dest_index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "write_to_byte_array",
                      "parameters": [
                        {
                          "param_name": "byte_array",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "start",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "end",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "dest_index",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "utf_8_bytes",
                "parameters": [
                  {
                    "param_name": "char",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "write_utf_8_to_byte_array",
                "parameters": [
                  {
                    "param_name": "byte_array",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "position",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "char",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ]
          },
          "module": "string.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "TaskLatch",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "TaskLatch",
                    "return_path": "core/task.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "wait", "return_type": "any" },
                    { "function_name": "increment", "return_type": "none" },
                    {
                      "function_name": "decrement",
                      "parameters": [
                        {
                          "param_name": "has_exception",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              { "function_name": "task", "return_type": "any" },
              {
                "function_name": "task",
                "parameters": [
                  {
                    "param_name": "code",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              { "function_name": "yield", "return_type": "none" },
              { "function_name": "log_tasks", "return_type": "any" }
            ],
            "module_globals": [
              { "global_name": "STARTING" },
              { "global_name": "RUNNING" },
              { "global_name": "TERMINATING" },
              { "global_name": "EXITING" },
              { "global_name": "DEAD" }
            ]
          },
          "module": "task.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Duration",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "of",
                    "parameters": [
                      {
                        "param_name": "block",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "Duration",
                    "return_path": "core/time.toit"
                  },
                  { "function_name": "ZERO", "return_type": "any" }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "hours",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "minutes",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "ms",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "ns",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "seconds",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "us",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Duration",
                    "return_path": "core/time.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "ns_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Duration",
                    "return_path": "core/time.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "periodic",
                      "parameters": [
                        {
                          "param_name": "block",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "ns",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "us",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "ms",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "seconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "minutes",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "hours",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "/",
                      "parameters": [
                        {
                          "param_name": "factor",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "Duration",
                      "return_path": "core/time.toit"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "TimeInfo",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "from",
                    "parameters": [
                      {
                        "param_name": "seconds",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "TimeInfo",
                    "return_path": "core/time.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "day",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "hours",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "minutes",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "month",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "seconds",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "year",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "TimeInfo",
                    "return_path": "core/time.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "seconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "seconds=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "minutes",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "minutes=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "hours",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "hours=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "day",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "day=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "month",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "month=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "year",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "year=",
                      "parameters": [
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "weekday",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "yearday",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "to_time",
                      "return_type": "Time",
                      "return_path": "core/time.toit"
                    },
                    {
                      "function_name": "to_seconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Time",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "now",
                    "return_type": "Time",
                    "return_path": "core/time.toit"
                  },
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Time",
                    "return_path": "core/time.toit"
                  },
                  {
                    "function_name": "from_string",
                    "parameters": [
                      {
                        "param_name": "str",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "Time",
                    "return_path": "core/time.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "ns",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "seconds",
                        "is_block": false,
                        "is_named": true,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "Time",
                    "return_path": "core/time.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "+",
                      "parameters": [
                        {
                          "param_name": "duration",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Duration",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "Time",
                      "return_path": "core/time.toit"
                    },
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "<=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": ">=",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "timestamp",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "seconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "ns",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "milliseconds",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "hash_code",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "-",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "to_time_info",
                      "return_type": "TimeInfo",
                      "return_path": "core/time.toit"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "days",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "hours",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "minutes",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "months",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "seconds",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "years",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "Time",
                      "return_path": "core/time.toit"
                    },
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "is_epoch_set",
                "return_type": "bool",
                "return_path": "core/objects.toit"
              },
              { "function_name": "get_real_time_clock", "return_type": "any" },
              {
                "function_name": "is_leap",
                "parameters": [
                  {
                    "param_name": "year",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "bool",
                "return_path": "core/objects.toit"
              },
              {
                "function_name": "normalize",
                "parameters": [
                  {
                    "param_name": "high",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "low",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "base",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit"
              },
              {
                "function_name": "seconds_since_epoch",
                "parameters": [
                  {
                    "param_name": "year",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "month",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "day",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "hour",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "min",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "sec",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit"
              }
            ],
            "module_globals": [
              { "global_name": "NANOSECONDS_PER_MICROSECOND" },
              { "global_name": "NANOSECONDS_PER_MILLISECOND" },
              { "global_name": "NANOSECONDS_PER_SECOND" },
              { "global_name": "NANOSECONDS_PER_MINUTE" },
              { "global_name": "NANOSECONDS_PER_HOUR" },
              { "global_name": "DAYS_BEFORE" },
              { "global_name": "MARCH" },
              { "global_name": "ABSOLUTE_ZERO_YEAR" },
              { "global_name": "INTERNAL_YEAR" },
              { "global_name": "ABSOLUTE_TO_INTERNAL" },
              { "global_name": "INTERNAL_TO_ABSOLUTE" },
              { "global_name": "EPOCH_TO_INTERNAL" },
              { "global_name": "INTERNAL_TO_EPOCH" },
              { "global_name": "WALL_TO_INTERNAL" },
              { "global_name": "INTERNAL_TO_WALL" },
              { "global_name": "ABSOLUTE_TO_EPOCH" },
              { "global_name": "SECONDS_PER_MINUTE" },
              { "global_name": "SECONDS_PER_HOUR" },
              { "global_name": "SECONDS_PER_DAY" },
              { "global_name": "SECONDS_PER_WEEK" },
              { "global_name": "DAYS_PER_400_YEARS" },
              { "global_name": "DAYS_PER_100_YEARS" },
              { "global_name": "DAYS_PER_4_YEARS" }
            ]
          },
          "module": "time.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "sleep",
                "parameters": [
                  {
                    "param_name": "duration",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Duration",
                    "path": "core/time.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "sleep",
                "parameters": [
                  {
                    "param_name": "ms",
                    "is_block": false,
                    "is_named": true,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              }
            ]
          },
          "module": "timer.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Profiler",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "install",
                    "parameters": [
                      {
                        "param_name": "profile_all_tasks",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "bool",
                        "path": "core/objects.toit"
                      }
                    ],
                    "return_type": "none"
                  },
                  { "function_name": "start", "return_type": "none" },
                  { "function_name": "stop", "return_type": "none" },
                  {
                    "function_name": "report",
                    "parameters": [
                      {
                        "param_name": "title",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "cutoff",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "none"
                  },
                  {
                    "function_name": "encode",
                    "parameters": [
                      {
                        "param_name": "title",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      },
                      {
                        "param_name": "cutoff",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "ByteArray",
                    "return_path": "core/collections.toit"
                  },
                  { "function_name": "uninstall", "return_type": "none" },
                  {
                    "function_name": "do",
                    "parameters": [
                      {
                        "param_name": "block",
                        "is_block": true,
                        "is_named": false,
                        "is_required": true
                      }
                    ],
                    "return_type": "any"
                  }
                ]
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "identical",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "y",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "min",
                "parameters": [
                  {
                    "param_name": "a",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "b",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "max",
                "parameters": [
                  {
                    "param_name": "a",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "b",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "round_up",
                "parameters": [
                  {
                    "param_name": "value",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "divisor",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Round a non-negative " },
                        { "is_code": true, "text": "value" },
                        { "text": " up to the next multiple of the " },
                        { "is_code": true, "text": "divisor" },
                        { "text": "." }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "round_down",
                "parameters": [
                  {
                    "param_name": "value",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "divisor",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "int",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Round a non-negative " },
                        { "is_code": true, "text": "value" },
                        { "text": " down to the previous multiple of the " },
                        { "is_code": true, "text": "divisor" },
                        { "text": "." }
                      ]
                    ]
                  }
                ]
              },
              { "function_name": "random", "return_type": "any" },
              {
                "function_name": "random",
                "parameters": [
                  {
                    "param_name": "n",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "random",
                "parameters": [
                  {
                    "param_name": "start",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "end",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              { "function_name": "time", "return_type": "any" },
              {
                "function_name": "with_timeout",
                "parameters": [
                  {
                    "param_name": "timeout",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Duration",
                    "path": "core/time.toit"
                  },
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "with_timeout",
                "parameters": [
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "ms",
                    "is_block": false,
                    "is_named": true,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "deep_sleep",
                "parameters": [
                  {
                    "param_name": "duration",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Duration",
                    "path": "core/time.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "deep_sleep",
                "parameters": [
                  {
                    "param_name": "ms",
                    "is_block": false,
                    "is_named": true,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              },
              { "function_name": "host_word_size", "return_type": "any" },
              {
                "function_name": "exit",
                "parameters": [
                  {
                    "param_name": "status",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "log_execution_time",
                "parameters": [
                  {
                    "param_name": "name",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  },
                  {
                    "param_name": "block",
                    "is_block": true,
                    "is_named": false,
                    "is_required": true
                  },
                  {
                    "param_name": "iterations",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "launch_snapshot",
                "parameters": [
                  {
                    "param_name": "snapshot",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "pass_arguments",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "create_off_heap_byte_array",
                "parameters": [
                  {
                    "param_name": "size",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "concat_strings",
                "parameters": [
                  {
                    "param_name": "array_of_strings",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "add_finalizer",
                "parameters": [
                  {
                    "param_name": "object",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "lambda",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "remove_finalizer",
                "parameters": [
                  {
                    "param_name": "object",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              { "function_name": "platform", "return_type": "any" },
              { "function_name": "process_ids", "return_type": "any" },
              {
                "function_name": "process_stats",
                "parameters": [
                  {
                    "param_name": "group",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "id",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "gc_count",
                "return_type": "int",
                "return_path": "core/numbers.toit"
              },
              {
                "function_name": "vm_sdk_version",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "vm_sdk_info",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "vm_sdk_model",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "app_sdk_version",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "app_sdk_info",
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "set_max_heap_size",
                "parameters": [
                  {
                    "param_name": "bytes",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "none"
              }
            ]
          },
          "module": "utils.toit"
        }
      ]
    },
    {
      "lib_name": "encoding",
      "lib_modules": [
        {
          "module_classes": [
            {
              "class_name": "Encoder",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "encode",
                      "parameters": [
                        {
                          "param_name": "obj",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "to_byte_array",
                      "return_type": "any",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the objects serialized up to this point as a byte array."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Decoder",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "bytes_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Decoder",
                    "return_path": "encoding/ubjson.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "is_done", "return_type": "any" },
                    { "function_name": "decode", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "encode",
                "parameters": [
                  {
                    "param_name": "obj",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "ByteArray",
                "return_path": "core/collections.toit"
              },
              {
                "function_name": "decode",
                "parameters": [
                  {
                    "param_name": "bytes",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "ByteArray",
                    "path": "core/collections.toit"
                  }
                ],
                "return_type": "any"
              }
            ]
          },
          "module": "ubjson.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "encode",
                "parameters": [
                  {
                    "param_name": "data",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "String",
                "return_path": "core/string.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Encodes the given " },
                        { "is_code": true, "text": "data" },
                        { "text": " as Base64." }
                      ],
                      [
                        { "text": "The " },
                        { "is_code": true, "text": "data" },
                        { "text": " must be a string or byte array." }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "decode",
                "parameters": [
                  {
                    "param_name": "str",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  }
                ],
                "return_type": "ByteArray",
                "return_path": "core/collections.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Takes a valid base64 encoding (without newlines or other non-base64 characters)"
                        }
                      ],
                      [{ "text": "and returns the binary data." }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "base64.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "encode",
                "parameters": [
                  {
                    "param_name": "data",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "String",
                "return_path": "core/string.toit"
              },
              {
                "function_name": "decode",
                "parameters": [
                  {
                    "param_name": "str",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "String",
                    "path": "core/string.toit"
                  }
                ],
                "return_type": "ByteArray",
                "return_path": "core/collections.toit"
              }
            ]
          },
          "module": "hex.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Encoder",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "encode",
                      "parameters": [
                        {
                          "param_name": "obj",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Decoder",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "decode",
                      "parameters": [
                        {
                          "param_name": "bytes",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "stringify",
                "parameters": [
                  {
                    "param_name": "obj",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "parse",
                "parameters": [
                  {
                    "param_name": "str",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "_hex_digit",
                "parameters": [
                  {
                    "param_name": "x",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ]
          },
          "module": "json.toit"
        }
      ]
    },
    {
      "lib_name": "log",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [{ "global_name": "RPC_SYSTEM_LOG" }]
          },
          "module": "rpc.toit"
        },
        {
          "top_level": {
            "module_globals": [
              { "global_name": "PRINT_LEVEL" },
              { "global_name": "DEBUG_LEVEL" },
              { "global_name": "INFO_LEVEL" },
              { "global_name": "WARN_LEVEL" },
              { "global_name": "ERROR_LEVEL" },
              { "global_name": "FATAL_LEVEL" }
            ]
          },
          "module": "level.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Logger",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "level",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "target",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Target",
                        "path": "log/target.toit"
                      },
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Logger",
                    "return_path": "log/log.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "with_name",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Logger",
                      "return_path": "log/log.toit"
                    },
                    {
                      "function_name": "with_level",
                      "parameters": [
                        {
                          "param_name": "level",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Logger",
                      "return_path": "log/log.toit"
                    },
                    {
                      "function_name": "with_tag",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "value",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Logger",
                      "return_path": "log/log.toit"
                    },
                    {
                      "function_name": "target",
                      "return_type": "Target",
                      "return_path": "log/target.toit"
                    },
                    {
                      "function_name": "log",
                      "parameters": [
                        {
                          "param_name": "level",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "debug",
                      "parameters": [
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "info",
                      "parameters": [
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "warn",
                      "parameters": [
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "error",
                      "parameters": [
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "fatal",
                      "parameters": [
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            }
          ],
          "export_classes": [
            {
              "class_name": "Target",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "log",
                      "parameters": [
                        {
                          "param_name": "names",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "level",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "exported_from": "log/target.toit"
            },
            {
              "class_name": "DefaultTarget",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "log",
                      "parameters": [
                        {
                          "param_name": "names",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "level",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "exported_from": "log/target.toit"
            }
          ],
          "top_level": {
            "module_functions": [
              { "function_name": "default", "return_type": "any" },
              {
                "function_name": "set_default",
                "parameters": [
                  {
                    "param_name": "logger",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Logger",
                    "path": "log/log.toit"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "log",
                "parameters": [
                  {
                    "param_name": "level",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "tags",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "debug",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "tags",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "info",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "tags",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "warn",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "tags",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "error",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "tags",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              {
                "function_name": "fatal",
                "parameters": [
                  {
                    "param_name": "message",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "tags",
                    "is_block": false,
                    "is_named": true,
                    "is_required": false,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              }
            ],
            "export_functions": [
              {
                "function_name": "level_name",
                "exported_from": "log/target.toit",
                "parameters": [
                  {
                    "param_name": "level",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "String",
                "return_path": "core/string.toit"
              }
            ],
            "export_globals": [
              {
                "global_name": "PRINT_LEVEL",
                "exported_from": "log/level.toit"
              },
              {
                "global_name": "DEBUG_LEVEL",
                "exported_from": "log/level.toit"
              },
              {
                "global_name": "INFO_LEVEL",
                "exported_from": "log/level.toit"
              },
              {
                "global_name": "WARN_LEVEL",
                "exported_from": "log/level.toit"
              },
              {
                "global_name": "ERROR_LEVEL",
                "exported_from": "log/level.toit"
              },
              {
                "global_name": "FATAL_LEVEL",
                "exported_from": "log/level.toit"
              }
            ]
          },
          "module": "log.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Target",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "log",
                      "parameters": [
                        {
                          "param_name": "names",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "level",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "DefaultTarget",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "log",
                      "parameters": [
                        {
                          "param_name": "names",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "List",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "level",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "message",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "tags",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Map",
                          "path": "core/collections.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "level_name",
                "parameters": [
                  {
                    "param_name": "level",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "String",
                "return_path": "core/string.toit"
              }
            ]
          },
          "module": "target.toit"
        }
      ]
    },
    {
      "lib_name": "cron",
      "lib_modules": [
        {
          "module_classes": [
            {
              "class_name": "CronSchedule",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "from_map",
                    "parameters": [
                      {
                        "param_name": "map",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Map",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "CronSchedule",
                    "return_path": "cron/cron.toit"
                  },
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "description",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "CronSchedule",
                    "return_path": "cron/cron.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Constructs a CronScheduler based on parsing the description: 1: either a predefined schedule \"@name\" 2: or a six field format \"secs mins hours days-of-month months week-days\" - secs -> 0-59 * , - - mins -> 0-59 * , - - hours -> 0-23 * , - - days -> 1-31 * , - - months -> 1-12 * , - - weekdays -> 0-6 * , -"
                            }
                          ]
                        ]
                      }
                    ]
                  },
                  { "function_name": "STAR_BIT", "return_type": "any" }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "second",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "minute",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "hour",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "dom",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "month",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "dow",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "CronSchedule",
                    "return_path": "cron/cron.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "second", "field_type": "int" },
                    { "field_name": "minute", "field_type": "int" },
                    { "field_name": "hour", "field_type": "int" },
                    { "field_name": "dom", "field_type": "int" },
                    { "field_name": "month", "field_type": "int" },
                    { "field_name": "dow", "field_type": "int" }
                  ],
                  "methods": [
                    { "function_name": "as_map", "return_type": "any" },
                    { "function_name": "print_string", "return_type": "any" },
                    {
                      "function_name": "next",
                      "parameters": [
                        {
                          "param_name": "t",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Time",
                          "path": "core/time.toit"
                        }
                      ],
                      "return_type": "Time",
                      "return_path": "core/time.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the next time this schedule is activated, greater than the given time."
                              }
                            ],
                            [
                              {
                                "text": "Returns null if no time can be found within 5 years from the given time."
                              }
                            ],
                            [
                              {
                                "text": "(Implementation of: https://github.com/robfig/cron/blob/master/spec.go. Note we do not"
                              }
                            ],
                            [
                              {
                                "text": "take into account time zones and daylight savings time.)"
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [{ "text": "A class representing a cron schedule" }]
                  ]
                }
              ]
            }
          ],
          "module": "cron.toit"
        }
      ]
    },
    {
      "lib_name": "services",
      "lib_modules": [
        {
          "module_classes": [
            {
              "class_name": "StatusDisplay",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "oled",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "StatusDisplay",
                    "return_path": "services/get_wifi.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "lines", "field_type": "any" },
                    { "field_name": "oled", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "sts",
                      "parameters": [
                        {
                          "param_name": "text",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "prt",
                      "parameters": [
                        {
                          "param_name": "text",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Heartbeater",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "wifi_listener",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Heartbeater",
                    "return_path": "services/get_wifi.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "wifi_listener", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "done", "return_type": "any" },
                    { "function_name": "stop", "return_type": "any" },
                    { "function_name": "do_heartbeat", "return_type": "none" }
                  ]
                }
              }
            },
            {
              "class_name": "PasswordPrinter",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "status",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "PasswordPrinter",
                    "return_path": "services/get_wifi.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "status", "field_type": "any" },
                    { "field_name": "found", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "got_message",
                      "parameters": [
                        {
                          "param_name": "byte_array",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              },
              "extends": "WifiDataDecoder",
              "extend_path": "services/wifi_leaker.toit"
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "get_channel",
                "parameters": [
                  {
                    "param_name": "status",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "get_message",
                "parameters": [
                  {
                    "param_name": "status",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "channel",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "none"
              },
              { "function_name": "main", "return_type": "none" }
            ]
          },
          "module": "get_wifi.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "OffsetListener",
              "class_structure": {
                "statics": [
                  { "function_name": "MAX_WEIGHT", "return_type": "any" },
                  { "function_name": "DECAY", "return_type": "any" },
                  { "function_name": "GOOD_MATCH_BONUS", "return_type": "any" },
                  { "function_name": "POOR_MATCH_BONUS", "return_type": "any" },
                  { "function_name": "MIN_BUDGET", "return_type": "any" }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "OffsetListener",
                    "return_path": "services/wifi_leaker.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "correspondance",
                      "parameters": [
                        {
                          "param_name": "a",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "b",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "c",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "d",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "counter",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "k", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "DataListener",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "offset_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "DataListener",
                    "return_path": "services/wifi_leaker.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "got_packet",
                      "parameters": [
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "number",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "got_raw_packet",
                      "parameters": [
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "output_data", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "WifiDataEncoder",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "payload_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "WifiDataEncoder",
                    "return_path": "services/wifi_leaker.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "reset", "return_type": "none" },
                    { "function_name": "next_value", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "WifiDataDecoder",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "WifiDataDecoder",
                    "return_path": "services/wifi_leaker.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "got_signal", "return_type": "none" },
                    {
                      "function_name": "got_message",
                      "parameters": [
                        {
                          "param_name": "byte_array",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "datum",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "got_packet",
                      "parameters": [
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              },
              "extends": "DataListener",
              "extend_path": "services/wifi_leaker.toit"
            }
          ],
          "top_level": {
            "module_globals": [{ "global_name": "MINIMAL_GOODNESS" }]
          },
          "module": "wifi_leaker.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "ArgumentParser",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "add_command",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "ArgumentParser",
                      "return_path": "services/arguments.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns a new [ArgumentParser] for the given command."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add_flag",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "short",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Adds a boolean flag for the given name. Always defaults to false. Can be set to true by passing '--<name>' or '-<short>' if short isn't null."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add_option",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "default",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "short",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Adds an option with the given default value."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add_multi_option",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "short",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "split_commas",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Adds an option that can be provide multiple times."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "add_alias",
                      "parameters": [
                        {
                          "param_name": "name",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "short",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Adds a short alias for an option." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "parse",
                      "parameters": [
                        {
                          "param_name": "arguments",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Arguments",
                      "return_path": "services/arguments.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Parse the arguments. Returns a new instance of [Arguments]."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Arguments",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "command_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Arguments",
                    "return_path": "services/arguments.toit"
                  },
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "command_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "options_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "rest_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Arguments",
                    "return_path": "services/arguments.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "command",
                      "return_type": "String",
                      "return_path": "core/string.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Returns the parsed command or null." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "[]",
                      "parameters": [
                        {
                          "param_name": "key",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "rest",
                      "return_type": "List",
                      "return_path": "core/collections.toit"
                    },
                    { "function_name": "print_string", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "arguments.toit"
        }
      ]
    },
    {
      "lib_name": "peripherals",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              { "global_name": "RPC_READ_TEMPERATURE" },
              { "global_name": "RPC_READ_PRESSURE" },
              { "global_name": "RPC_READ_HUMIDITY" },
              { "global_name": "RPC_READ_BATTERY_LEVEL" },
              { "global_name": "RPC_PLUGGED_IN" },
              { "global_name": "RPC_GPS_START" },
              { "global_name": "RPC_GPS_STOP" },
              { "global_name": "RPC_GPS_READ" },
              { "global_name": "RPC_GPS_DIAGNOSTICS" },
              { "global_name": "RPC_GPS_CLEAR_LAST_KNOWN_LOCATION" },
              { "global_name": "RPC_GPS_SET_LAST_KNOWN_LOCATION" },
              { "global_name": "RPC_GYRO_START" },
              { "global_name": "RPC_GYRO_STOP" },
              { "global_name": "RPC_GYRO_READ" },
              { "global_name": "RPC_ACCEL_START" },
              { "global_name": "RPC_ACCEL_STOP" },
              { "global_name": "RPC_ACCEL_READ" },
              { "global_name": "RPC_MAGNETO_START" },
              { "global_name": "RPC_MAGNETO_STOP" },
              { "global_name": "RPC_MAGNETO_READ" },
              { "global_name": "RPC_LED_ON" },
              { "global_name": "RPC_LED_OFF" },
              { "global_name": "RPC_LED_GET_ID" },
              { "global_name": "RPC_GET_TOUCH" },
              { "global_name": "RPC_TOUCH_CLEAR_CALIBRATION" },
              { "global_name": "RPC_DISPLAY_OPEN" },
              { "global_name": "RPC_DISPLAY_START_PARTIAL_UPDATE" },
              { "global_name": "RPC_DISPLAY_START_FULL_UPDATE" },
              { "global_name": "RPC_DISPLAY_DRAW" },
              { "global_name": "RPC_DISPLAY_COMMIT" },
              { "global_name": "RPC_DISPLAY_CLEAN" },
              { "global_name": "RPC_DISPLAY_CLOSE" },
              { "global_name": "RPC_DISPLAY_FLAG_2_COLOR" },
              { "global_name": "RPC_DISPLAY_FLAG_3_COLOR" },
              { "global_name": "RPC_DISPLAY_FLAG_4_COLOR" },
              { "global_name": "RPC_DISPLAY_FLAG_GRAY_SCALE" },
              { "global_name": "RPC_DISPLAY_FLAG_TRUE_COLOR" },
              { "global_name": "RPC_DISPLAY_FLAG_PARTIAL_UPDATES" },
              { "global_name": "RPC_DISPLAY_FLAG_USE_CLEAN" },
              { "global_name": "RPC_DISPLAY_FLAG_UPDATE_TWICE" }
            ]
          },
          "module": "rpc.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "GPS",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "start",
                    "parameters": [
                      {
                        "param_name": "configuration",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "GPS",
                    "return_path": "peripherals/gps.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a new GPS instance in a started state."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "GnssLocation",
                      "return_path": "lib/gnss_location.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Reads the location from the latest fix from the GPS."
                              }
                            ],
                            [
                              {
                                "text": "Returns null if no fix has been obtained yet."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "diagnostics",
                      "return_type": "GpsDiagnostics",
                      "return_path": "peripherals/gps.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns diagnostics for the GPS receiver."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "close",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Closes the GPS." }],
                            [
                              {
                                "text": "It is advisable to close the GPS when it is not in use to minimize power consumption."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "clear_last_known_location",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Clears the last known location." }]
                          ]
                        },
                        {
                          "title": "Advanced",
                          "statements": [
                            [
                              {
                                "text": "The GPS receiver may use the last known location to get a faster position fix."
                              }
                            ],
                            [
                              {
                                "text": "If the GPS is unable to get a fix it may be due to a corrupt last known location (for instance, if the device has been moved since the last position fix). It may help to clear the last known location."
                              }
                            ],
                            [
                              {
                                "text": "This feature may not be applicable for all GPS receivers."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "set_last_known_location",
                      "parameters": [
                        {
                          "param_name": "location",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Location",
                          "path": "lib/location.toit"
                        },
                        {
                          "param_name": "altitude",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "float",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "accuracy",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "float",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Sets the last known location." }],
                            [
                              { "is_code": true, "text": "altitude" },
                              { "text": " and " },
                              { "is_code": true, "text": "accuracy" },
                              { "text": " is in meters." }
                            ]
                          ]
                        },
                        {
                          "title": "Advanced",
                          "statements": [
                            [
                              {
                                "text": "The GPS receiver may use the last known location to get a faster position fix."
                              }
                            ],
                            [
                              {
                                "text": "If the expected location of the GPS receiver is known, then it may help to set it in order to get a faster location fix."
                              }
                            ],
                            [
                              {
                                "text": "This feature may not be applicable for all GPS receivers."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "The GPS class can be used on devices with a GPS receiver."
                      }
                    ],
                    [
                      { "text": "The flow of control for a GPS is as follows:" }
                    ],
                    [{ "text": "1. Start the GPS." }],
                    [{ "text": "2. Make any number of readings." }],
                    [{ "text": "3. Close the GPS." }]
                  ]
                },
                {
                  "title": "Power Consumption",
                  "statements": [
                    [{ "text": "The GPS consumes power while active." }],
                    [
                      {
                        "text": "To minimize power consumption, close the GPS when not needed anymore. The GPS takes some time to obtain a fix, so only close the GPS if it won't be used for an extended period of time."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "GpsDiagnostics",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "GpsDiagnostics",
                    "return_path": "peripherals/gps.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "GpsDiagnostics",
                    "parameters": [
                      {
                        "param_name": "signal_quality",
                        "is_block": false,
                        "is_named": true,
                        "is_required": true,
                        "param_type": "float",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "time_to_first_fix",
                        "is_block": false,
                        "is_named": true,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "GpsDiagnostics",
                    "return_path": "peripherals/gps.toit"
                  }
                ],
                "members": {
                  "fields": [
                    {
                      "field_name": "time_to_first_fix",
                      "field_type": "int",
                      "field_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "The time to first fix." }],
                            [{ "text": "Is 0 if no fix has been obtained." }]
                          ]
                        }
                      ]
                    },
                    {
                      "field_name": "signal_quality",
                      "field_type": "float",
                      "field_toitdoc": [
                        { "statements": [[{ "text": "The signal quality." }]] }
                      ]
                    }
                  ],
                  "methods": [
                    {
                      "function_name": "to_byte_array",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              }
            }
          ],
          "module": "gps.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "read_temperature",
                "return_type": "float",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Reads the temperature." }],
                      [{ "text": "The result is in degrees Celsius." }]
                    ]
                  }
                ]
              },
              {
                "function_name": "read_pressure",
                "return_type": "float",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Reads the pressure." }],
                      [{ "text": "The result is in Pa." }]
                    ]
                  }
                ]
              },
              {
                "function_name": "read_humidity",
                "return_type": "float",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Reads the humidity." }],
                      [
                        {
                          "text": "The reading is a relative humidity as a percentage in the range 1 - 100."
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "thp.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Magnetometer",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "start",
                    "return_type": "Magnetometer",
                    "return_path": "peripherals/magnetometer.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a magnetometer that is already started."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "Point3f",
                      "return_path": "lib/point.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Reads a value from the magnetometer." }
                            ],
                            [{ "text": "The magnetometer must not be closed." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "close",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Closes the magnetometer." }],
                            [
                              {
                                "text": "Close the magnetometer when it is no longer in use."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "The magnetometer class can be used on devices with a magnetometer available."
                      }
                    ],
                    [
                      {
                        "text": "The flow of control for a magnetometer is as follows:"
                      }
                    ],
                    [{ "text": "1. Start the magnetometer." }],
                    [{ "text": "2. Make any number of readings." }],
                    [{ "text": "3. Close the magnetometer." }]
                  ]
                },
                {
                  "title": "Power Consumption",
                  "statements": [
                    [
                      {
                        "text": "The magnetometer consumes power while active."
                      }
                    ],
                    [
                      {
                        "text": "To minimize power consumption, close the magnetometer when not needed anymore, and create a new magnetometer instance when new readouts are needed."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "module": "magnetometer.toit"
        },
        {
          "export_classes": [
            {
              "class_name": "GPS",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "start",
                    "parameters": [
                      {
                        "param_name": "configuration",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "GPS",
                    "return_path": "peripherals/gps.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a new GPS instance in a started state."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "GnssLocation",
                      "return_path": "lib/gnss_location.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Reads the location from the latest fix from the GPS."
                              }
                            ],
                            [
                              {
                                "text": "Returns null if no fix has been obtained yet."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "diagnostics",
                      "return_type": "GpsDiagnostics",
                      "return_path": "peripherals/gps.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns diagnostics for the GPS receiver."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "close",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Closes the GPS." }],
                            [
                              {
                                "text": "It is advisable to close the GPS when it is not in use to minimize power consumption."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "clear_last_known_location",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Clears the last known location." }]
                          ]
                        },
                        {
                          "title": "Advanced",
                          "statements": [
                            [
                              {
                                "text": "The GPS receiver may use the last known location to get a faster position fix."
                              }
                            ],
                            [
                              {
                                "text": "If the GPS is unable to get a fix it may be due to a corrupt last known location (for instance, if the device has been moved since the last position fix). It may help to clear the last known location."
                              }
                            ],
                            [
                              {
                                "text": "This feature may not be applicable for all GPS receivers."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "set_last_known_location",
                      "parameters": [
                        {
                          "param_name": "location",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Location",
                          "path": "lib/location.toit"
                        },
                        {
                          "param_name": "altitude",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "float",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "accuracy",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "float",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Sets the last known location." }],
                            [
                              { "is_code": true, "text": "altitude" },
                              { "text": " and " },
                              { "is_code": true, "text": "accuracy" },
                              { "text": " is in meters." }
                            ]
                          ]
                        },
                        {
                          "title": "Advanced",
                          "statements": [
                            [
                              {
                                "text": "The GPS receiver may use the last known location to get a faster position fix."
                              }
                            ],
                            [
                              {
                                "text": "If the expected location of the GPS receiver is known, then it may help to set it in order to get a faster location fix."
                              }
                            ],
                            [
                              {
                                "text": "This feature may not be applicable for all GPS receivers."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "exported_from": "peripherals/gps.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "The GPS class can be used on devices with a GPS receiver."
                      }
                    ],
                    [
                      { "text": "The flow of control for a GPS is as follows:" }
                    ],
                    [{ "text": "1. Start the GPS." }],
                    [{ "text": "2. Make any number of readings." }],
                    [{ "text": "3. Close the GPS." }]
                  ]
                },
                {
                  "title": "Power Consumption",
                  "statements": [
                    [{ "text": "The GPS consumes power while active." }],
                    [
                      {
                        "text": "To minimize power consumption, close the GPS when not needed anymore. The GPS takes some time to obtain a fix, so only close the GPS if it won't be used for an extended period of time."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "GpsDiagnostics",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "GpsDiagnostics",
                    "return_path": "peripherals/gps.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "GpsDiagnostics",
                    "parameters": [
                      {
                        "param_name": "signal_quality",
                        "is_block": false,
                        "is_named": true,
                        "is_required": true,
                        "param_type": "float",
                        "path": "core/numbers.toit"
                      },
                      {
                        "param_name": "time_to_first_fix",
                        "is_block": false,
                        "is_named": true,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "GpsDiagnostics",
                    "return_path": "peripherals/gps.toit"
                  }
                ],
                "members": {
                  "fields": [
                    {
                      "field_name": "time_to_first_fix",
                      "field_type": "int",
                      "field_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "The time to first fix." }],
                            [{ "text": "Is 0 if no fix has been obtained." }]
                          ]
                        }
                      ]
                    },
                    {
                      "field_name": "signal_quality",
                      "field_type": "float",
                      "field_toitdoc": [
                        { "statements": [[{ "text": "The signal quality." }]] }
                      ]
                    }
                  ],
                  "methods": [
                    {
                      "function_name": "to_byte_array",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              },
              "exported_from": "peripherals/gps.toit"
            },
            {
              "class_name": "Led",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "Led",
                    "return_path": "peripherals/led.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Creates an LED from " },
                            { "is_code": true, "text": "name" },
                            { "text": "." }
                          ],
                          [
                            { "text": "LED names are device specific. If " },
                            { "is_code": true, "text": "name" },
                            {
                              "text": " does not exist on the device, the constructor throws."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "fields": [{ "field_name": "id", "field_type": "any" }],
                  "methods": [
                    {
                      "function_name": "on",
                      "return_type": "none",
                      "function_toitdoc": [
                        { "statements": [[{ "text": "Turns on the LED." }]] }
                      ]
                    },
                    {
                      "function_name": "off",
                      "return_type": "none",
                      "function_toitdoc": [
                        { "statements": [[{ "text": "Turns off the LED." }]] }
                      ]
                    }
                  ]
                }
              },
              "exported_from": "peripherals/led.toit",
              "class_toitdoc": [{ "statements": [[{ "text": "An LED." }]] }]
            },
            {
              "class_name": "Touch",
              "class_structure": {
                "statics": [
                  { "function_name": "publisher", "return_type": "any" }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Touch",
                    "return_path": "peripherals/touch.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Creates a touch button from " },
                            { "is_code": true, "text": "name_" },
                            { "text": "." }
                          ],
                          [
                            {
                              "text": "Touch button names are device specific. If "
                            },
                            { "is_code": true, "text": "name_" },
                            {
                              "text": " does not exist on the device, the constructor throws."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "on_down",
                      "parameters": [
                        {
                          "param_name": "callback",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Lambda",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Lambda",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds " },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " as a callback to the on-down event. "
                              },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " is called when the button is pressed."
                              }
                            ],
                            [
                              {
                                "text": "Multiple callbacks can listen to the same event at the same time."
                              }
                            ],
                            [
                              {
                                "text": "Returns a handle that removes the callback."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "on_up",
                      "parameters": [
                        {
                          "param_name": "callback",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Lambda",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Lambda",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds " },
                              { "is_code": true, "text": "callback" },
                              { "text": " as a callback to the on-up event. " },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " is called when the button is released."
                              }
                            ],
                            [
                              {
                                "text": "Multiple callbacks can listen to the same event at the same time."
                              }
                            ],
                            [
                              {
                                "text": "Returns a handle that removes the tricker when called."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "on_click",
                      "parameters": [
                        {
                          "param_name": "callback",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Lambda",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Lambda",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds " },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " as a callback to the on-click event. "
                              },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " is called when the button is clicked."
                              }
                            ],
                            [
                              {
                                "text": "Multiple callbacks can listen to the same event at the same time."
                              }
                            ],
                            [
                              {
                                "text": "Returns a handle that removes the tricker when called."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "clear_calibration",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Clears the cached calibration data from the device."
                              }
                            ],
                            [
                              {
                                "text": "The button is recalibrated on the first use after the next boot."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "exported_from": "peripherals/touch.toit",
              "class_toitdoc": [
                { "statements": [[{ "text": "A touch button." }]] },
                {
                  "title": "Calibration",
                  "statements": [
                    [
                      {
                        "text": "The touch button is calibrated the first time it is created. The calibration is stored in persistent memory and used for subsequent touch buttons uses."
                      }
                    ],
                    [
                      {
                        "text": "Do not touch the button when it is calibrating. In case a button does not work, it may help to recalibrate it. See "
                      },
                      {
                        "text": "clear_calibration",
                        "path": "peripherals/touch.toit/Touch"
                      },
                      { "text": "." }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "Gyroscope",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "start",
                    "return_type": "Gyroscope",
                    "return_path": "peripherals/gyroscope.toit",
                    "function_toitdoc": [
                      { "statements": [[{ "text": "Starts the gyroscope." }]] }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "Point3f",
                      "return_path": "lib/point.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Read a value from the gyroscope." }],
                            [{ "text": "The result is the angular velocity." }],
                            [
                              {
                                "text": "It is undefined to read the gyroscope after it has been closed."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "close",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Closes the gyroscope." }],
                            [
                              {
                                "text": "It is advisable to close the gyroscope when it is not in use to minimize power consumption."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "exported_from": "peripherals/gyroscope.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "The gyroscope class can be used on devices with a gyroscope available."
                      }
                    ],
                    [
                      {
                        "text": "The flow of control for a gyroscope is as follows:"
                      }
                    ],
                    [{ "text": "1. Start the gyroscope." }],
                    [{ "text": "2. Make any number of readings." }],
                    [{ "text": "3. Close the gyroscope." }]
                  ]
                },
                {
                  "title": "Power Consumption",
                  "statements": [
                    [{ "text": "The gyroscope consumes power while active." }],
                    [
                      {
                        "text": "To minimize power consumption, close the gyroscope when not needed anymore, and create a new gyroscope instance when new readouts are needed."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "Accelerometer",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "start",
                    "return_type": "Accelerometer",
                    "return_path": "peripherals/accelerometer.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates an accelerometer that is already started."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "Point3f",
                      "return_path": "lib/point.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Reads a value from the accelerometer."
                              }
                            ],
                            [
                              {
                                "text": "The accelerometer must not be closed."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "close",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Closes the accelerometer." }],
                            [
                              {
                                "text": "Close the accelerometer when it is no longer in use."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "exported_from": "peripherals/accelerometer.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "The accelerometer class can be used on devices with an accelerometer available."
                      }
                    ],
                    [
                      {
                        "text": "The flow of control for an accelerometer is as follows:"
                      }
                    ],
                    [{ "text": "1. Start the accelerometer." }],
                    [{ "text": "2. Make any number of readings." }],
                    [{ "text": "3. Close the accelerometer." }]
                  ]
                },
                {
                  "title": "Power Consumption",
                  "statements": [
                    [
                      {
                        "text": "The accelerometer consumes power while active."
                      }
                    ],
                    [
                      {
                        "text": "To minimize power consumption, close the accelerometer when not needed anymore, and create a new accelerometer instance when new readouts are needed."
                      }
                    ]
                  ]
                }
              ]
            },
            {
              "class_name": "Magnetometer",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "start",
                    "return_type": "Magnetometer",
                    "return_path": "peripherals/magnetometer.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates a magnetometer that is already started."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "Point3f",
                      "return_path": "lib/point.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Reads a value from the magnetometer." }
                            ],
                            [{ "text": "The magnetometer must not be closed." }]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "close",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Closes the magnetometer." }],
                            [
                              {
                                "text": "Close the magnetometer when it is no longer in use."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "exported_from": "peripherals/magnetometer.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "The magnetometer class can be used on devices with a magnetometer available."
                      }
                    ],
                    [
                      {
                        "text": "The flow of control for a magnetometer is as follows:"
                      }
                    ],
                    [{ "text": "1. Start the magnetometer." }],
                    [{ "text": "2. Make any number of readings." }],
                    [{ "text": "3. Close the magnetometer." }]
                  ]
                },
                {
                  "title": "Power Consumption",
                  "statements": [
                    [
                      {
                        "text": "The magnetometer consumes power while active."
                      }
                    ],
                    [
                      {
                        "text": "To minimize power consumption, close the magnetometer when not needed anymore, and create a new magnetometer instance when new readouts are needed."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "top_level": {
            "export_functions": [
              {
                "function_name": "read_temperature",
                "exported_from": "peripherals/thp.toit",
                "return_type": "float",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Reads the temperature." }],
                      [{ "text": "The result is in degrees Celsius." }]
                    ]
                  }
                ]
              },
              {
                "function_name": "read_pressure",
                "exported_from": "peripherals/thp.toit",
                "return_type": "float",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Reads the pressure." }],
                      [{ "text": "The result is in Pa." }]
                    ]
                  }
                ]
              },
              {
                "function_name": "read_humidity",
                "exported_from": "peripherals/thp.toit",
                "return_type": "float",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Reads the humidity." }],
                      [
                        {
                          "text": "The reading is a relative humidity as a percentage in the range 1 - 100."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "read_battery_level",
                "exported_from": "peripherals/battery_level.toit",
                "return_type": "float",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "The battery level as a percentage in the interval 0-100."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "plugged_in",
                "exported_from": "peripherals/battery_level.toit",
                "return_type": "bool",
                "return_path": "core/objects.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Whether this device is plugged into an external power source."
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "peripherals.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Led",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "String",
                        "path": "core/string.toit"
                      }
                    ],
                    "return_type": "Led",
                    "return_path": "peripherals/led.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Creates an LED from " },
                            { "is_code": true, "text": "name" },
                            { "text": "." }
                          ],
                          [
                            { "text": "LED names are device specific. If " },
                            { "is_code": true, "text": "name" },
                            {
                              "text": " does not exist on the device, the constructor throws."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "fields": [{ "field_name": "id", "field_type": "any" }],
                  "methods": [
                    {
                      "function_name": "on",
                      "return_type": "none",
                      "function_toitdoc": [
                        { "statements": [[{ "text": "Turns on the LED." }]] }
                      ]
                    },
                    {
                      "function_name": "off",
                      "return_type": "none",
                      "function_toitdoc": [
                        { "statements": [[{ "text": "Turns off the LED." }]] }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [{ "statements": [[{ "text": "An LED." }]] }]
            }
          ],
          "module": "led.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Touch",
              "class_structure": {
                "statics": [
                  { "function_name": "publisher", "return_type": "any" }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "name_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Touch",
                    "return_path": "peripherals/touch.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            { "text": "Creates a touch button from " },
                            { "is_code": true, "text": "name_" },
                            { "text": "." }
                          ],
                          [
                            {
                              "text": "Touch button names are device specific. If "
                            },
                            { "is_code": true, "text": "name_" },
                            {
                              "text": " does not exist on the device, the constructor throws."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "on_down",
                      "parameters": [
                        {
                          "param_name": "callback",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Lambda",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Lambda",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds " },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " as a callback to the on-down event. "
                              },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " is called when the button is pressed."
                              }
                            ],
                            [
                              {
                                "text": "Multiple callbacks can listen to the same event at the same time."
                              }
                            ],
                            [
                              {
                                "text": "Returns a handle that removes the callback."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "on_up",
                      "parameters": [
                        {
                          "param_name": "callback",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Lambda",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Lambda",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds " },
                              { "is_code": true, "text": "callback" },
                              { "text": " as a callback to the on-up event. " },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " is called when the button is released."
                              }
                            ],
                            [
                              {
                                "text": "Multiple callbacks can listen to the same event at the same time."
                              }
                            ],
                            [
                              {
                                "text": "Returns a handle that removes the tricker when called."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "on_click",
                      "parameters": [
                        {
                          "param_name": "callback",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Lambda",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "Lambda",
                      "return_path": "core/objects.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Adds " },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " as a callback to the on-click event. "
                              },
                              { "is_code": true, "text": "callback" },
                              {
                                "text": " is called when the button is clicked."
                              }
                            ],
                            [
                              {
                                "text": "Multiple callbacks can listen to the same event at the same time."
                              }
                            ],
                            [
                              {
                                "text": "Returns a handle that removes the tricker when called."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "clear_calibration",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Clears the cached calibration data from the device."
                              }
                            ],
                            [
                              {
                                "text": "The button is recalibrated on the first use after the next boot."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [
                { "statements": [[{ "text": "A touch button." }]] },
                {
                  "title": "Calibration",
                  "statements": [
                    [
                      {
                        "text": "The touch button is calibrated the first time it is created. The calibration is stored in persistent memory and used for subsequent touch buttons uses."
                      }
                    ],
                    [
                      {
                        "text": "Do not touch the button when it is calibrating. In case a button does not work, it may help to recalibrate it. See "
                      },
                      {
                        "text": "clear_calibration",
                        "path": "peripherals/touch.toit/Touch"
                      },
                      { "text": "." }
                    ]
                  ]
                }
              ]
            }
          ],
          "module": "touch.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "read_battery_level",
                "return_type": "float",
                "return_path": "core/numbers.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "The battery level as a percentage in the interval 0-100."
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "function_name": "plugged_in",
                "return_type": "bool",
                "return_path": "core/objects.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Whether this device is plugged into an external power source."
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "battery_level.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Gyroscope",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "start",
                    "return_type": "Gyroscope",
                    "return_path": "peripherals/gyroscope.toit",
                    "function_toitdoc": [
                      { "statements": [[{ "text": "Starts the gyroscope." }]] }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "Point3f",
                      "return_path": "lib/point.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Read a value from the gyroscope." }],
                            [{ "text": "The result is the angular velocity." }],
                            [
                              {
                                "text": "It is undefined to read the gyroscope after it has been closed."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "close",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Closes the gyroscope." }],
                            [
                              {
                                "text": "It is advisable to close the gyroscope when it is not in use to minimize power consumption."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "The gyroscope class can be used on devices with a gyroscope available."
                      }
                    ],
                    [
                      {
                        "text": "The flow of control for a gyroscope is as follows:"
                      }
                    ],
                    [{ "text": "1. Start the gyroscope." }],
                    [{ "text": "2. Make any number of readings." }],
                    [{ "text": "3. Close the gyroscope." }]
                  ]
                },
                {
                  "title": "Power Consumption",
                  "statements": [
                    [{ "text": "The gyroscope consumes power while active." }],
                    [
                      {
                        "text": "To minimize power consumption, close the gyroscope when not needed anymore, and create a new gyroscope instance when new readouts are needed."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "module": "gyroscope.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Accelerometer",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "start",
                    "return_type": "Accelerometer",
                    "return_path": "peripherals/accelerometer.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates an accelerometer that is already started."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "read",
                      "return_type": "Point3f",
                      "return_path": "lib/point.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Reads a value from the accelerometer."
                              }
                            ],
                            [
                              {
                                "text": "The accelerometer must not be closed."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "close",
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Closes the accelerometer." }],
                            [
                              {
                                "text": "Close the accelerometer when it is no longer in use."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "The accelerometer class can be used on devices with an accelerometer available."
                      }
                    ],
                    [
                      {
                        "text": "The flow of control for an accelerometer is as follows:"
                      }
                    ],
                    [{ "text": "1. Start the accelerometer." }],
                    [{ "text": "2. Make any number of readings." }],
                    [{ "text": "3. Close the accelerometer." }]
                  ]
                },
                {
                  "title": "Power Consumption",
                  "statements": [
                    [
                      {
                        "text": "The accelerometer consumes power while active."
                      }
                    ],
                    [
                      {
                        "text": "To minimize power consumption, close the accelerometer when not needed anymore, and create a new accelerometer instance when new readouts are needed."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "module": "accelerometer.toit"
        },
        {
          "top_level": {
            "module_globals": [
              { "global_name": "ON_DOWN" },
              { "global_name": "ON_UP" },
              { "global_name": "ON_CLICK" }
            ]
          },
          "module": "touch_topics.toit"
        }
      ]
    },
    {
      "lib_name": "crypto",
      "lib_modules": [
        {
          "module_classes": [
            {
              "class_name": "Sha256",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "Sha256",
                    "return_path": "crypto/sha256.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates an empty Sha256 object that can have content added to it."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Adds a string or byte array to the hash."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Calculates the SHA256 hash." }]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "extends": "Checksum",
              "extend_path": "crypto/checksum.toit"
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "sha256",
                "parameters": [
                  {
                    "param_name": "collection",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "from",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "to",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "ByteArray",
                "return_path": "core/collections.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Computes the SHA256 hash of the given " },
                        { "is_code": true, "text": "collection" },
                        { "text": "." }
                      ],
                      [
                        {
                          "text": "The collection must be a string or byte array."
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sha256.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "encode_16_11",
                "parameters": [
                  {
                    "param_name": "in",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              },
              {
                "function_name": "fix_16_11",
                "parameters": [
                  {
                    "param_name": "in",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  }
                ],
                "return_type": "any"
              }
            ]
          },
          "module": "hamming.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Checksum",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "get",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "checksum",
                "parameters": [
                  {
                    "param_name": "summer",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Checksum",
                    "path": "crypto/checksum.toit"
                  },
                  {
                    "param_name": "collection",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "from",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "to",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "ByteArray",
                "return_path": "core/collections.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Computes the hash of the given " },
                        { "is_code": true, "text": "collection" },
                        { "text": "." }
                      ],
                      [
                        { "text": "The " },
                        { "is_code": true, "text": "collection" },
                        { "text": " must be a string or a byte array." }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "checksum.toit"
        },
        {
          "export_classes": [
            {
              "class_name": "Checksum",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "get",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              },
              "exported_from": "crypto/checksum.toit"
            }
          ],
          "top_level": {
            "export_functions": [
              {
                "function_name": "checksum",
                "exported_from": "crypto/checksum.toit",
                "parameters": [
                  {
                    "param_name": "summer",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "Checksum",
                    "path": "crypto/checksum.toit"
                  },
                  {
                    "param_name": "collection",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "from",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "to",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "ByteArray",
                "return_path": "core/collections.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Computes the hash of the given " },
                        { "is_code": true, "text": "collection" },
                        { "text": "." }
                      ],
                      [
                        { "text": "The " },
                        { "is_code": true, "text": "collection" },
                        { "text": " must be a string or a byte array." }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "crypto.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Adler32",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "Adler32",
                    "return_path": "crypto/adler32.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "get",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              },
              "extends": "Checksum",
              "extend_path": "crypto/checksum.toit"
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "adler32",
                "parameters": [
                  {
                    "param_name": "collection",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "from",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "to",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "ByteArray",
                "return_path": "core/collections.toit"
              }
            ]
          },
          "module": "adler32.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Crc32",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Adds a string or byte array to the hash."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Returns the CRC32 checksum as a 4 element byte array in little-endian order."
                              }
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "extends": "Checksum",
              "extend_path": "crypto/checksum.toit"
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "crc32",
                "parameters": [
                  {
                    "param_name": "collection",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "from",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "to",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "ByteArray",
                "return_path": "core/collections.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Computes the CRC32 checksum of the given " },
                        { "is_code": true, "text": "collection" },
                        { "text": "." }
                      ],
                      [
                        { "text": "The " },
                        { "is_code": true, "text": "collection" },
                        { "text": " must be a string or byte array." }
                      ],
                      [
                        {
                          "text": "Returns the checksum as a 4 element byte array in little endian order."
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "crc32.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Sha1",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "return_type": "Sha1",
                    "return_path": "crypto/sha1.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [
                            {
                              "text": "Creates an empty Sha1 object that can have content added to it."
                            }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "add",
                      "parameters": [
                        {
                          "param_name": "collection",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "none",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              {
                                "text": "Adds a string or byte array to the hash."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "get",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [{ "text": "Calculates the SHA1 hash." }]
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "extends": "Checksum",
              "extend_path": "crypto/checksum.toit"
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "sha1",
                "parameters": [
                  {
                    "param_name": "collection",
                    "is_block": false,
                    "is_named": false,
                    "is_required": true,
                    "param_type": "any"
                  },
                  {
                    "param_name": "from",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  },
                  {
                    "param_name": "to",
                    "is_block": false,
                    "is_named": false,
                    "is_required": false,
                    "param_type": "int",
                    "path": "core/numbers.toit"
                  }
                ],
                "return_type": "ByteArray",
                "return_path": "core/collections.toit",
                "function_toitdoc": [
                  {
                    "statements": [
                      [
                        { "text": "Calculates the SHA1 hash of the given " },
                        { "is_code": true, "text": "collection" },
                        { "text": "." }
                      ],
                      [
                        {
                          "text": "The collection must be a string or a byte array."
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sha1.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "AesCbc",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "encrypt",
                    "parameters": [
                      {
                        "param_name": "key",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      },
                      {
                        "param_name": "initialization_vector",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "AesCbc",
                    "return_path": "crypto/aes.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [{ "text": "Creates an Aes state for encryption." }],
                          [
                            { "text": "The " },
                            { "is_code": true, "text": "key" },
                            { "text": " must be 32 secret bytes and the " },
                            {
                              "is_code": true,
                              "text": "initialization_vector"
                            },
                            {
                              "text": " must be 16 random bytes. The initialization vector must not be reused."
                            }
                          ]
                        ]
                      }
                    ]
                  },
                  {
                    "function_name": "decrypt",
                    "parameters": [
                      {
                        "param_name": "key",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      },
                      {
                        "param_name": "initialization_vector",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "AesCbc",
                    "return_path": "crypto/aes.toit",
                    "function_toitdoc": [
                      {
                        "statements": [
                          [{ "text": "Creates an Aes state for decryption." }],
                          [
                            { "text": "The " },
                            { "is_code": true, "text": "key" },
                            { "text": " must be 32 secret bytes and the " },
                            {
                              "is_code": true,
                              "text": "initialization_vector"
                            },
                            { "text": " must be 16 bytes." }
                          ]
                        ]
                      }
                    ]
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "encrypt",
                      "parameters": [
                        {
                          "param_name": "cleartext",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "ByteArray",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Encrypts the given " },
                              { "is_code": true, "text": "cleartext" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The size of the " },
                              { "is_code": true, "text": "cleartext" },
                              { "text": " must be a multiple of 16." }
                            ],
                            [
                              {
                                "text": "Returns a byte array with the encrypted data."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    {
                      "function_name": "decrypt",
                      "parameters": [
                        {
                          "param_name": "ciphertext",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "ByteArray",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit",
                      "function_toitdoc": [
                        {
                          "statements": [
                            [
                              { "text": "Decrypts the given " },
                              { "is_code": true, "text": "ciphertext" },
                              { "text": "." }
                            ],
                            [
                              { "text": "The size of the " },
                              { "is_code": true, "text": "ciphertext" },
                              { "text": " must be a multiple of 16." }
                            ],
                            [
                              {
                                "text": "Returns a byte array with the decrypted data."
                              }
                            ]
                          ]
                        }
                      ]
                    },
                    { "function_name": "close", "return_type": "none" }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "See https://tls.mbed.org/kb/how-to/encrypt-with-aes-cbc"
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "module": "aes.toit"
        }
      ]
    },
    {
      "lib_name": "coap",
      "lib_modules": [
        {
          "module_classes": [
            {
              "class_name": "DatagramTransport",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "socket_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Socket",
                        "path": "net/udp.toit"
                      }
                    ],
                    "return_type": "DatagramTransport",
                    "return_path": "coap/datagram.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "msg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "DatagramMessage",
                          "path": "coap/datagram.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "read",
                      "return_type": "Response",
                      "return_path": "coap/transport.toit"
                    },
                    { "function_name": "close", "return_type": "none" },
                    {
                      "function_name": "new_message",
                      "parameters": [
                        {
                          "param_name": "reliable",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Message",
                      "return_path": "coap/message.toit"
                    },
                    {
                      "function_name": "reliable",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "mtu",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "DatagramMessage",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "data",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "DatagramMessage",
                    "return_path": "coap/datagram.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "type",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "DatagramMessage",
                    "return_path": "coap/datagram.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "type", "field_type": "any" },
                    { "field_name": "message_id", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "to_byte_array",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              },
              "extends": "Message",
              "extend_path": "coap/message.toit"
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "TYPE_CONFIRMABLE" },
              { "global_name": "TYPE_NON_CONFIRMABLE" },
              { "global_name": "TYPE_ACKNOWLEDGEMENT" },
              { "global_name": "TYPE_RESET" }
            ]
          },
          "module": "datagram.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Token",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "create_random",
                    "return_type": "Token",
                    "return_path": "coap/message.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Token",
                    "return_path": "coap/message.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "bytes", "field_type": "any" },
                    { "field_name": "hash_code", "field_type": "any" }
                  ],
                  "methods": [
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Token",
                          "path": "coap/message.toit"
                        }
                      ],
                      "return_type": "any"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Message",
              "class_structure": {
                "members": {
                  "fields": [
                    { "field_name": "code", "field_type": "any" },
                    { "field_name": "token", "field_type": "Token" },
                    { "field_name": "payload", "field_type": "any" },
                    { "field_name": "options", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "is_empty", "return_type": "any" },
                    { "function_name": "code_class", "return_type": "any" },
                    { "function_name": "code_detail", "return_type": "any" },
                    {
                      "function_name": "add_path",
                      "parameters": [
                        {
                          "param_name": "path",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "none"
                    }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "CODE_GET" },
              { "global_name": "CODE_POST" },
              { "global_name": "CODE_PUT" },
              { "global_name": "CODE_CONTENT" },
              { "global_name": "CODE_GATEWAY_TIMEOUT" },
              { "global_name": "CODE_NOT_FOUND" },
              { "global_name": "CODE_CLASS_REQUEST" },
              { "global_name": "CODE_CLASS_SUCCESS" },
              { "global_name": "CODE_CLASS_CLIENT_ERROR" },
              { "global_name": "CODE_CLASS_SERVER_ERROR" }
            ]
          },
          "module": "message.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Response",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "message",
                    "parameters": [
                      {
                        "param_name": "message",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Message",
                        "path": "coap/message.toit"
                      }
                    ],
                    "return_type": "Response",
                    "return_path": "coap/transport.toit"
                  },
                  {
                    "function_name": "error",
                    "parameters": [
                      {
                        "param_name": "token",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Token",
                        "path": "coap/message.toit"
                      },
                      {
                        "param_name": "error",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Response",
                    "return_path": "coap/transport.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "token", "field_type": "Token" },
                    { "field_name": "message", "field_type": "Message" },
                    { "field_name": "error", "field_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "Transport",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "msg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Message",
                          "path": "coap/message.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read",
                      "return_type": "Response",
                      "return_path": "coap/transport.toit"
                    },
                    { "function_name": "close", "return_type": "any" },
                    {
                      "function_name": "new_message",
                      "parameters": [
                        {
                          "param_name": "reliable",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Message",
                      "return_path": "coap/message.toit"
                    },
                    {
                      "function_name": "reliable",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "mtu",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              }
            }
          ],
          "module": "transport.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Option",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "string",
                    "parameters": [
                      {
                        "param_name": "number",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "str",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Option",
                    "return_path": "coap/option.toit"
                  },
                  {
                    "function_name": "uint",
                    "parameters": [
                      {
                        "param_name": "number",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "u",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Option",
                    "return_path": "coap/option.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "number",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "value",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Option",
                    "return_path": "coap/option.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "number", "field_type": "any" },
                    { "field_name": "value", "field_type": "any" }
                  ],
                  "methods": [
                    { "function_name": "as_string", "return_type": "any" },
                    { "function_name": "as_uint", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "OPTION_OBSERVE" },
              { "global_name": "OPTION_URI_PATH" },
              { "global_name": "OPTION_BLOCK_2" },
              { "global_name": "OPTION_SIZE_2" }
            ]
          },
          "module": "option.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Client",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "transport_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transport",
                        "path": "coap/transport.toit"
                      },
                      {
                        "param_name": "auto_run",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Client",
                    "return_path": "coap/client.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "reliable",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    { "function_name": "close", "return_type": "none" },
                    {
                      "function_name": "is_closed",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "new_message",
                      "parameters": [
                        {
                          "param_name": "reliable",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "unary",
                      "parameters": [
                        {
                          "param_name": "msg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Message",
                          "path": "coap/message.toit"
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Message",
                      "return_path": "coap/message.toit"
                    },
                    {
                      "function_name": "stream",
                      "parameters": [
                        {
                          "param_name": "msg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Message",
                          "path": "coap/message.toit"
                        },
                        {
                          "param_name": "on_message",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "path",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "post",
                      "parameters": [
                        {
                          "param_name": "path",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "payload",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "ByteArray",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put",
                      "parameters": [
                        {
                          "param_name": "path",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "payload",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "ByteArray",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "max_suggested_payload_size",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "observe",
                      "parameters": [
                        {
                          "param_name": "path",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "on_message",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "run", "return_type": "any" }
                  ]
                }
              },
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "CoAP client to talk with a CoAP endpoint. The client is initiated with"
                      }
                    ],
                    [
                      {
                        "text": "the underlying platform-specific transport, e.g. Datagram."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "module": "client.toit"
        },
        {
          "export_classes": [
            {
              "class_name": "Client",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "transport_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "Transport",
                        "path": "coap/transport.toit"
                      },
                      {
                        "param_name": "auto_run",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Client",
                    "return_path": "coap/client.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "reliable",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    { "function_name": "close", "return_type": "none" },
                    {
                      "function_name": "is_closed",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "new_message",
                      "parameters": [
                        {
                          "param_name": "reliable",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "unary",
                      "parameters": [
                        {
                          "param_name": "msg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Message",
                          "path": "coap/message.toit"
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Message",
                      "return_path": "coap/message.toit"
                    },
                    {
                      "function_name": "stream",
                      "parameters": [
                        {
                          "param_name": "msg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Message",
                          "path": "coap/message.toit"
                        },
                        {
                          "param_name": "on_message",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "get",
                      "parameters": [
                        {
                          "param_name": "path",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "post",
                      "parameters": [
                        {
                          "param_name": "path",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "payload",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "ByteArray",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "put",
                      "parameters": [
                        {
                          "param_name": "path",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "payload",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "ByteArray",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "max_suggested_payload_size",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "observe",
                      "parameters": [
                        {
                          "param_name": "path",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "on_message",
                          "is_block": true,
                          "is_named": false,
                          "is_required": true
                        },
                        {
                          "param_name": "token_id",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "none"
                    },
                    { "function_name": "run", "return_type": "any" }
                  ]
                }
              },
              "exported_from": "coap/client.toit",
              "class_toitdoc": [
                {
                  "statements": [
                    [
                      {
                        "text": "CoAP client to talk with a CoAP endpoint. The client is initiated with"
                      }
                    ],
                    [
                      {
                        "text": "the underlying platform-specific transport, e.g. Datagram."
                      }
                    ]
                  ]
                }
              ]
            }
          ],
          "module": "coap.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "StreamTransport",
              "class_structure": {
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "socket_",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      },
                      {
                        "param_name": "send_csm",
                        "is_block": false,
                        "is_named": true,
                        "is_required": false,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "StreamTransport",
                    "return_path": "coap/stream.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "msg",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "StreamMessage",
                          "path": "coap/stream.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "read",
                      "return_type": "Response",
                      "return_path": "coap/transport.toit"
                    },
                    { "function_name": "close", "return_type": "none" },
                    {
                      "function_name": "new_message",
                      "parameters": [
                        {
                          "param_name": "reliable",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Message",
                      "return_path": "coap/message.toit"
                    },
                    {
                      "function_name": "reliable",
                      "return_type": "bool",
                      "return_path": "core/objects.toit"
                    },
                    {
                      "function_name": "mtu",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "StreamMessage",
              "class_structure": {
                "statics": [
                  { "function_name": "_1_BYTE_MARKER", "return_type": "any" },
                  { "function_name": "_1_BYTE_OFFSET", "return_type": "any" },
                  { "function_name": "_2_BYTE_MARKER", "return_type": "any" },
                  { "function_name": "_2_BYTE_OFFSET", "return_type": "any" },
                  { "function_name": "_4_BYTE_MARKER", "return_type": "any" },
                  { "function_name": "_4_BYTE_OFFSET", "return_type": "any" },
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "reader",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "BufferedReader",
                        "path": "lib/reader.toit"
                      }
                    ],
                    "return_type": "StreamMessage",
                    "return_path": "coap/stream.toit"
                  }
                ],
                "members": {
                  "methods": [
                    {
                      "function_name": "to_byte_array",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    }
                  ]
                }
              },
              "extends": "Message",
              "extend_path": "coap/message.toit"
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "CODE_CSM" },
              { "global_name": "CODE_PING" },
              { "global_name": "CODE_PONG" },
              { "global_name": "CODE_CLASS_SIGNALING_CODES" }
            ]
          },
          "module": "stream.toit"
        }
      ]
    },
    {
      "lib_name": "net",
      "lib_modules": [
        {
          "module_classes": [
            {
              "class_name": "Interface",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "udp_open",
                      "parameters": [
                        {
                          "param_name": "port",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Socket",
                      "return_path": "net/udp.toit"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Datagram",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "Datagram",
                    "return_path": "net/udp.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "data",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      },
                      {
                        "param_name": "address",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "SocketAddress",
                        "path": "net/socket_address.toit"
                      }
                    ],
                    "return_type": "Datagram",
                    "return_path": "net/udp.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "data", "field_type": "ByteArray" },
                    { "field_name": "address", "field_type": "SocketAddress" }
                  ],
                  "methods": [
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "Socket",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "local_address",
                      "return_type": "SocketAddress",
                      "return_path": "net/socket_address.toit"
                    },
                    {
                      "function_name": "receive",
                      "return_type": "Datagram",
                      "return_path": "net/udp.toit"
                    },
                    {
                      "function_name": "send",
                      "parameters": [
                        {
                          "param_name": "datagram",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "Datagram",
                          "path": "net/udp.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "connect",
                      "parameters": [
                        {
                          "param_name": "address",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "SocketAddress",
                          "path": "net/socket_address.toit"
                        }
                      ],
                      "return_type": "none"
                    },
                    {
                      "function_name": "read",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "ByteArray",
                          "path": "core/collections.toit"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    { "function_name": "close", "return_type": "none" },
                    {
                      "function_name": "mtu",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    }
                  ]
                }
              }
            }
          ],
          "module": "udp.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "SocketAddress",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "SocketAddress",
                    "return_path": "net/socket_address.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "ip",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "IpAddress",
                        "path": "net/ip_address.toit"
                      },
                      {
                        "param_name": "port",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "SocketAddress",
                    "return_path": "net/socket_address.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "ip", "field_type": "IpAddress" },
                    { "field_name": "port", "field_type": "int" }
                  ],
                  "methods": [
                    {
                      "function_name": "print_string",
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "socket_address.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "IpAddress",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "IpAddress",
                    "return_path": "net/ip_address.toit"
                  },
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "ip",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "IpAddress",
                    "return_path": "net/ip_address.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "raw",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "IpAddress",
                    "return_path": "net/ip_address.toit"
                  }
                ],
                "members": {
                  "fields": [{ "field_name": "raw", "field_type": "any" }],
                  "methods": [
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "hash_code", "return_type": "any" },
                    { "function_name": "print_string", "return_type": "any" },
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "ip_address.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Interface",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "tcp_connect",
                      "parameters": [
                        {
                          "param_name": "host",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "port",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "Socket",
                      "return_path": "net/tcp.toit"
                    },
                    {
                      "function_name": "resolve",
                      "parameters": [
                        {
                          "param_name": "host",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        }
                      ],
                      "return_type": "List",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "udp_open",
                      "parameters": [
                        {
                          "param_name": "port",
                          "is_block": false,
                          "is_named": true,
                          "is_required": false,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "Socket",
                      "return_path": "net/udp.toit"
                    },
                    {
                      "function_name": "tcp_connect",
                      "parameters": [
                        {
                          "param_name": "address",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "SocketAddress",
                          "path": "net/socket_address.toit"
                        }
                      ],
                      "return_type": "Socket",
                      "return_path": "net/tcp.toit"
                    },
                    {
                      "function_name": "tcp_listen",
                      "parameters": [
                        {
                          "param_name": "port",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "ServerSocket",
                      "return_path": "net/tcp.toit"
                    }
                  ]
                }
              }
            }
          ],
          "export_classes": [
            {
              "class_name": "IpAddress",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "IpAddress",
                    "return_path": "net/ip_address.toit"
                  },
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "ip",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "IpAddress",
                    "return_path": "net/ip_address.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "raw",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "IpAddress",
                    "return_path": "net/ip_address.toit"
                  }
                ],
                "members": {
                  "fields": [{ "field_name": "raw", "field_type": "any" }],
                  "methods": [
                    {
                      "function_name": "==",
                      "parameters": [
                        {
                          "param_name": "other",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        }
                      ],
                      "return_type": "any"
                    },
                    { "function_name": "hash_code", "return_type": "any" },
                    { "function_name": "print_string", "return_type": "any" },
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              },
              "exported_from": "net/ip_address.toit"
            },
            {
              "class_name": "SocketAddress",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "deserialize",
                    "parameters": [
                      {
                        "param_name": "bytes",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "ByteArray",
                        "path": "core/collections.toit"
                      }
                    ],
                    "return_type": "SocketAddress",
                    "return_path": "net/socket_address.toit"
                  }
                ],
                "constructors": [
                  {
                    "function_name": "constructor",
                    "parameters": [
                      {
                        "param_name": "ip",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "IpAddress",
                        "path": "net/ip_address.toit"
                      },
                      {
                        "param_name": "port",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "int",
                        "path": "core/numbers.toit"
                      }
                    ],
                    "return_type": "SocketAddress",
                    "return_path": "net/socket_address.toit"
                  }
                ],
                "members": {
                  "fields": [
                    { "field_name": "ip", "field_type": "IpAddress" },
                    { "field_name": "port", "field_type": "int" }
                  ],
                  "methods": [
                    {
                      "function_name": "print_string",
                      "return_type": "String",
                      "return_path": "core/string.toit"
                    },
                    { "function_name": "to_byte_array", "return_type": "any" }
                  ]
                }
              },
              "exported_from": "net/socket_address.toit"
            }
          ],
          "top_level": {
            "module_functions": [
              {
                "function_name": "open",
                "return_type": "Interface",
                "return_path": "net/net.toit"
              }
            ]
          },
          "module": "net.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Interface",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "tcp_connect",
                      "parameters": [
                        {
                          "param_name": "host",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "String",
                          "path": "core/string.toit"
                        },
                        {
                          "param_name": "port",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "Socket",
                      "return_path": "net/tcp.toit"
                    },
                    {
                      "function_name": "tcp_connect",
                      "parameters": [
                        {
                          "param_name": "address",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "SocketAddress",
                          "path": "net/socket_address.toit"
                        }
                      ],
                      "return_type": "Socket",
                      "return_path": "net/tcp.toit"
                    },
                    {
                      "function_name": "tcp_listen",
                      "parameters": [
                        {
                          "param_name": "port",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "ServerSocket",
                      "return_path": "net/tcp.toit"
                    }
                  ]
                }
              }
            },
            {
              "class_name": "Socket",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "local_address",
                      "return_type": "SocketAddress",
                      "return_path": "net/socket_address.toit"
                    },
                    {
                      "function_name": "peer_address",
                      "return_type": "SocketAddress",
                      "return_path": "net/socket_address.toit"
                    },
                    {
                      "function_name": "set_no_delay",
                      "parameters": [
                        {
                          "param_name": "enabled",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "bool",
                          "path": "core/objects.toit"
                        }
                      ],
                      "return_type": "any"
                    },
                    {
                      "function_name": "read",
                      "return_type": "ByteArray",
                      "return_path": "core/collections.toit"
                    },
                    {
                      "function_name": "write",
                      "parameters": [
                        {
                          "param_name": "data",
                          "is_block": false,
                          "is_named": false,
                          "is_required": true,
                          "param_type": "any"
                        },
                        {
                          "param_name": "from",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        },
                        {
                          "param_name": "to",
                          "is_block": false,
                          "is_named": false,
                          "is_required": false,
                          "param_type": "int",
                          "path": "core/numbers.toit"
                        }
                      ],
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    {
                      "function_name": "mtu",
                      "return_type": "int",
                      "return_path": "core/numbers.toit"
                    },
                    { "function_name": "close_write", "return_type": "any" },
                    { "function_name": "close", "return_type": "any" }
                  ]
                }
              }
            },
            {
              "class_name": "ServerSocket",
              "class_structure": {
                "members": {
                  "methods": [
                    {
                      "function_name": "local_address",
                      "return_type": "SocketAddress",
                      "return_path": "net/socket_address.toit"
                    },
                    {
                      "function_name": "accept",
                      "return_type": "Socket",
                      "return_path": "net/tcp.toit"
                    },
                    { "function_name": "close", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "module": "tcp.toit"
        },
        {
          "top_level": {
            "module_functions": [
              {
                "function_name": "open",
                "return_type": "Interface",
                "return_path": "net/net.toit"
              }
            ],
            "module_globals": [
              { "global_name": "RPC_NETWORK_OPEN" },
              { "global_name": "RPC_NETWORK_DISCONNECT" },
              { "global_name": "RPC_NETWORK_RESOLVE" },
              { "global_name": "RPC_NETWORK_UDP_OPEN" },
              { "global_name": "RPC_NETWORK_TCP_CONNECT" },
              { "global_name": "RPC_NETWORK_TCP_LISTEN" },
              { "global_name": "RPC_NETWORK_TCP_PEER_ADDRESS" },
              { "global_name": "RPC_NETWORK_TCP_SET_NO_DELAY" },
              { "global_name": "RPC_NETWORK_TCP_CLOSE_WRITE" },
              { "global_name": "RPC_NETWORK_TCP_ACCEPT" },
              { "global_name": "RPC_NETWORK_UDP_CONNECT" },
              { "global_name": "RPC_NETWORK_UDP_RECEIVE" },
              { "global_name": "RPC_NETWORK_UDP_SEND" },
              { "global_name": "RPC_NETWORK_SOCKET_WRITE" },
              { "global_name": "RPC_NETWORK_SOCKET_READ" },
              { "global_name": "RPC_NETWORK_SOCKET_LOCAL_ADDRESS" },
              { "global_name": "RPC_NETWORK_SOCKET_CLOSE" },
              { "global_name": "RPC_NETWORK_SOCKET_MTU" }
            ]
          },
          "module": "impl.toit"
        },
        {
          "module_classes": [
            {
              "class_name": "Certificate",
              "class_structure": {
                "statics": [
                  {
                    "function_name": "parse",
                    "parameters": [
                      {
                        "param_name": "input",
                        "is_block": false,
                        "is_named": false,
                        "is_required": true,
                        "param_type": "any"
                      }
                    ],
                    "return_type": "Certificate",
                    "return_path": "net/x509.toit"
                  }
                ],
                "members": {
                  "methods": [
                    { "function_name": "common_name", "return_type": "any" }
                  ]
                }
              }
            }
          ],
          "top_level": {
            "module_globals": [
              { "global_name": "TRUSTED_ROOTS" },
              { "global_name": "DIGICERT_ROOT" },
              { "global_name": "DIGICERT_GLOBAL" },
              { "global_name": "DIGICERT_GLOBAL_G2" }
            ]
          },
          "module": "x509.toit"
        }
      ]
    },
    {
      "lib_name": "matthew_welch",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "Tiny characters 0 to 7f, 2140 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "tiny.toit"
        }
      ]
    },
    {
      "lib_name": "clear_sans",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 0 to 7f, 1432 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 80 to ff, 1629 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 100 to 17f, 2341 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 180 to 24f, 1664 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 250 to 2af, 298 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 2b0 to 2ff, 309 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 370 to 3ff, 175 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 1e00 to 1eff, 4290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 2000 to 206f, 474 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 2070 to 209f, 154 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 20a0 to 20cf, 212 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 2100 to 214f, 212 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_italic characters 2200 to 22ff, 350 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_08_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 0 to 7f, 2253 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 80 to ff, 2636 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 100 to 17f, 3853 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 180 to 24f, 2750 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 250 to 2af, 409 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 2b0 to 2ff, 333 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 370 to 3ff, 192 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 1e00 to 1eff, 7178 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 2000 to 206f, 559 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 2070 to 209f, 162 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 20a0 to 20cf, 296 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 2100 to 214f, 276 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_italic characters 2200 to 22ff, 514 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_14_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 0 to 7f, 1390 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 80 to ff, 1599 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 100 to 17f, 2237 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 180 to 24f, 2057 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 250 to 2af, 330 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 2b0 to 2ff, 305 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 370 to 3ff, 171 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 1e00 to 1eff, 4152 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 2000 to 206f, 471 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 2070 to 209f, 154 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 20a0 to 20cf, 209 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 2100 to 214f, 210 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold characters 2200 to 22ff, 405 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_08_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 0 to 7f, 3418 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 80 to ff, 4098 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 100 to 17f, 5802 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 180 to 24f, 5382 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 250 to 2af, 648 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 2b0 to 2ff, 391 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 370 to 3ff, 212 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 1e00 to 1eff, 11131 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 2000 to 206f, 731 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 2070 to 209f, 180 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 20a0 to 20cf, 361 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 2100 to 214f, 385 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold characters 2200 to 22ff, 922 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_24_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 0 to 7f, 2332 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 80 to ff, 2745 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 100 to 17f, 3957 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 180 to 24f, 2799 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 250 to 2af, 416 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 2b0 to 2ff, 337 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 370 to 3ff, 199 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 1e00 to 1eff, 7445 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 2000 to 206f, 592 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 2070 to 209f, 167 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 20a0 to 20cf, 295 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 2100 to 214f, 283 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold_italic characters 2200 to 22ff, 511 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_14_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 0 to 7f, 1824 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 80 to ff, 2131 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 100 to 17f, 3042 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 180 to 24f, 2146 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 250 to 2af, 352 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 2b0 to 2ff, 321 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 370 to 3ff, 189 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 1e00 to 1eff, 5533 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 2000 to 206f, 527 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 2070 to 209f, 164 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 20a0 to 20cf, 254 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 2100 to 214f, 252 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold_italic characters 2200 to 22ff, 439 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_10_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 0 to 7f, 2819 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 80 to ff, 3312 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 100 to 17f, 4752 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 180 to 24f, 3366 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 250 to 2af, 470 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 2b0 to 2ff, 337 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 370 to 3ff, 205 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 1e00 to 1eff, 8952 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 2000 to 206f, 601 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 2070 to 209f, 166 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 20a0 to 20cf, 336 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 2100 to 214f, 321 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_italic characters 2200 to 22ff, 563 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_18_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 0 to 7f, 2018 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 80 to ff, 2394 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 100 to 17f, 3426 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 180 to 24f, 2457 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 250 to 2af, 366 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 2b0 to 2ff, 323 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 370 to 3ff, 185 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 1e00 to 1eff, 6422 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 2000 to 206f, 517 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 2070 to 209f, 157 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 20a0 to 20cf, 264 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 2100 to 214f, 267 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_italic characters 2200 to 22ff, 484 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_12_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 0 to 7f, 1637 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 80 to ff, 1902 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 100 to 17f, 2627 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 180 to 24f, 2415 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 250 to 2af, 361 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 2b0 to 2ff, 307 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 370 to 3ff, 174 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 1e00 to 1eff, 4847 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 2000 to 206f, 499 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 2070 to 209f, 154 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 20a0 to 20cf, 244 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 2100 to 214f, 234 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_bold characters 2200 to 22ff, 445 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_10_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 0 to 7f, 1538 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 80 to ff, 1808 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 100 to 17f, 2448 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 180 to 24f, 2273 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 250 to 2af, 345 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 2b0 to 2ff, 303 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 370 to 3ff, 167 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 1e00 to 1eff, 4554 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 2000 to 206f, 471 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 2070 to 209f, 148 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 20a0 to 20cf, 230 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 2100 to 214f, 226 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10 characters 2200 to 22ff, 425 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_10.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 0 to 7f, 3762 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 80 to ff, 4420 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 100 to 17f, 6468 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 180 to 24f, 4576 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 250 to 2af, 577 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 2b0 to 2ff, 414 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 370 to 3ff, 237 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 1e00 to 1eff, 12033 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 2000 to 206f, 799 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 2070 to 209f, 196 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 20a0 to 20cf, 414 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 2100 to 214f, 414 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_bold_italic characters 2200 to 22ff, 834 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_24_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 0 to 7f, 1744 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 80 to ff, 2034 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 100 to 17f, 2900 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 180 to 24f, 2069 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 250 to 2af, 326 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 2b0 to 2ff, 313 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 370 to 3ff, 181 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 1e00 to 1eff, 5254 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 2000 to 206f, 495 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 2070 to 209f, 156 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 20a0 to 20cf, 251 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 2100 to 214f, 246 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_10_italic characters 2200 to 22ff, 441 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_10_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 0 to 7f, 2969 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 80 to ff, 3471 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 100 to 17f, 5031 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 180 to 24f, 3521 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 250 to 2af, 480 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 2b0 to 2ff, 346 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 370 to 3ff, 206 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 1e00 to 1eff, 9428 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 2000 to 206f, 608 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 2070 to 209f, 172 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 20a0 to 20cf, 348 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 2100 to 214f, 335 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_italic characters 2200 to 22ff, 624 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_19_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 0 to 7f, 1814 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 80 to ff, 2133 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 100 to 17f, 2958 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 180 to 24f, 2754 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 250 to 2af, 390 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 2b0 to 2ff, 313 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 370 to 3ff, 172 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 1e00 to 1eff, 5588 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 2000 to 206f, 488 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 2070 to 209f, 150 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 20a0 to 20cf, 243 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 2100 to 214f, 243 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12 characters 2200 to 22ff, 528 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_12.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 0 to 7f, 2536 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 80 to ff, 3001 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 100 to 17f, 4253 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 180 to 24f, 3909 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 250 to 2af, 505 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 2b0 to 2ff, 359 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 370 to 3ff, 190 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 1e00 to 1eff, 8119 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 2000 to 206f, 631 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 2070 to 209f, 163 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 20a0 to 20cf, 304 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 2100 to 214f, 303 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold characters 2200 to 22ff, 710 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_18_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 0 to 7f, 2978 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 80 to ff, 3505 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 100 to 17f, 5047 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 180 to 24f, 3610 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 250 to 2af, 477 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 2b0 to 2ff, 382 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 370 to 3ff, 227 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 1e00 to 1eff, 9594 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 2000 to 206f, 676 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 2070 to 209f, 180 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 20a0 to 20cf, 355 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 2100 to 214f, 348 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold_italic characters 2200 to 22ff, 667 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_19_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 0 to 7f, 1352 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 80 to ff, 1565 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 100 to 17f, 2250 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 180 to 24f, 2021 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 250 to 2af, 332 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 2b0 to 2ff, 303 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 370 to 3ff, 165 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 1e00 to 1eff, 4106 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 2000 to 206f, 461 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 2070 to 209f, 147 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 20a0 to 20cf, 201 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 2100 to 214f, 200 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08 characters 2200 to 22ff, 394 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_08.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 0 to 7f, 2095 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 80 to ff, 2467 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 100 to 17f, 3583 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 180 to 24f, 2557 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 250 to 2af, 381 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 2b0 to 2ff, 333 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 370 to 3ff, 195 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 1e00 to 1eff, 6606 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 2000 to 206f, 563 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 2070 to 209f, 164 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 20a0 to 20cf, 261 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 2100 to 214f, 262 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold_italic characters 2200 to 22ff, 482 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_12_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 0 to 7f, 3337 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 80 to ff, 3994 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 100 to 17f, 5636 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 180 to 24f, 5369 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 250 to 2af, 639 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 2b0 to 2ff, 373 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 370 to 3ff, 199 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 1e00 to 1eff, 10822 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 2000 to 206f, 660 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 2070 to 209f, 167 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 20a0 to 20cf, 390 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 2100 to 214f, 386 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24 characters 2200 to 22ff, 938 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_24.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 0 to 7f, 1496 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 80 to ff, 1708 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 100 to 17f, 2440 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 180 to 24f, 1744 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 250 to 2af, 311 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 2b0 to 2ff, 319 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 370 to 3ff, 183 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 1e00 to 1eff, 4488 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 2000 to 206f, 501 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 2070 to 209f, 160 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 20a0 to 20cf, 216 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 2100 to 214f, 218 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_08_bold_italic characters 2200 to 22ff, 372 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_08_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 0 to 7f, 3815 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 80 to ff, 4431 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 100 to 17f, 6545 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 180 to 24f, 4586 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 250 to 2af, 607 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 2b0 to 2ff, 387 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 370 to 3ff, 221 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 1e00 to 1eff, 12213 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 2000 to 206f, 725 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 2070 to 209f, 179 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 20a0 to 20cf, 416 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 2100 to 214f, 415 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_24_italic characters 2200 to 22ff, 780 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_24_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 0 to 7f, 1932 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 80 to ff, 2281 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 100 to 17f, 3209 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 180 to 24f, 2949 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 250 to 2af, 411 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 2b0 to 2ff, 320 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 370 to 3ff, 182 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 1e00 to 1eff, 6034 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 2000 to 206f, 519 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 2070 to 209f, 155 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 20a0 to 20cf, 255 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 2100 to 214f, 244 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_12_bold characters 2200 to 22ff, 551 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_12_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 0 to 7f, 2544 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 80 to ff, 3050 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 100 to 17f, 4215 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 180 to 24f, 3926 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 250 to 2af, 513 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 2b0 to 2ff, 317 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 370 to 3ff, 182 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 1e00 to 1eff, 8099 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 2000 to 206f, 573 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 2070 to 209f, 158 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 20a0 to 20cf, 317 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 2100 to 214f, 310 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19 characters 2200 to 22ff, 650 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_19.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 0 to 7f, 2454 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 80 to ff, 3001 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 100 to 17f, 4138 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 180 to 24f, 3869 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 250 to 2af, 489 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 2b0 to 2ff, 324 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 370 to 3ff, 184 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 1e00 to 1eff, 7926 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 2000 to 206f, 561 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 2070 to 209f, 158 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 20a0 to 20cf, 309 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 2100 to 214f, 302 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18 characters 2200 to 22ff, 650 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_18.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 0 to 7f, 2808 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 80 to ff, 3372 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 100 to 17f, 4834 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 180 to 24f, 3410 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 250 to 2af, 468 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 2b0 to 2ff, 377 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 370 to 3ff, 222 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 1e00 to 1eff, 9149 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 2000 to 206f, 644 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 2070 to 209f, 180 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 20a0 to 20cf, 337 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 2100 to 214f, 329 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_18_bold_italic characters 2200 to 22ff, 628 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_18_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 0 to 7f, 2677 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 80 to ff, 3157 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 100 to 17f, 4526 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 180 to 24f, 4251 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 250 to 2af, 532 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 2b0 to 2ff, 361 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 370 to 3ff, 193 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 1e00 to 1eff, 8681 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 2000 to 206f, 647 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 2070 to 209f, 163 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 20a0 to 20cf, 318 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 2100 to 214f, 314 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_19_bold characters 2200 to 22ff, 725 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_19_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 0 to 7f, 2121 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 80 to ff, 2462 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 100 to 17f, 3541 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 180 to 24f, 3319 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 250 to 2af, 430 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 2b0 to 2ff, 316 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 370 to 3ff, 175 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 1e00 to 1eff, 6614 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 2000 to 206f, 515 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 2070 to 209f, 151 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 20a0 to 20cf, 274 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 2100 to 214f, 262 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14 characters 2200 to 22ff, 596 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_14.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 0 to 7f, 2216 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 80 to ff, 2568 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 100 to 17f, 3630 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 180 to 24f, 3393 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 250 to 2af, 443 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 2b0 to 2ff, 326 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 370 to 3ff, 187 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 1e00 to 1eff, 6933 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 2000 to 206f, 553 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 2070 to 209f, 160 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 20a0 to 20cf, 277 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 2100 to 214f, 273 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_sans_14_bold characters 2200 to 22ff, 592 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_sans_14_bold.toit"
        }
      ]
    },
    {
      "lib_name": "typewriter",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 0 to 7f, 2286 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 80 to ff, 2832 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 100 to 17f, 4074 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 180 to 24f, 2834 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 250 to 2af, 525 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 2b0 to 2ff, 452 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 370 to 3ff, 306 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 1e00 to 1eff, 7278 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 2000 to 206f, 677 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 2070 to 209f, 281 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 20a0 to 20cf, 389 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 2100 to 214f, 331 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_oblique characters 2200 to 22ff, 608 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_18_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 0 to 7f, 1605 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 80 to ff, 1950 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 100 to 17f, 2669 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 180 to 24f, 2399 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 250 to 2af, 467 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 2b0 to 2ff, 423 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 370 to 3ff, 283 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 1e00 to 1eff, 4837 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 2000 to 206f, 580 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 2070 to 209f, 263 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 20a0 to 20cf, 323 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 2100 to 214f, 293 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 2200 to 22ff, 529 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 2500 to 257f, 1755 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10 characters 2580 to 259f, 569 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_10.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 0 to 7f, 2486 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 80 to ff, 3053 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 100 to 17f, 4408 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 180 to 24f, 3986 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 250 to 2af, 627 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 2b0 to 2ff, 445 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 370 to 3ff, 300 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 1e00 to 1eff, 8146 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 2000 to 206f, 675 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 2070 to 209f, 273 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 20a0 to 20cf, 392 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 2100 to 214f, 345 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 2200 to 22ff, 722 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 2500 to 257f, 2276 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold characters 2580 to 259f, 714 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_18_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 0 to 7f, 2539 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 80 to ff, 3054 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 100 to 17f, 4341 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 180 to 24f, 3055 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 250 to 2af, 539 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 2b0 to 2ff, 452 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 370 to 3ff, 310 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 1e00 to 1eff, 7961 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 2000 to 206f, 695 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 2070 to 209f, 284 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 20a0 to 20cf, 416 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 2100 to 214f, 342 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18_bold_oblique characters 2200 to 22ff, 676 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_18_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 0 to 7f, 1949 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 80 to ff, 2416 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 100 to 17f, 3445 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 180 to 24f, 2405 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 250 to 2af, 474 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 2b0 to 2ff, 435 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 370 to 3ff, 299 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 1e00 to 1eff, 6174 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 2000 to 206f, 615 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 2070 to 209f, 274 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 20a0 to 20cf, 367 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 2100 to 214f, 326 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_oblique characters 2200 to 22ff, 568 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_14_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 0 to 7f, 1803 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 80 to ff, 2157 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 100 to 17f, 3130 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 180 to 24f, 2762 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 250 to 2af, 495 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 2b0 to 2ff, 431 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 370 to 3ff, 291 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 1e00 to 1eff, 5527 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 2000 to 206f, 605 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 2070 to 209f, 268 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 20a0 to 20cf, 342 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 2100 to 214f, 309 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 2200 to 22ff, 620 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 2500 to 257f, 1830 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold characters 2580 to 259f, 602 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_12_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 0 to 7f, 1870 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 80 to ff, 2251 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 100 to 17f, 3252 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 180 to 24f, 2250 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 250 to 2af, 450 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 2b0 to 2ff, 432 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 370 to 3ff, 294 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 1e00 to 1eff, 5820 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 2000 to 206f, 600 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 2070 to 209f, 273 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 20a0 to 20cf, 357 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 2100 to 214f, 317 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_oblique characters 2200 to 22ff, 557 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_12_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 0 to 7f, 2989 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 80 to ff, 3603 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 100 to 17f, 5299 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 180 to 24f, 3565 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 250 to 2af, 607 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 2b0 to 2ff, 495 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 370 to 3ff, 325 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 1e00 to 1eff, 9840 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 2000 to 206f, 774 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 2070 to 209f, 297 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 20a0 to 20cf, 470 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 2100 to 214f, 387 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_oblique characters 2200 to 22ff, 736 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_24_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 0 to 7f, 1973 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 80 to ff, 2439 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 100 to 17f, 3502 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 180 to 24f, 3132 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 250 to 2af, 553 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 2b0 to 2ff, 431 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 370 to 3ff, 295 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 1e00 to 1eff, 6293 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 2000 to 206f, 610 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 2070 to 209f, 270 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 20a0 to 20cf, 358 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 2100 to 214f, 322 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 2200 to 22ff, 643 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 2500 to 257f, 1976 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold characters 2580 to 259f, 646 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_14_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 0 to 7f, 1833 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 80 to ff, 2238 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 100 to 17f, 3160 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 180 to 24f, 2847 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 250 to 2af, 488 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 2b0 to 2ff, 427 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 370 to 3ff, 287 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 1e00 to 1eff, 5694 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 2000 to 206f, 606 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 2070 to 209f, 264 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 20a0 to 20cf, 357 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 2100 to 214f, 312 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 2200 to 22ff, 634 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 2500 to 257f, 1882 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14 characters 2580 to 259f, 632 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_14.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 0 to 7f, 1442 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 80 to ff, 1730 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 100 to 17f, 2387 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 180 to 24f, 2122 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 250 to 2af, 451 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 2b0 to 2ff, 426 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 370 to 3ff, 284 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 1e00 to 1eff, 4244 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 2000 to 206f, 579 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 2070 to 209f, 260 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 20a0 to 20cf, 303 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 2100 to 214f, 287 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 2200 to 22ff, 483 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 2500 to 257f, 1512 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold characters 2580 to 259f, 494 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_08_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 0 to 7f, 1688 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 80 to ff, 2028 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 100 to 17f, 2815 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 180 to 24f, 1987 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 250 to 2af, 434 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 2b0 to 2ff, 430 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 370 to 3ff, 291 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 1e00 to 1eff, 5125 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 2000 to 206f, 587 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 2070 to 209f, 272 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 20a0 to 20cf, 341 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 2100 to 214f, 304 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_oblique characters 2200 to 22ff, 470 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_10_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 0 to 7f, 3255 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 80 to ff, 4119 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 100 to 17f, 5943 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 180 to 24f, 5375 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 250 to 2af, 764 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 2b0 to 2ff, 498 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 370 to 3ff, 342 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 1e00 to 1eff, 10831 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 2000 to 206f, 752 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 2070 to 209f, 291 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 20a0 to 20cf, 450 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 2100 to 214f, 380 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 2200 to 22ff, 965 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 2500 to 257f, 2951 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold characters 2580 to 259f, 968 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_24_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 0 to 7f, 2282 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 80 to ff, 2770 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 100 to 17f, 4133 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 180 to 24f, 3613 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 250 to 2af, 604 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 2b0 to 2ff, 441 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 370 to 3ff, 295 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 1e00 to 1eff, 7373 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 2000 to 206f, 649 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 2070 to 209f, 269 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 20a0 to 20cf, 381 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 2100 to 214f, 325 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 2200 to 22ff, 692 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 2500 to 257f, 2133 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_18 characters 2580 to 259f, 700 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_18.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 0 to 7f, 1987 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 80 to ff, 2346 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 100 to 17f, 3448 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 180 to 24f, 2369 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 250 to 2af, 467 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 2b0 to 2ff, 445 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 370 to 3ff, 300 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 1e00 to 1eff, 6069 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 2000 to 206f, 617 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 2070 to 209f, 277 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 20a0 to 20cf, 358 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 2100 to 214f, 320 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12_bold_oblique characters 2200 to 22ff, 570 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_12_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 0 to 7f, 1433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 80 to ff, 1714 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 100 to 17f, 2375 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 180 to 24f, 2105 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 250 to 2af, 443 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 2b0 to 2ff, 413 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 370 to 3ff, 278 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 1e00 to 1eff, 4163 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 2000 to 206f, 561 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 2070 to 209f, 255 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 20a0 to 20cf, 299 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 2100 to 214f, 283 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 2200 to 22ff, 488 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 2500 to 257f, 1507 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08 characters 2580 to 259f, 489 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_08.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 0 to 7f, 3163 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 80 to ff, 3927 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 100 to 17f, 5504 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 180 to 24f, 5058 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 250 to 2af, 741 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 2b0 to 2ff, 486 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 370 to 3ff, 312 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 1e00 to 1eff, 10311 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 2000 to 206f, 758 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 2070 to 209f, 280 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 20a0 to 20cf, 471 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 2100 to 214f, 391 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 2200 to 22ff, 863 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 2500 to 257f, 2777 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24 characters 2580 to 259f, 950 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_24.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 0 to 7f, 1682 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 80 to ff, 2036 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 100 to 17f, 2864 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 180 to 24f, 2530 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 250 to 2af, 474 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 2b0 to 2ff, 424 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 370 to 3ff, 283 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 1e00 to 1eff, 5144 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 2000 to 206f, 588 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 2070 to 209f, 261 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 20a0 to 20cf, 334 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 2100 to 214f, 300 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 2200 to 22ff, 545 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 2500 to 257f, 1830 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_12 characters 2580 to 259f, 597 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_12.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 0 to 7f, 2132 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 80 to ff, 2584 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 100 to 17f, 3698 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 180 to 24f, 2600 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 250 to 2af, 501 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 2b0 to 2ff, 447 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 370 to 3ff, 304 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 1e00 to 1eff, 6637 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 2000 to 206f, 649 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 2070 to 209f, 282 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 20a0 to 20cf, 367 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 2100 to 214f, 327 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_14_bold_oblique characters 2200 to 22ff, 593 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_14_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 0 to 7f, 1543 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 80 to ff, 1824 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 100 to 17f, 2530 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 180 to 24f, 1769 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 250 to 2af, 416 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 2b0 to 2ff, 431 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 370 to 3ff, 298 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 1e00 to 1eff, 4437 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 2000 to 206f, 576 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 2070 to 209f, 269 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 20a0 to 20cf, 311 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 2100 to 214f, 296 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_bold_oblique characters 2200 to 22ff, 451 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_08_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 0 to 7f, 1651 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 80 to ff, 2007 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 100 to 17f, 2847 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 180 to 24f, 2510 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 250 to 2af, 479 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 2b0 to 2ff, 427 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 370 to 3ff, 290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 1e00 to 1eff, 5056 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 2000 to 206f, 586 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 2070 to 209f, 266 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 20a0 to 20cf, 334 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 2100 to 214f, 304 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 2200 to 22ff, 535 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BOX_DRAWING",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 2500 to 257f, 1798 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BLOCK_ELEMENTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold characters 2580 to 259f, 579 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_10_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 0 to 7f, 1784 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 80 to ff, 2126 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 100 to 17f, 3100 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 180 to 24f, 2123 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 250 to 2af, 452 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 2b0 to 2ff, 434 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 370 to 3ff, 298 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 1e00 to 1eff, 5545 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 2000 to 206f, 599 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 2070 to 209f, 278 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 20a0 to 20cf, 346 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 2100 to 214f, 315 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_10_bold_oblique characters 2200 to 22ff, 510 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_10_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 0 to 7f, 3572 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 80 to ff, 4246 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 100 to 17f, 6356 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 180 to 24f, 4363 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 250 to 2af, 707 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 2b0 to 2ff, 509 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 370 to 3ff, 345 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 1e00 to 1eff, 11586 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 2000 to 206f, 776 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 2070 to 209f, 311 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 20a0 to 20cf, 493 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 2100 to 214f, 407 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_24_bold_oblique characters 2200 to 22ff, 850 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_24_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 0 to 7f, 1477 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 80 to ff, 1772 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 100 to 17f, 2459 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 180 to 24f, 1720 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 250 to 2af, 408 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 2b0 to 2ff, 427 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 370 to 3ff, 288 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 1e00 to 1eff, 4341 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 2000 to 206f, 568 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 2070 to 209f, 264 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 20a0 to 20cf, 304 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 2100 to 214f, 290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "typewriter_08_oblique characters 2200 to 22ff, 439 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "typewriter_08_oblique.toit"
        }
      ]
    },
    {
      "lib_name": "book",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 0 to 7f, 2219 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 80 to ff, 2631 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 100 to 17f, 3855 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 180 to 24f, 2692 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 250 to 2af, 494 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 2b0 to 2ff, 446 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 370 to 3ff, 313 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 1e00 to 1eff, 6976 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 2000 to 206f, 649 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 2070 to 209f, 271 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 20a0 to 20cf, 377 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 2100 to 214f, 395 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold_italic characters 2200 to 22ff, 492 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_12_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 0 to 7f, 2837 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 80 to ff, 3469 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 100 to 17f, 5166 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 180 to 24f, 4779 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 250 to 2af, 680 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 2b0 to 2ff, 481 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 370 to 3ff, 321 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 1e00 to 1eff, 9887 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 2000 to 206f, 720 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 2070 to 209f, 272 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 20a0 to 20cf, 435 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 2100 to 214f, 469 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold characters 2200 to 22ff, 728 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_18_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 0 to 7f, 2043 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 80 to ff, 2409 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 100 to 17f, 3507 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 180 to 24f, 2421 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 250 to 2af, 470 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 2b0 to 2ff, 428 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 370 to 3ff, 291 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 1e00 to 1eff, 6397 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 2000 to 206f, 624 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 2070 to 209f, 270 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 20a0 to 20cf, 367 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 2100 to 214f, 385 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_italic characters 2200 to 22ff, 520 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_12_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 0 to 7f, 2042 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 80 to ff, 2489 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 100 to 17f, 3638 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 180 to 24f, 3208 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 250 to 2af, 525 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 2b0 to 2ff, 449 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 370 to 3ff, 300 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 1e00 to 1eff, 6613 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 2000 to 206f, 655 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 2070 to 209f, 265 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 20a0 to 20cf, 360 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 2100 to 214f, 393 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12_bold characters 2200 to 22ff, 557 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_12_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 0 to 7f, 2957 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 80 to ff, 3620 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 100 to 17f, 5307 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 180 to 24f, 3790 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 250 to 2af, 561 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 2b0 to 2ff, 494 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 370 to 3ff, 331 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 1e00 to 1eff, 9961 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 2000 to 206f, 745 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 2070 to 209f, 280 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 20a0 to 20cf, 442 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 2100 to 214f, 487 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_bold_italic characters 2200 to 22ff, 651 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_18_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 0 to 7f, 2662 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 80 to ff, 3218 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 100 to 17f, 4613 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 180 to 24f, 3286 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 250 to 2af, 535 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 2b0 to 2ff, 447 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 370 to 3ff, 305 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 1e00 to 1eff, 8488 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 2000 to 206f, 721 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 2070 to 209f, 270 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 20a0 to 20cf, 447 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 2100 to 214f, 458 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18_italic characters 2200 to 22ff, 644 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_18_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 0 to 7f, 1838 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 80 to ff, 2172 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 100 to 17f, 3142 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 180 to 24f, 2823 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 250 to 2af, 461 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 2b0 to 2ff, 415 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 370 to 3ff, 279 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10 characters 1e00 to 1eff, 5716 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 2000 to 206f, 578 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 2070 to 209f, 255 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 20a0 to 20cf, 370 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 2100 to 214f, 362 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_10 characters 2200 to 22ff, 532 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_10.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 0 to 7f, 1542 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 80 to ff, 1798 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 100 to 17f, 2524 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 180 to 24f, 1771 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 250 to 2af, 405 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 2b0 to 2ff, 425 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 370 to 3ff, 286 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 1e00 to 1eff, 4567 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 2000 to 206f, 586 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 2070 to 209f, 262 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 20a0 to 20cf, 319 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 2100 to 214f, 343 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold_italic characters 2200 to 22ff, 452 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_08_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 0 to 7f, 1510 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 80 to ff, 1768 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 100 to 17f, 2500 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 180 to 24f, 1742 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 250 to 2af, 396 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 2b0 to 2ff, 414 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 370 to 3ff, 279 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 1e00 to 1eff, 4464 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 2000 to 206f, 565 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 2070 to 209f, 255 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 20a0 to 20cf, 312 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 2100 to 214f, 335 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_italic characters 2200 to 22ff, 447 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_08_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 0 to 7f, 2175 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 80 to ff, 2592 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 100 to 17f, 3729 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 180 to 24f, 2621 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 250 to 2af, 477 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 2b0 to 2ff, 436 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 370 to 3ff, 296 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 1e00 to 1eff, 6771 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 2000 to 206f, 629 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 2070 to 209f, 272 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 20a0 to 20cf, 382 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 2100 to 214f, 405 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_italic characters 2200 to 22ff, 580 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_14_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 0 to 7f, 2263 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 80 to ff, 2723 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 100 to 17f, 3953 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 180 to 24f, 3535 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 250 to 2af, 541 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 2b0 to 2ff, 450 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 370 to 3ff, 300 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 1e00 to 1eff, 7329 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 2000 to 206f, 676 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 2070 to 209f, 264 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 20a0 to 20cf, 391 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 2100 to 214f, 410 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold characters 2200 to 22ff, 658 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_14_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 0 to 7f, 1514 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 80 to ff, 1799 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 100 to 17f, 2527 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 180 to 24f, 2237 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 250 to 2af, 435 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 2b0 to 2ff, 418 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 370 to 3ff, 279 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 1e00 to 1eff, 4547 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 2000 to 206f, 576 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 2070 to 209f, 255 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 20a0 to 20cf, 318 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 2100 to 214f, 344 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08_bold characters 2200 to 22ff, 498 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_08_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 0 to 7f, 1904 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 80 to ff, 2313 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 100 to 17f, 3330 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 180 to 24f, 2325 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 250 to 2af, 450 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 2b0 to 2ff, 436 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 370 to 3ff, 297 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 1e00 to 1eff, 5992 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 2000 to 206f, 615 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 2070 to 209f, 269 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 20a0 to 20cf, 371 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 2100 to 214f, 376 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold_italic characters 2200 to 22ff, 482 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_10_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 0 to 7f, 3807 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 80 to ff, 4686 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 100 to 17f, 6964 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 180 to 24f, 6363 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 250 to 2af, 785 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 2b0 to 2ff, 519 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 370 to 3ff, 337 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 1e00 to 1eff, 13031 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 2000 to 206f, 834 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 2070 to 209f, 296 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 20a0 to 20cf, 521 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 2100 to 214f, 574 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold characters 2200 to 22ff, 908 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_24_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 0 to 7f, 1893 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 80 to ff, 2315 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 100 to 17f, 3350 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 180 to 24f, 2934 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 250 to 2af, 483 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 2b0 to 2ff, 423 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 370 to 3ff, 286 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_12 characters 1e00 to 1eff, 6021 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 2000 to 206f, 618 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 2070 to 209f, 259 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 20a0 to 20cf, 365 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 2100 to 214f, 381 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_12 characters 2200 to 22ff, 547 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_12.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 0 to 7f, 2314 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 80 to ff, 2845 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 100 to 17f, 4161 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 180 to 24f, 2912 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 250 to 2af, 437 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 2b0 to 2ff, 398 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 370 to 3ff, 248 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 1e00 to 1eff, 7816 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 2000 to 206f, 638 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 2070 to 209f, 209 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 20a0 to 20cf, 339 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 2100 to 214f, 354 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14_bold_italic characters 2200 to 22ff, 507 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_14_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 0 to 7f, 4119 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 80 to ff, 4848 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 100 to 17f, 7134 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 180 to 24f, 5077 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 250 to 2af, 686 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 2b0 to 2ff, 506 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 370 to 3ff, 346 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 1e00 to 1eff, 13381 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 2000 to 206f, 819 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 2070 to 209f, 302 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 20a0 to 20cf, 561 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 2100 to 214f, 598 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_italic characters 2200 to 22ff, 832 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_24_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 0 to 7f, 3715 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 80 to ff, 4436 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 100 to 17f, 6732 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 180 to 24f, 6066 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 250 to 2af, 787 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 2b0 to 2ff, 488 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 370 to 3ff, 327 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24 characters 1e00 to 1eff, 12504 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 2000 to 206f, 801 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 2070 to 209f, 282 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 20a0 to 20cf, 522 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 2100 to 214f, 557 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_24 characters 2200 to 22ff, 844 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_24.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 0 to 7f, 1479 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 80 to ff, 1752 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 100 to 17f, 2433 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 180 to 24f, 2170 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 250 to 2af, 433 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 2b0 to 2ff, 407 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 370 to 3ff, 271 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_08 characters 1e00 to 1eff, 4381 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 2000 to 206f, 558 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 2070 to 209f, 250 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 20a0 to 20cf, 307 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 2100 to 214f, 330 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_08 characters 2200 to 22ff, 497 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_08.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 0 to 7f, 4157 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 80 to ff, 5040 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 100 to 17f, 7532 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 180 to 24f, 5310 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 250 to 2af, 723 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 2b0 to 2ff, 521 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 370 to 3ff, 360 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 1e00 to 1eff, 13982 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 2000 to 206f, 871 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 2070 to 209f, 304 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 20a0 to 20cf, 547 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 2100 to 214f, 595 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_24_bold_italic characters 2200 to 22ff, 795 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_24_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 0 to 7f, 1873 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 80 to ff, 2237 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 100 to 17f, 3239 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 180 to 24f, 2898 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 250 to 2af, 486 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 2b0 to 2ff, 430 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 370 to 3ff, 288 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 1e00 to 1eff, 5810 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 2000 to 206f, 610 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 2070 to 209f, 260 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 20a0 to 20cf, 361 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 2100 to 214f, 373 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_bold characters 2200 to 22ff, 542 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_10_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 0 to 7f, 2788 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 80 to ff, 3431 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 100 to 17f, 4911 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 180 to 24f, 4562 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 250 to 2af, 643 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 2b0 to 2ff, 455 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 370 to 3ff, 301 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_18 characters 1e00 to 1eff, 9276 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 2000 to 206f, 707 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 2070 to 209f, 263 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 20a0 to 20cf, 448 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 2100 to 214f, 464 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_18 characters 2200 to 22ff, 720 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_18.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 0 to 7f, 1795 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 80 to ff, 2128 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 100 to 17f, 3089 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 180 to 24f, 2181 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 250 to 2af, 426 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 2b0 to 2ff, 422 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 370 to 3ff, 290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 1e00 to 1eff, 5483 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 2000 to 206f, 590 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 2070 to 209f, 261 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 20a0 to 20cf, 357 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 2100 to 214f, 364 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_10_italic characters 2200 to 22ff, 477 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_10_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 0 to 7f, 2166 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 80 to ff, 2546 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 100 to 17f, 3675 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 180 to 24f, 3336 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 250 to 2af, 518 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 2b0 to 2ff, 429 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 370 to 3ff, 286 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "book_14 characters 1e00 to 1eff, 6692 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 2000 to 206f, 613 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 2070 to 209f, 260 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 20a0 to 20cf, 378 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 2100 to 214f, 398 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "book_14 characters 2200 to 22ff, 626 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "book_14.toit"
        }
      ]
    },
    {
      "lib_name": "clearly_u",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 0 to 7f, 1678 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 80 to ff, 2071 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 100 to 17f, 2959 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 180 to 24f, 4138 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 250 to 2af, 1802 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2b0 to 2ff, 946 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "COMBINING_DIACRITICAL_MARKS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 300 to 36f, 1095 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 370 to 3ff, 2218 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CYRILLIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 400 to 4ff, 5499 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CYRILLIC_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 500 to 52f, 461 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARMENIAN",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 530 to 58f, 1809 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HEBREW",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 590 to 5ff, 1213 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARABIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 600 to 6ff, 4253 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "THAANA",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 780 to 7bf, 919 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "DEVANAGARI",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 900 to 97f, 2532 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "THAI",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters e00 to e7f, 1798 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LAO",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters e80 to eff, 1293 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "TIBETAN",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters f00 to fff, 1256 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEORGIAN",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 10a0 to 10ff, 1683 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HANGUL_JAMO",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 1100 to 11ff, 6197 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ETHIOPIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 1200 to 137f, 10037 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CHEROKEE",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 13a0 to 13ff, 2036 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 1400 to 167f, 13689 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "OGHAM",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 1680 to 169f, 778 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "RUNIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 16a0 to 16ff, 1628 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 1e00 to 1eff, 6045 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_EXTENDED",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 1f00 to 1fff, 5729 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2000 to 206f, 1970 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2070 to 209f, 506 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 20a0 to 20cf, 551 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "COMBINING_DIACRITICAL_MARKS_FOR_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 20d0 to 20ff, 496 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2100 to 214f, 1523 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "NUMBER_FORMS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2150 to 218f, 1293 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARROWS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2190 to 21ff, 2134 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2200 to 22ff, 5297 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_TECHNICAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2300 to 23ff, 3967 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CONTROL_PICTURES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2400 to 243f, 1070 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "OPTICAL_CHARACTER_RECOGNITION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2440 to 245f, 268 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ENCLOSED_ALPHANUMERICS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2460 to 24ff, 5512 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEOMETRIC_SHAPES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 25a0 to 25ff, 1999 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "DINGBATS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2700 to 27bf, 155 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BRAILLE_PATTERNS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 2800 to 28ff, 4096 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HANGUL_COMPATIBILITY_JAMO",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 3130 to 318f, 2433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ENCLOSED_CJK_LETTERS_AND_MONTHS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters 3200 to 32ff, 2282 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HANGUL_SYLLABLES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters ac00 to d7af, 86405 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "PRIVATE_USE_AREA",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters e000 to f8ff, 9431 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ALPHABETIC_PRESENTATION_FORMS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters fb00 to fb4f, 1355 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARABIC_PRESENTATION_FORMS_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters fb50 to fdff, 3132 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "COMBINING_HALF_MARKS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters fe20 to fe2f, 175 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SMALL_FORM_VARIANTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters fe50 to fe6f, 367 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARABIC_PRESENTATION_FORMS_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters fe70 to feff, 3110 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HALFWIDTH_AND_FULLWIDTH_FORMS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters ff00 to ffef, 3074 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPECIALS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12 characters fff0 to ffff, 158 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clearly_u_12.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 0 to 7f, 1710 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 80 to ff, 2103 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 100 to 17f, 3034 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 180 to 24f, 4225 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 250 to 2af, 1833 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2b0 to 2ff, 965 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "COMBINING_DIACRITICAL_MARKS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 300 to 36f, 1103 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 370 to 3ff, 2264 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CYRILLIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 400 to 4ff, 5603 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CYRILLIC_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 500 to 52f, 472 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARMENIAN",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 530 to 58f, 1862 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HEBREW",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 590 to 5ff, 1265 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARABIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 600 to 6ff, 4309 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "THAANA",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 780 to 7bf, 944 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "DEVANAGARI",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 900 to 97f, 2569 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "THAI",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters e00 to e7f, 1864 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LAO",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters e80 to eff, 1349 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "TIBETAN",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters f00 to fff, 1298 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEORGIAN",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 10a0 to 10ff, 1724 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HANGUL_JAMO",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 1100 to 11ff, 6278 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ETHIOPIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 1200 to 137f, 10164 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CHEROKEE",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 13a0 to 13ff, 2108 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 1400 to 167f, 14211 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "OGHAM",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 1680 to 169f, 797 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "RUNIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 16a0 to 16ff, 1645 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 1e00 to 1eff, 6206 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_EXTENDED",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 1f00 to 1fff, 5847 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2000 to 206f, 1994 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2070 to 209f, 517 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 20a0 to 20cf, 582 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "COMBINING_DIACRITICAL_MARKS_FOR_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 20d0 to 20ff, 504 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2100 to 214f, 1538 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "NUMBER_FORMS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2150 to 218f, 1362 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARROWS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2190 to 21ff, 2146 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2200 to 22ff, 5593 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_TECHNICAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2300 to 23ff, 4017 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CONTROL_PICTURES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2400 to 243f, 1108 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "OPTICAL_CHARACTER_RECOGNITION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2440 to 245f, 277 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ENCLOSED_ALPHANUMERICS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2460 to 24ff, 5498 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEOMETRIC_SHAPES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 25a0 to 25ff, 1978 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "DINGBATS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2700 to 27bf, 166 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "BRAILLE_PATTERNS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 2800 to 28ff, 4105 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HANGUL_COMPATIBILITY_JAMO",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 3130 to 318f, 2474 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ENCLOSED_CJK_LETTERS_AND_MONTHS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters 3200 to 32ff, 2323 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HANGUL_SYLLABLES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters ac00 to d7af, 87141 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "PRIVATE_USE_AREA",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters e000 to f8ff, 9667 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ALPHABETIC_PRESENTATION_FORMS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters fb00 to fb4f, 1420 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARABIC_PRESENTATION_FORMS_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters fb50 to fdff, 3228 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "COMBINING_HALF_MARKS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters fe20 to fe2f, 184 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SMALL_FORM_VARIANTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters fe50 to fe6f, 378 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARABIC_PRESENTATION_FORMS_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters fe70 to feff, 3183 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "HALFWIDTH_AND_FULLWIDTH_FORMS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters ff00 to ffef, 3163 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPECIALS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clearly_u_12_autobold characters fff0 to ffff, 159 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clearly_u_12_autobold.toit"
        }
      ]
    },
    {
      "lib_name": "clear",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 0 to 7f, 2458 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 80 to ff, 2889 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 100 to 17f, 4226 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 180 to 24f, 2898 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 250 to 2af, 417 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 2b0 to 2ff, 339 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 370 to 3ff, 197 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 1e00 to 1eff, 7828 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 2000 to 206f, 589 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 2070 to 209f, 166 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 20a0 to 20cf, 325 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 2100 to 214f, 303 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold_italic characters 2200 to 22ff, 533 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_14_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 0 to 7f, 2297 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 80 to ff, 2692 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 100 to 17f, 3945 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 180 to 24f, 3534 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 250 to 2af, 474 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 2b0 to 2ff, 324 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 370 to 3ff, 183 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 1e00 to 1eff, 7585 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 2000 to 206f, 545 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 2070 to 209f, 157 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 20a0 to 20cf, 296 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 2100 to 214f, 290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_bold characters 2200 to 22ff, 604 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_14_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 0 to 7f, 4066 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 80 to ff, 4698 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 100 to 17f, 7042 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 180 to 24f, 4956 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 250 to 2af, 652 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 2b0 to 2ff, 397 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 370 to 3ff, 232 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 1e00 to 1eff, 13284 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 2000 to 206f, 753 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 2070 to 209f, 176 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 20a0 to 20cf, 458 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 2100 to 214f, 458 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_italic characters 2200 to 22ff, 785 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_24_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 0 to 7f, 2830 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 80 to ff, 3393 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 100 to 17f, 4988 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 180 to 24f, 4549 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 250 to 2af, 587 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 2b0 to 2ff, 345 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 370 to 3ff, 195 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 1e00 to 1eff, 9558 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 2000 to 206f, 610 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 2070 to 209f, 161 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 20a0 to 20cf, 338 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 2100 to 214f, 341 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold characters 2200 to 22ff, 676 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_19_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 0 to 7f, 1988 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 80 to ff, 2279 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 100 to 17f, 3299 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 180 to 24f, 2937 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 250 to 2af, 406 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 2b0 to 2ff, 322 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 370 to 3ff, 177 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 1e00 to 1eff, 6130 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 2000 to 206f, 512 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 2070 to 209f, 151 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 20a0 to 20cf, 267 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 2100 to 214f, 274 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold characters 2200 to 22ff, 560 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_12_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 0 to 7f, 1812 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 80 to ff, 2161 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 100 to 17f, 3174 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 180 to 24f, 2210 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 250 to 2af, 333 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 2b0 to 2ff, 326 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 370 to 3ff, 188 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 1e00 to 1eff, 5754 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 2000 to 206f, 509 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 2070 to 209f, 158 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 20a0 to 20cf, 257 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 2100 to 214f, 260 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold_italic characters 2200 to 22ff, 433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_10_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 0 to 7f, 3133 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 80 to ff, 3615 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 100 to 17f, 5399 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 180 to 24f, 3731 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 250 to 2af, 495 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 2b0 to 2ff, 343 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 370 to 3ff, 203 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 1e00 to 1eff, 10066 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 2000 to 206f, 623 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 2070 to 209f, 167 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 20a0 to 20cf, 371 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 2100 to 214f, 366 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_italic characters 2200 to 22ff, 649 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_19_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_10 characters 0 to 7f, 1645 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_10 characters 80 to ff, 1927 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_10 characters 100 to 17f, 2720 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_10 characters 180 to 24f, 2475 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_10 characters 250 to 2af, 356 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_10 characters 2b0 to 2ff, 299 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_10 characters 370 to 3ff, 163 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10 characters 1e00 to 1eff, 5008 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10 characters 2000 to 206f, 475 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10 characters 2070 to 209f, 145 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10 characters 20a0 to 20cf, 233 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10 characters 2100 to 214f, 239 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10 characters 2200 to 22ff, 427 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_10.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 0 to 7f, 1792 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 80 to ff, 2135 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 100 to 17f, 3107 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 180 to 24f, 2138 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 250 to 2af, 331 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 2b0 to 2ff, 316 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 370 to 3ff, 178 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 1e00 to 1eff, 5597 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 2000 to 206f, 492 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 2070 to 209f, 154 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 20a0 to 20cf, 248 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 2100 to 214f, 250 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_italic characters 2200 to 22ff, 422 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_10_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 0 to 7f, 2710 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 80 to ff, 3275 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 100 to 17f, 4751 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 180 to 24f, 4404 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 250 to 2af, 543 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 2b0 to 2ff, 340 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 370 to 3ff, 188 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 1e00 to 1eff, 9105 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 2000 to 206f, 601 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 2070 to 209f, 161 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 20a0 to 20cf, 317 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 2100 to 214f, 320 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold characters 2200 to 22ff, 659 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_18_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 0 to 7f, 4017 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 80 to ff, 4692 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 100 to 17f, 6947 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 180 to 24f, 4910 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 250 to 2af, 633 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 2b0 to 2ff, 408 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 370 to 3ff, 236 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 1e00 to 1eff, 12959 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 2000 to 206f, 775 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 2070 to 209f, 187 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 20a0 to 20cf, 457 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 2100 to 214f, 448 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold_italic characters 2200 to 22ff, 835 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_24_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_12 characters 0 to 7f, 1970 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_12 characters 80 to ff, 2266 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_12 characters 100 to 17f, 3233 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_12 characters 180 to 24f, 2946 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_12 characters 250 to 2af, 412 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_12 characters 2b0 to 2ff, 300 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_12 characters 370 to 3ff, 169 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12 characters 1e00 to 1eff, 6072 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12 characters 2000 to 206f, 494 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12 characters 2070 to 209f, 146 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12 characters 20a0 to 20cf, 271 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12 characters 2100 to 214f, 266 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12 characters 2200 to 22ff, 549 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_12.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_08 characters 0 to 7f, 1491 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_08 characters 80 to ff, 1647 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_08 characters 100 to 17f, 2396 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_08 characters 180 to 24f, 2110 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_08 characters 250 to 2af, 342 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_08 characters 2b0 to 2ff, 296 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_08 characters 370 to 3ff, 160 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08 characters 1e00 to 1eff, 4371 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08 characters 2000 to 206f, 455 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08 characters 2070 to 209f, 143 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08 characters 20a0 to 20cf, 208 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08 characters 2100 to 214f, 218 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08 characters 2200 to 22ff, 401 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_08.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 0 to 7f, 2138 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 80 to ff, 2502 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 100 to 17f, 3629 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 180 to 24f, 2560 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 250 to 2af, 373 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 2b0 to 2ff, 327 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 370 to 3ff, 183 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 1e00 to 1eff, 6728 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 2000 to 206f, 535 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 2070 to 209f, 155 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 20a0 to 20cf, 274 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 2100 to 214f, 281 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_italic characters 2200 to 22ff, 472 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_12_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_24 characters 0 to 7f, 3673 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_24 characters 80 to ff, 4255 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_24 characters 100 to 17f, 6365 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_24 characters 180 to 24f, 5677 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_24 characters 250 to 2af, 682 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_24 characters 2b0 to 2ff, 366 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_24 characters 370 to 3ff, 206 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24 characters 1e00 to 1eff, 11951 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24 characters 2000 to 206f, 661 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24 characters 2070 to 209f, 168 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24 characters 20a0 to 20cf, 408 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24 characters 2100 to 214f, 411 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24 characters 2200 to 22ff, 942 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_24.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 0 to 7f, 1678 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 80 to ff, 2025 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 100 to 17f, 2888 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 180 to 24f, 2601 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 250 to 2af, 369 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 2b0 to 2ff, 307 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 370 to 3ff, 175 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 1e00 to 1eff, 5342 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 2000 to 206f, 482 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 2070 to 209f, 152 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 20a0 to 20cf, 233 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 2100 to 214f, 242 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_10_bold characters 2200 to 22ff, 438 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_10_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 0 to 7f, 2229 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 80 to ff, 2586 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 100 to 17f, 3757 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 180 to 24f, 2642 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 250 to 2af, 390 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 2b0 to 2ff, 332 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 370 to 3ff, 186 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 1e00 to 1eff, 6977 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 2000 to 206f, 544 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 2070 to 209f, 165 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 20a0 to 20cf, 289 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 2100 to 214f, 288 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_12_bold_italic characters 2200 to 22ff, 500 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_12_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 0 to 7f, 3090 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 80 to ff, 3638 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 100 to 17f, 5377 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 180 to 24f, 3743 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 250 to 2af, 518 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 2b0 to 2ff, 371 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 370 to 3ff, 211 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 1e00 to 1eff, 10160 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 2000 to 206f, 657 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 2070 to 209f, 179 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 20a0 to 20cf, 371 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 2100 to 214f, 371 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19_bold_italic characters 2200 to 22ff, 649 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_19_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_18 characters 0 to 7f, 2645 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_18 characters 80 to ff, 3118 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_18 characters 100 to 17f, 4582 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_18 characters 180 to 24f, 4129 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_18 characters 250 to 2af, 524 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_18 characters 2b0 to 2ff, 319 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_18 characters 370 to 3ff, 181 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18 characters 1e00 to 1eff, 8670 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18 characters 2000 to 206f, 560 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18 characters 2070 to 209f, 155 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18 characters 20a0 to 20cf, 326 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18 characters 2100 to 214f, 318 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18 characters 2200 to 22ff, 683 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_18.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 0 to 7f, 1582 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 80 to ff, 1759 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 100 to 17f, 2646 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 180 to 24f, 1809 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 250 to 2af, 306 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 2b0 to 2ff, 307 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 370 to 3ff, 174 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 1e00 to 1eff, 4786 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 2000 to 206f, 466 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 2070 to 209f, 150 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 20a0 to 20cf, 221 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 2100 to 214f, 224 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_italic characters 2200 to 22ff, 353 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_08_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_14 characters 0 to 7f, 2213 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_14 characters 80 to ff, 2592 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_14 characters 100 to 17f, 3772 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_14 characters 180 to 24f, 3408 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_14 characters 250 to 2af, 446 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_14 characters 2b0 to 2ff, 322 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_14 characters 370 to 3ff, 177 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14 characters 1e00 to 1eff, 7138 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14 characters 2000 to 206f, 534 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14 characters 2070 to 209f, 149 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14 characters 20a0 to 20cf, 285 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14 characters 2100 to 214f, 284 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14 characters 2200 to 22ff, 587 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_14.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 0 to 7f, 1594 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 80 to ff, 1779 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 100 to 17f, 2639 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 180 to 24f, 1816 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 250 to 2af, 311 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 2b0 to 2ff, 315 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 370 to 3ff, 179 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 1e00 to 1eff, 4764 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 2000 to 206f, 492 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 2070 to 209f, 156 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 20a0 to 20cf, 228 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 2100 to 214f, 237 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold_italic characters 2200 to 22ff, 361 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_08_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 0 to 7f, 2433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 80 to ff, 2815 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 100 to 17f, 4290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 180 to 24f, 2871 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 250 to 2af, 425 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 2b0 to 2ff, 332 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 370 to 3ff, 193 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 1e00 to 1eff, 7800 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 2000 to 206f, 571 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 2070 to 209f, 165 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 20a0 to 20cf, 307 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 2100 to 214f, 298 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_14_italic characters 2200 to 22ff, 529 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_14_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 0 to 7f, 3758 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 80 to ff, 4525 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 100 to 17f, 6588 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 180 to 24f, 6102 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 250 to 2af, 693 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 2b0 to 2ff, 378 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 370 to 3ff, 210 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 1e00 to 1eff, 12572 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 2000 to 206f, 701 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 2070 to 209f, 182 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 20a0 to 20cf, 433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 2100 to 214f, 451 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_24_bold characters 2200 to 22ff, 979 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_24_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 0 to 7f, 2999 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 80 to ff, 3560 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 100 to 17f, 5283 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 180 to 24f, 3652 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 250 to 2af, 489 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 2b0 to 2ff, 363 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 370 to 3ff, 211 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 1e00 to 1eff, 9965 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 2000 to 206f, 646 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 2070 to 209f, 174 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 20a0 to 20cf, 364 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 2100 to 214f, 368 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_bold_italic characters 2200 to 22ff, 612 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_18_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 0 to 7f, 2978 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 80 to ff, 3539 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 100 to 17f, 5252 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 180 to 24f, 3635 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 250 to 2af, 470 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 2b0 to 2ff, 339 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 370 to 3ff, 200 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 1e00 to 1eff, 9687 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 2000 to 206f, 605 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 2070 to 209f, 167 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 20a0 to 20cf, 355 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 2100 to 214f, 347 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_18_italic characters 2200 to 22ff, 585 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_18_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 0 to 7f, 1507 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 80 to ff, 1710 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 100 to 17f, 2495 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 180 to 24f, 2200 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 250 to 2af, 341 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 2b0 to 2ff, 306 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 370 to 3ff, 170 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 1e00 to 1eff, 4599 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 2000 to 206f, 475 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 2070 to 209f, 148 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 20a0 to 20cf, 217 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 2100 to 214f, 228 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_08_bold characters 2200 to 22ff, 419 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_08_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_19 characters 0 to 7f, 2791 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_19 characters 80 to ff, 3227 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_19 characters 100 to 17f, 4756 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_19 characters 180 to 24f, 4297 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_19 characters 250 to 2af, 532 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_19 characters 2b0 to 2ff, 320 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "clear_19 characters 370 to 3ff, 181 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19 characters 1e00 to 1eff, 8980 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19 characters 2000 to 206f, 577 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19 characters 2070 to 209f, 155 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19 characters 20a0 to 20cf, 333 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19 characters 2100 to 214f, 325 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "clear_19 characters 2200 to 22ff, 727 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "clear_19.toit"
        }
      ]
    },
    {
      "lib_name": "sans",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 0 to 7f, 2124 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 80 to ff, 2615 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 100 to 17f, 3652 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 180 to 24f, 2693 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 250 to 2af, 471 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 2b0 to 2ff, 433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 370 to 3ff, 293 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 1e00 to 1eff, 6746 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 2000 to 206f, 623 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 2070 to 209f, 265 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 20a0 to 20cf, 373 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 2100 to 214f, 379 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_oblique characters 2200 to 22ff, 483 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_14_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 0 to 7f, 1865 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 80 to ff, 2290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 100 to 17f, 3155 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 180 to 24f, 2921 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 250 to 2af, 487 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 2b0 to 2ff, 430 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 370 to 3ff, 286 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 1e00 to 1eff, 5791 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 2000 to 206f, 585 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 2070 to 209f, 260 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 20a0 to 20cf, 347 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 2100 to 214f, 364 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold characters 2200 to 22ff, 536 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_12_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 0 to 7f, 1890 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 80 to ff, 2314 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 100 to 17f, 3218 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 180 to 24f, 2330 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 250 to 2af, 443 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 2b0 to 2ff, 427 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 370 to 3ff, 290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 1e00 to 1eff, 5852 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 2000 to 206f, 595 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 2070 to 209f, 268 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 20a0 to 20cf, 362 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 2100 to 214f, 371 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_oblique characters 2200 to 22ff, 544 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_12_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 0 to 7f, 2012 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 80 to ff, 2446 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 100 to 17f, 3389 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 180 to 24f, 2514 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 250 to 2af, 464 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 2b0 to 2ff, 437 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 370 to 3ff, 297 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 1e00 to 1eff, 6177 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 2000 to 206f, 604 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 2070 to 209f, 272 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 20a0 to 20cf, 360 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 2100 to 214f, 387 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12_bold_oblique characters 2200 to 22ff, 530 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_12_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 0 to 7f, 1648 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 80 to ff, 2013 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 100 to 17f, 2710 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 180 to 24f, 2531 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 250 to 2af, 457 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 2b0 to 2ff, 412 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 370 to 3ff, 274 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10 characters 1e00 to 1eff, 5002 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 2000 to 206f, 574 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 2070 to 209f, 254 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 20a0 to 20cf, 330 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 2100 to 214f, 341 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_10 characters 2200 to 22ff, 505 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_10.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 0 to 7f, 2136 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 80 to ff, 2611 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 100 to 17f, 3634 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 180 to 24f, 3369 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 250 to 2af, 530 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 2b0 to 2ff, 429 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 370 to 3ff, 288 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 1e00 to 1eff, 6715 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 2000 to 206f, 621 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 2070 to 209f, 266 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 20a0 to 20cf, 370 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 2100 to 214f, 388 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold characters 2200 to 22ff, 612 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_14_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 0 to 7f, 3739 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 80 to ff, 4563 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 100 to 17f, 6432 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 180 to 24f, 4716 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 250 to 2af, 643 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 2b0 to 2ff, 483 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 370 to 3ff, 319 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 1e00 to 1eff, 11977 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 2000 to 206f, 760 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 2070 to 209f, 300 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 20a0 to 20cf, 517 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 2100 to 214f, 550 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_oblique characters 2200 to 22ff, 776 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_24_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 0 to 7f, 1516 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 80 to ff, 1796 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 100 to 17f, 2485 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 180 to 24f, 1763 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 250 to 2af, 398 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 2b0 to 2ff, 425 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 370 to 3ff, 287 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 1e00 to 1eff, 4453 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 2000 to 206f, 574 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 2070 to 209f, 262 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 20a0 to 20cf, 315 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 2100 to 214f, 329 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold_oblique characters 2200 to 22ff, 444 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_08_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 0 to 7f, 2190 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 80 to ff, 2655 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 100 to 17f, 3696 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 180 to 24f, 2690 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 250 to 2af, 478 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 2b0 to 2ff, 439 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 370 to 3ff, 298 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 1e00 to 1eff, 6899 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 2000 to 206f, 647 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 2070 to 209f, 272 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 20a0 to 20cf, 374 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 2100 to 214f, 391 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14_bold_oblique characters 2200 to 22ff, 542 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_14_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 0 to 7f, 2736 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 80 to ff, 3319 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 100 to 17f, 4716 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 180 to 24f, 3476 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 250 to 2af, 541 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 2b0 to 2ff, 441 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 370 to 3ff, 299 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 1e00 to 1eff, 8692 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 2000 to 206f, 668 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 2070 to 209f, 275 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 20a0 to 20cf, 444 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 2100 to 214f, 448 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_oblique characters 2200 to 22ff, 625 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_18_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 0 to 7f, 3718 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 80 to ff, 4486 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 100 to 17f, 6515 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 180 to 24f, 4677 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 250 to 2af, 679 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 2b0 to 2ff, 494 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 370 to 3ff, 338 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 1e00 to 1eff, 11999 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 2000 to 206f, 798 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 2070 to 209f, 308 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 20a0 to 20cf, 511 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 2100 to 214f, 535 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold_oblique characters 2200 to 22ff, 803 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_24_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 0 to 7f, 1815 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 80 to ff, 2194 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 100 to 17f, 3055 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 180 to 24f, 2208 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 250 to 2af, 429 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 2b0 to 2ff, 426 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 370 to 3ff, 296 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 1e00 to 1eff, 5534 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 2000 to 206f, 602 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 2070 to 209f, 269 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 20a0 to 20cf, 358 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 2100 to 214f, 360 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold_oblique characters 2200 to 22ff, 475 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_10_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 0 to 7f, 2567 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 80 to ff, 3137 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 100 to 17f, 4475 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 180 to 24f, 4185 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 250 to 2af, 599 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 2b0 to 2ff, 446 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 370 to 3ff, 294 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 1e00 to 1eff, 8305 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 2000 to 206f, 654 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 2070 to 209f, 271 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 20a0 to 20cf, 423 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 2100 to 214f, 433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold characters 2200 to 22ff, 707 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_18_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 0 to 7f, 1696 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 80 to ff, 2040 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 100 to 17f, 2816 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 180 to 24f, 2602 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 250 to 2af, 457 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 2b0 to 2ff, 418 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 370 to 3ff, 280 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 1e00 to 1eff, 5156 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 2000 to 206f, 579 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 2070 to 209f, 258 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 20a0 to 20cf, 350 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 2100 to 214f, 348 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_bold characters 2200 to 22ff, 520 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_10_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 0 to 7f, 2002 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 80 to ff, 2430 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 100 to 17f, 3467 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 180 to 24f, 3214 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 250 to 2af, 493 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 2b0 to 2ff, 423 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 370 to 3ff, 279 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_14 characters 1e00 to 1eff, 6356 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 2000 to 206f, 607 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 2070 to 209f, 257 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 20a0 to 20cf, 373 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 2100 to 214f, 378 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_14 characters 2200 to 22ff, 557 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_14.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 0 to 7f, 1465 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 80 to ff, 1752 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 100 to 17f, 2385 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 180 to 24f, 1695 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 250 to 2af, 392 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 2b0 to 2ff, 415 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 370 to 3ff, 281 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 1e00 to 1eff, 4295 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 2000 to 206f, 567 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 2070 to 209f, 257 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 20a0 to 20cf, 305 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 2100 to 214f, 325 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_oblique characters 2200 to 22ff, 435 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_08_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 0 to 7f, 2591 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 80 to ff, 3137 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 100 to 17f, 4426 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 180 to 24f, 4123 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 250 to 2af, 602 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 2b0 to 2ff, 431 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 370 to 3ff, 289 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18 characters 1e00 to 1eff, 8255 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 2000 to 206f, 642 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 2070 to 209f, 263 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 20a0 to 20cf, 416 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 2100 to 214f, 429 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_18 characters 2200 to 22ff, 721 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_18.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 0 to 7f, 2713 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 80 to ff, 3269 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 100 to 17f, 4690 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 180 to 24f, 3411 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 250 to 2af, 533 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 2b0 to 2ff, 468 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 370 to 3ff, 303 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 1e00 to 1eff, 8675 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 2000 to 206f, 717 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 2070 to 209f, 280 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 20a0 to 20cf, 443 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 2100 to 214f, 441 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_18_bold_oblique characters 2200 to 22ff, 630 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_18_bold_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 0 to 7f, 1761 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 80 to ff, 2111 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 100 to 17f, 2982 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 180 to 24f, 2171 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 250 to 2af, 420 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 2b0 to 2ff, 421 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 370 to 3ff, 285 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 1e00 to 1eff, 5390 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 2000 to 206f, 588 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 2070 to 209f, 262 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 20a0 to 20cf, 345 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 2100 to 214f, 360 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_10_oblique characters 2200 to 22ff, 460 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_10_oblique.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 0 to 7f, 1435 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 80 to ff, 1715 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 100 to 17f, 2375 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 180 to 24f, 2130 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 250 to 2af, 431 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 2b0 to 2ff, 415 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 370 to 3ff, 277 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 1e00 to 1eff, 4216 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 2000 to 206f, 564 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 2070 to 209f, 254 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 20a0 to 20cf, 304 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 2100 to 214f, 321 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08_bold characters 2200 to 22ff, 472 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_08_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 0 to 7f, 3247 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 80 to ff, 3978 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 100 to 17f, 5628 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 180 to 24f, 5245 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 250 to 2af, 714 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 2b0 to 2ff, 487 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 370 to 3ff, 315 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 1e00 to 1eff, 10558 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 2000 to 206f, 751 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 2070 to 209f, 290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 20a0 to 20cf, 456 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 2100 to 214f, 483 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24_bold characters 2200 to 22ff, 804 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_24_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 0 to 7f, 3286 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 80 to ff, 4055 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 100 to 17f, 5751 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 180 to 24f, 5441 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 250 to 2af, 675 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 2b0 to 2ff, 464 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 370 to 3ff, 305 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_24 characters 1e00 to 1eff, 10649 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 2000 to 206f, 710 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 2070 to 209f, 284 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 20a0 to 20cf, 477 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 2100 to 214f, 503 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_24 characters 2200 to 22ff, 801 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_24.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 0 to 7f, 1420 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 80 to ff, 1720 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 100 to 17f, 2331 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 180 to 24f, 2104 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 250 to 2af, 430 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 2b0 to 2ff, 407 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 370 to 3ff, 271 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_08 characters 1e00 to 1eff, 4181 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 2000 to 206f, 555 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 2070 to 209f, 249 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 20a0 to 20cf, 296 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 2100 to 214f, 314 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_08 characters 2200 to 22ff, 471 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_08.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 0 to 7f, 1754 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 80 to ff, 2176 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 100 to 17f, 3007 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 180 to 24f, 2757 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 250 to 2af, 471 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 2b0 to 2ff, 422 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 370 to 3ff, 280 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "sans_12 characters 1e00 to 1eff, 5443 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 2000 to 206f, 569 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 2070 to 209f, 258 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 20a0 to 20cf, 340 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 2100 to 214f, 343 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "sans_12 characters 2200 to 22ff, 561 bytes" }]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "sans_12.toit"
        }
      ]
    },
    {
      "lib_name": "serif",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 0 to 7f, 1884 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 80 to ff, 2213 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 100 to 17f, 3188 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 180 to 24f, 2847 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 250 to 2af, 483 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 2b0 to 2ff, 430 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 370 to 3ff, 286 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 1e00 to 1eff, 5805 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 2000 to 206f, 609 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 2070 to 209f, 262 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 20a0 to 20cf, 361 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 2100 to 214f, 375 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold characters 2200 to 22ff, 549 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_12_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_18 characters 0 to 7f, 2571 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_18 characters 80 to ff, 3046 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_18 characters 100 to 17f, 4337 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_18 characters 180 to 24f, 3979 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_18 characters 250 to 2af, 581 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_18 characters 2b0 to 2ff, 474 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_18 characters 370 to 3ff, 2629 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 1e00 to 1eff, 8167 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 2000 to 206f, 679 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 2070 to 209f, 271 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 20a0 to 20cf, 406 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 2100 to 214f, 662 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARROWS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 2190 to 21ff, 826 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 2200 to 22ff, 1940 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_TECHNICAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 2300 to 23ff, 285 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEOMETRIC_SHAPES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 25a0 to 25ff, 241 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18 characters 2600 to 26ff, 311 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_18.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 0 to 7f, 3692 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 80 to ff, 4434 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 100 to 17f, 6465 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 180 to 24f, 4516 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 250 to 2af, 651 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 2b0 to 2ff, 516 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 370 to 3ff, 352 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 1e00 to 1eff, 12169 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 2000 to 206f, 818 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 2070 to 209f, 300 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 20a0 to 20cf, 489 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 2100 to 214f, 566 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold_italic characters 2200 to 22ff, 778 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_24_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_14 characters 0 to 7f, 2095 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_14 characters 80 to ff, 2441 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_14 characters 100 to 17f, 3558 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_14 characters 180 to 24f, 3195 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_14 characters 250 to 2af, 512 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_14 characters 2b0 to 2ff, 458 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_14 characters 370 to 3ff, 2092 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 1e00 to 1eff, 6438 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 2000 to 206f, 645 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 2070 to 209f, 261 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 20a0 to 20cf, 381 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 2100 to 214f, 568 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARROWS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 2190 to 21ff, 699 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 2200 to 22ff, 1636 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_TECHNICAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 2300 to 23ff, 279 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEOMETRIC_SHAPES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 25a0 to 25ff, 237 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14 characters 2600 to 26ff, 297 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_14.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 0 to 7f, 2118 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 80 to ff, 2488 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 100 to 17f, 3608 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 180 to 24f, 3200 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 250 to 2af, 515 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 2b0 to 2ff, 433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 370 to 3ff, 294 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 1e00 to 1eff, 6604 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 2000 to 206f, 639 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 2070 to 209f, 265 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 20a0 to 20cf, 370 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 2100 to 214f, 399 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold characters 2200 to 22ff, 633 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_14_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 0 to 7f, 1757 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 80 to ff, 2140 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 100 to 17f, 2988 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 180 to 24f, 2161 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 250 to 2af, 424 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 2b0 to 2ff, 425 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 370 to 3ff, 284 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 1e00 to 1eff, 5345 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 2000 to 206f, 580 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 2070 to 209f, 264 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 20a0 to 20cf, 343 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 2100 to 214f, 361 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_italic characters 2200 to 22ff, 465 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_10_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_12 characters 0 to 7f, 1809 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_12 characters 80 to ff, 2193 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_12 characters 100 to 17f, 3129 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_12 characters 180 to 24f, 2868 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_12 characters 250 to 2af, 471 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_12 characters 2b0 to 2ff, 435 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_12 characters 370 to 3ff, 1919 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 1e00 to 1eff, 5622 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 2000 to 206f, 607 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 2070 to 209f, 260 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 20a0 to 20cf, 354 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 2100 to 214f, 530 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARROWS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 2190 to 21ff, 632 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 2200 to 22ff, 1394 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_TECHNICAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 2300 to 23ff, 274 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEOMETRIC_SHAPES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 25a0 to 25ff, 232 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12 characters 2600 to 26ff, 292 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_12.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 0 to 7f, 1826 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 80 to ff, 2188 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 100 to 17f, 3192 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 180 to 24f, 2251 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 250 to 2af, 439 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 2b0 to 2ff, 438 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 370 to 3ff, 297 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 1e00 to 1eff, 5729 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 2000 to 206f, 614 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 2070 to 209f, 269 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 20a0 to 20cf, 357 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 2100 to 214f, 366 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold_italic characters 2200 to 22ff, 469 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_10_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_08 characters 0 to 7f, 1457 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_08 characters 80 to ff, 1727 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_08 characters 100 to 17f, 2399 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_08 characters 180 to 24f, 2168 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_08 characters 250 to 2af, 438 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_08 characters 2b0 to 2ff, 431 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_08 characters 370 to 3ff, 1459 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 1e00 to 1eff, 4359 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 2000 to 206f, 581 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 2070 to 209f, 251 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 20a0 to 20cf, 301 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 2100 to 214f, 422 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARROWS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 2190 to 21ff, 520 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 2200 to 22ff, 1100 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_TECHNICAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 2300 to 23ff, 268 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEOMETRIC_SHAPES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 25a0 to 25ff, 231 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08 characters 2600 to 26ff, 270 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_08.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_24 characters 0 to 7f, 3395 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_24 characters 80 to ff, 4060 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_24 characters 100 to 17f, 5955 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_24 characters 180 to 24f, 5445 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_24 characters 250 to 2af, 707 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_24 characters 2b0 to 2ff, 526 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_24 characters 370 to 3ff, 3640 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 1e00 to 1eff, 11224 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 2000 to 206f, 810 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 2070 to 209f, 280 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 20a0 to 20cf, 488 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 2100 to 214f, 885 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARROWS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 2190 to 21ff, 1010 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 2200 to 22ff, 2520 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_TECHNICAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 2300 to 23ff, 358 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEOMETRIC_SHAPES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 25a0 to 25ff, 245 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24 characters 2600 to 26ff, 321 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_24.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 0 to 7f, 2205 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 80 to ff, 2674 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 100 to 17f, 3830 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 180 to 24f, 2674 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 250 to 2af, 503 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 2b0 to 2ff, 445 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 370 to 3ff, 308 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 1e00 to 1eff, 6931 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 2000 to 206f, 648 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 2070 to 209f, 271 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 20a0 to 20cf, 381 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 2100 to 214f, 399 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_bold_italic characters 2200 to 22ff, 526 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_14_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 0 to 7f, 3687 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 80 to ff, 4322 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 100 to 17f, 6417 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 180 to 24f, 4419 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 250 to 2af, 641 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 2b0 to 2ff, 493 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 370 to 3ff, 325 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 1e00 to 1eff, 11954 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 2000 to 206f, 767 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 2070 to 209f, 286 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 20a0 to 20cf, 517 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 2100 to 214f, 553 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_italic characters 2200 to 22ff, 767 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_24_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 0 to 7f, 2657 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 80 to ff, 3128 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 100 to 17f, 4572 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 180 to 24f, 4100 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 250 to 2af, 598 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 2b0 to 2ff, 457 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 370 to 3ff, 303 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 1e00 to 1eff, 8384 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 2000 to 206f, 726 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 2070 to 209f, 271 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 20a0 to 20cf, 423 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 2100 to 214f, 453 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold characters 2200 to 22ff, 735 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_18_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_10 characters 0 to 7f, 1705 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_10 characters 80 to ff, 2076 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_10 characters 100 to 17f, 2899 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_10 characters 180 to 24f, 2642 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_10 characters 250 to 2af, 460 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_10 characters 2b0 to 2ff, 449 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [{ "text": "serif_10 characters 370 to 3ff, 1733 bytes" }]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 1e00 to 1eff, 5342 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 2000 to 206f, 603 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 2070 to 209f, 256 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 20a0 to 20cf, 338 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 2100 to 214f, 490 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "ARROWS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 2190 to 21ff, 578 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 2200 to 22ff, 1282 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_TECHNICAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 2300 to 23ff, 270 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GEOMETRIC_SHAPES",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 25a0 to 25ff, 232 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MISCELLANEOUS_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10 characters 2600 to 26ff, 285 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_10.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 0 to 7f, 1744 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 80 to ff, 2103 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 100 to 17f, 2969 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 180 to 24f, 2676 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 250 to 2af, 471 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 2b0 to 2ff, 433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 370 to 3ff, 287 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 1e00 to 1eff, 5392 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 2000 to 206f, 583 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 2070 to 209f, 260 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 20a0 to 20cf, 345 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 2100 to 214f, 361 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_10_bold characters 2200 to 22ff, 536 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_10_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 0 to 7f, 2849 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 80 to ff, 3545 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 100 to 17f, 5077 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 180 to 24f, 3609 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 250 to 2af, 547 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 2b0 to 2ff, 462 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 370 to 3ff, 314 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 1e00 to 1eff, 9394 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 2000 to 206f, 715 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 2070 to 209f, 282 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 20a0 to 20cf, 446 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 2100 to 214f, 490 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_bold_italic characters 2200 to 22ff, 598 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_18_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 0 to 7f, 2907 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 80 to ff, 3420 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 100 to 17f, 5061 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 180 to 24f, 3593 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 250 to 2af, 546 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 2b0 to 2ff, 462 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 370 to 3ff, 308 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 1e00 to 1eff, 9283 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 2000 to 206f, 699 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 2070 to 209f, 276 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 20a0 to 20cf, 449 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 2100 to 214f, 478 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_18_italic characters 2200 to 22ff, 625 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_18_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 0 to 7f, 1553 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 80 to ff, 1858 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 100 to 17f, 2583 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 180 to 24f, 1839 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 250 to 2af, 406 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 2b0 to 2ff, 428 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 370 to 3ff, 289 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 1e00 to 1eff, 4651 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 2000 to 206f, 578 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 2070 to 209f, 263 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 20a0 to 20cf, 319 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 2100 to 214f, 340 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold_italic characters 2200 to 22ff, 438 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_08_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 0 to 7f, 2197 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 80 to ff, 2629 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 100 to 17f, 3727 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 180 to 24f, 2635 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 250 to 2af, 479 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 2b0 to 2ff, 432 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 370 to 3ff, 295 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 1e00 to 1eff, 6838 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 2000 to 206f, 613 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 2070 to 209f, 270 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 20a0 to 20cf, 385 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 2100 to 214f, 397 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_14_italic characters 2200 to 22ff, 537 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_14_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 0 to 7f, 1508 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 80 to ff, 1814 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 100 to 17f, 2503 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 180 to 24f, 1782 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 250 to 2af, 398 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 2b0 to 2ff, 415 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 370 to 3ff, 281 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 1e00 to 1eff, 4507 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 2000 to 206f, 563 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 2070 to 209f, 258 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 20a0 to 20cf, 310 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 2100 to 214f, 330 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_italic characters 2200 to 22ff, 429 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_08_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 0 to 7f, 3421 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 80 to ff, 4128 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 100 to 17f, 6180 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 180 to 24f, 5578 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 250 to 2af, 725 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 2b0 to 2ff, 509 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 370 to 3ff, 325 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 1e00 to 1eff, 11627 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 2000 to 206f, 820 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 2070 to 209f, 290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 20a0 to 20cf, 487 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 2100 to 214f, 532 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_24_bold characters 2200 to 22ff, 864 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_24_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 0 to 7f, 2009 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 80 to ff, 2387 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 100 to 17f, 3438 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 180 to 24f, 2360 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 250 to 2af, 445 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 2b0 to 2ff, 439 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 370 to 3ff, 299 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 1e00 to 1eff, 6159 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 2000 to 206f, 612 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 2070 to 209f, 275 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 20a0 to 20cf, 362 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 2100 to 214f, 381 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_bold_italic characters 2200 to 22ff, 480 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_12_bold_italic.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 0 to 7f, 1489 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 80 to ff, 1741 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 100 to 17f, 2419 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 180 to 24f, 2145 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 250 to 2af, 441 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 2b0 to 2ff, 417 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 370 to 3ff, 280 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 1e00 to 1eff, 4350 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 2000 to 206f, 570 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 2070 to 209f, 256 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 20a0 to 20cf, 306 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 2100 to 214f, 328 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_08_bold characters 2200 to 22ff, 488 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_08_bold.toit"
        },
        {
          "top_level": {
            "module_globals": [
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 0 to 7f, 2011 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_1_SUPPLEMENT",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 80 to ff, 2433 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_A",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 100 to 17f, 3474 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_B",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 180 to 24f, 2400 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "IPA_EXTENSIONS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 250 to 2af, 453 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SPACING_MODIFIER_LETTERS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 2b0 to 2ff, 427 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GREEK_AND_COPTIC",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 370 to 3ff, 290 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LATIN_EXTENDED_ADDITIONAL",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 1e00 to 1eff, 6291 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "GENERAL_PUNCTUATION",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 2000 to 206f, 585 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "SUPERSCRIPTS_AND_SUBSCRIPTS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 2070 to 209f, 267 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "CURRENCY_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 20a0 to 20cf, 370 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "LETTERLIKE_SYMBOLS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 2100 to 214f, 376 bytes"
                        }
                      ]
                    ]
                  }
                ]
              },
              {
                "global_name": "MATHEMATICAL_OPERATORS",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "serif_12_italic characters 2200 to 22ff, 512 bytes"
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "serif_12_italic.toit"
        }
      ]
    },
    {
      "lib_name": "toitware",
      "lib_modules": [
        {
          "top_level": {
            "module_globals": [
              { "global_name": "BATTERY_0" },
              { "global_name": "BATTERY_STEPS" },
              { "global_name": "PLUGGED_IN" },
              { "global_name": "CONSOLE" },
              { "global_name": "GPS" },
              { "global_name": "GPS_SEARCH" },
              { "global_name": "NO_GPS" },
              { "global_name": "NBIOT" },
              { "global_name": "NBIOT_CONNECTING" },
              { "global_name": "NO_NBIOT" },
              { "global_name": "WIFI" },
              { "global_name": "WIFI_CONNECTING" },
              { "global_name": "NO_WIFI" },
              {
                "global_name": "ASCII",
                "global_toitdoc": [
                  {
                    "statements": [
                      [
                        {
                          "text": "Device status icons, approximately 16 pixels wide."
                        }
                      ]
                    ]
                  }
                ]
              }
            ]
          },
          "module": "status_icons_16.toit"
        }
      ]
    }
  ]
}
