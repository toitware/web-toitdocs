{"ast":null,"code":"var _jsxFileName = \"/Users/krzysztofmroz/toit_folder/web-toitdocs/src/components/toitdoc_info.js\";\n// Copyright (C) 2020 Toitware ApS. All rights reserved.\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    backgroundColor: \"#9d9d9c11\",\n    border: \"1px solid rgba(0, 0, 0, 0.12)\",\n    borderRadius: \"4px\",\n    padding: \"2px\"\n  },\n  paperSection: {\n    padding: theme.spacing(1),\n    width: \"auto\",\n    backgroundColor: \"#9d9d9c11\"\n  }\n}));\n\nfunction StatementsPrint(i, classes) {\n  i.statements.map((statements, j) => {\n    if (statements.text !== undefined || statements.itemized !== undefined) {\n      if (statements.itemized) {\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          key: \"statements_list_\" + j,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }\n        }, statements.itemized.map((item, k) => {\n          return /*#__PURE__*/React.createElement(\"li\", {\n            key: k,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }\n          }, item.map((item_content, a) => {\n            if (item_content.is_code !== undefined) {\n              return /*#__PURE__*/React.createElement(\"code\", {\n                className: classes.paper,\n                key: a,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 38,\n                  columnNumber: 25\n                }\n              }, item_content.text);\n            } else if (item_content.is_code_section !== undefined) {\n              return /*#__PURE__*/React.createElement(Paper, {\n                elevation: 0,\n                variant: \"outlined\",\n                className: classes.paperSection,\n                key: a,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 25\n                }\n              }, /*#__PURE__*/React.createElement(\"pre\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 27\n                }\n              }, /*#__PURE__*/React.createElement(\"code\", {\n                className: classes.paper,\n                key: a,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 29\n                }\n              }, item_content.text)));\n            } else {\n              return item_content.text;\n            }\n          }));\n        }));\n      } else {\n        if (statements.is_code !== undefined) {\n          return /*#__PURE__*/React.createElement(\"code\", {\n            className: classes.paper,\n            key: j,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 13\n            }\n          }, statements.text);\n        } else if (statements.is_code_section !== undefined & i.title !== \"Examples\") {\n          {\n            console.log(i);\n          }\n          return /*#__PURE__*/React.createElement(Paper, {\n            elevation: 0,\n            variant: \"outlined\",\n            className: classes.paperSection,\n            key: j,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"pre\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }\n          }, /*#__PURE__*/React.createElement(\"code\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }\n          }, statements.text)));\n        } else if (statements.is_code_section !== undefined & i.title === \"Examples\") {\n          return /*#__PURE__*/React.createElement(Paper, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(\"pre\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }\n          }, /*#__PURE__*/React.createElement(\"code\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 19\n            }\n          }, statements.text)));\n        } else {\n          if (statements.path) {\n            return /*#__PURE__*/React.createElement(Link, {\n              to: `/${statements.path}`,\n              key: j,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 15\n              }\n            }, statements.text);\n          } else {\n            return statements.text;\n          }\n        }\n      }\n    } else {\n      return /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: j,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }, statements.map((content, n) => {\n        if (content.itemized) {\n          return /*#__PURE__*/React.createElement(\"ul\", {\n            key: n,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }\n          }, content.itemized.map((item, k) => {\n            return /*#__PURE__*/React.createElement(\"li\", {\n              key: k,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 23\n              }\n            }, item.map((item_content, b) => {\n              if (item_content.is_code !== undefined) {\n                return /*#__PURE__*/React.createElement(\"code\", {\n                  className: classes.paper,\n                  key: b,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 128,\n                    columnNumber: 31\n                  }\n                }, item_content.text);\n              } else if (item_content.is_code_section !== undefined) {\n                return /*#__PURE__*/React.createElement(Paper, {\n                  elevation: 0,\n                  variant: \"outlined\",\n                  className: classes.paperSection,\n                  key: b,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 31\n                  }\n                }, /*#__PURE__*/React.createElement(\"pre\", {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 142,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(\"code\", {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 143,\n                    columnNumber: 35\n                  }\n                }, item_content.text)));\n              } else {\n                return item_content.text;\n              }\n            }));\n          }));\n        } else {\n          if (content.is_code !== undefined) {\n            return /*#__PURE__*/React.createElement(\"code\", {\n              className: classes.paper,\n              key: n,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 19\n              }\n            }, content.text);\n          } else if (content.is_code_section !== undefined) {\n            return /*#__PURE__*/React.createElement(Paper, {\n              elevation: 0,\n              variant: \"outlined\",\n              className: classes.paperSection,\n              key: n,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 19\n              }\n            }, /*#__PURE__*/React.createElement(\"pre\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(\"code\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 23\n              }\n            }, content.text)));\n          } else {\n            if (content.path) {\n              return /*#__PURE__*/React.createElement(Link, {\n                to: `/${content.path}`,\n                key: n,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 21\n                }\n              }, content.text);\n            } else {\n              return content.text;\n            }\n          }\n        }\n      }));\n    }\n  });\n} //Function that prints the content of currently presented element\n\n\nfunction Toitdocs(props) {\n  const classes = useStyles();\n\n  if (props.value !== undefined) {\n    return props.value.map((i, s) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        key: s,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 15\n        }\n      }, i.title))), /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        key: s,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }\n      }, StatementsPrint(i, classes))));\n    });\n  } else {\n    return null;\n  }\n}\n\nexport default Toitdocs;","map":{"version":3,"sources":["/Users/krzysztofmroz/toit_folder/web-toitdocs/src/components/toitdoc_info.js"],"names":["React","makeStyles","Link","Paper","Grid","useStyles","theme","root","flexGrow","paper","backgroundColor","border","borderRadius","padding","paperSection","spacing","width","StatementsPrint","i","classes","statements","map","j","text","undefined","itemized","item","k","item_content","a","is_code","is_code_section","title","console","log","path","content","n","b","Toitdocs","props","value","s"],"mappings":"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","sourcesContent":["// Copyright (C) 2020 Toitware ApS. All rights reserved.\n\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Link } from \"react-router-dom\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    backgroundColor: \"#9d9d9c11\",\n    border: \"1px solid rgba(0, 0, 0, 0.12)\",\n    borderRadius: \"4px\",\n    padding: \"2px\",\n  },\n  paperSection: {\n    padding: theme.spacing(1),\n    width: \"auto\",\n    backgroundColor: \"#9d9d9c11\",\n  },\n}));\n\nfunction StatementsPrint(i, classes) {\n  i.statements.map((statements, j) => {\n    if (statements.text !== undefined || statements.itemized !== undefined) {\n      if (statements.itemized) {\n        return (\n          <ul key={\"statements_list_\" + j}>\n            {statements.itemized.map((item, k) => {\n              return (\n                <li key={k}>\n                  {item.map((item_content, a) => {\n                    if (item_content.is_code !== undefined) {\n                      return (\n                        <code className={classes.paper} key={a}>\n                          {item_content.text}\n                        </code>\n                      );\n                    } else if (item_content.is_code_section !== undefined) {\n                      return (\n                        <Paper\n                          elevation={0}\n                          variant=\"outlined\"\n                          className={classes.paperSection}\n                          key={a}\n                        >\n                          <pre>\n                            <code className={classes.paper} key={a}>\n                              {item_content.text}\n                            </code>\n                          </pre>\n                        </Paper>\n                      );\n                    } else {\n                      return item_content.text;\n                    }\n                  })}\n                </li>\n              );\n            })}\n          </ul>\n        );\n      } else {\n        if (statements.is_code !== undefined) {\n          return (\n            <code className={classes.paper} key={j}>\n              {statements.text}\n            </code>\n          );\n        } else if (\n          (statements.is_code_section !== undefined) &\n          (i.title !== \"Examples\")\n        ) {\n          {\n            console.log(i);\n          }\n          return (\n            <Paper\n              elevation={0}\n              variant=\"outlined\"\n              className={classes.paperSection}\n              key={j}\n            >\n              <pre>\n                <code>{statements.text}</code>\n              </pre>\n            </Paper>\n          );\n        } else if (\n          (statements.is_code_section !== undefined) &\n          (i.title === \"Examples\")\n        ) {\n          return (\n            <Paper>\n                <pre>\n                  <code>{statements.text}</code>\n                </pre>\n            </Paper>\n          );\n        } else {\n          if (statements.path) {\n            return (\n              <Link to={`/${statements.path}`} key={j}>\n                {statements.text}\n              </Link>\n            );\n          } else {\n            return statements.text;\n          }\n        }\n      }\n    } else {\n      return (\n        <Grid item key={j}>\n          {statements.map((content, n) => {\n            if (content.itemized) {\n              return (\n                <ul key={n}>\n                  {content.itemized.map((item, k) => {\n                    return (\n                      <li key={k}>\n                        {item.map((item_content, b) => {\n                          if (item_content.is_code !== undefined) {\n                            return (\n                              <code className={classes.paper} key={b}>\n                                {item_content.text}\n                              </code>\n                            );\n                          } else if (\n                            item_content.is_code_section !== undefined\n                          ) {\n                            return (\n                              <Paper\n                                elevation={0}\n                                variant=\"outlined\"\n                                className={classes.paperSection}\n                                key={b}\n                              >\n                                <pre>\n                                  <code>{item_content.text}</code>\n                                </pre>\n                              </Paper>\n                            );\n                          } else {\n                            return item_content.text;\n                          }\n                        })}\n                      </li>\n                    );\n                  })}\n                </ul>\n              );\n            } else {\n              if (content.is_code !== undefined) {\n                return (\n                  <code className={classes.paper} key={n}>\n                    {content.text}\n                  </code>\n                );\n              } else if (content.is_code_section !== undefined) {\n                return (\n                  <Paper\n                    elevation={0}\n                    variant=\"outlined\"\n                    className={classes.paperSection}\n                    key={n}\n                  >\n                    <pre>\n                      <code>{content.text}</code>\n                    </pre>\n                  </Paper>\n                );\n              } else {\n                if (content.path) {\n                  return (\n                    <Link to={`/${content.path}`} key={n}>\n                      {content.text}\n                    </Link>\n                  );\n                } else {\n                  return content.text;\n                }\n              }\n            }\n          })}\n        </Grid>\n      );\n    }\n  });\n}\n\n//Function that prints the content of currently presented element\n\nfunction Toitdocs(props) {\n  const classes = useStyles();\n  if (props.value !== undefined) {\n    return props.value.map((i, s) => {\n      return (\n        <div className={classes.root} key={s}>\n          <Grid container>\n            <Grid item>\n              <strong>{i.title}</strong>\n            </Grid>\n          </Grid>\n          <Grid container>\n            <Grid item key={s}>\n              {StatementsPrint(i, classes)}\n            </Grid>\n          </Grid>\n        </div>\n      );\n    });\n  } else {\n    return null;\n  }\n}\n\nexport default Toitdocs;\n"]},"metadata":{},"sourceType":"module"}