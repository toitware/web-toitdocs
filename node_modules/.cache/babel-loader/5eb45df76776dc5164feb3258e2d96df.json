{"ast":null,"code":"// Copyright (C) 2020 Toitware ApS. All rights reserved.\nimport Fuse from \"fuse.js\";\nimport data from \"../libraries.json\"; //Parameters for searching through libraries, modules and classes\n\nconst optionsBasic = {\n  shouldSort: false,\n  includeMatches: true,\n  findAllMatches: true,\n  includeScore: true,\n  threshold: 0.2,\n  ignoreLocation: true,\n  maxPatternLength: 32,\n  minMatchCharLength: 2,\n  keys: [\"libraries.lib_name\", \"libraries.lib_modules.module\", \"libraries.lib_modules.module_classes.class_name\"]\n}; //Parameters for searching through Aliases\n\nconst foundAliases = findAliases(data.libraries);\nconst optionsAliases = {\n  shouldSort: false,\n  includeMatches: true,\n  findAllMatches: true,\n  includeScore: true,\n  threshold: 0.2,\n  ignoreLocation: true,\n  maxPatternLength: 32,\n  minMatchCharLength: 2,\n  keys: [\"text\"]\n};\n\nfunction findAliases(object) {\n  var found = [];\n  var current_return_path;\n  var current_class_name;\n  iterateObject(object);\n\n  function iterateObject(obj) {\n    for (var prop in obj) {\n      if (prop === \"return_path\") {\n        current_return_path = obj[prop];\n      } else if (prop === \"class_name\") {\n        current_class_name = obj[prop];\n      }\n\n      if (typeof obj[prop] === \"object\") {\n        iterateObject(obj[prop]);\n      } else {\n        if (prop === \"title\" & obj[prop] === \"Aliases\") {\n          obj.statements.map(elem => {\n            elem.map(eleme => {\n              eleme.itemized.map(elemen => {\n                elemen.map(element => {\n                  if (element.is_code === true) {\n                    var tempObj = element;\n                    tempObj.path = current_return_path + \"/\" + current_class_name;\n                    found.push(tempObj);\n                  }\n                });\n              });\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return found;\n} //Create search modules\n\n\nconst myIndex = Fuse.createIndex(optionsBasic.keys, [data]);\nconst fuseBasic = new Fuse([data], optionsBasic, myIndex);\nconst fuseAliases = new Fuse(foundAliases, optionsAliases);\nexport { fuseBasic as fuse, fuseAliases, myIndex };","map":{"version":3,"sources":["/Users/krzysztofmroz/toit_folder/web-toitdocs/src/components/fuse.js"],"names":["Fuse","data","optionsBasic","shouldSort","includeMatches","findAllMatches","includeScore","threshold","ignoreLocation","maxPatternLength","minMatchCharLength","keys","foundAliases","findAliases","libraries","optionsAliases","object","found","current_return_path","current_class_name","iterateObject","obj","prop","statements","map","elem","eleme","itemized","elemen","element","is_code","tempObj","path","push","myIndex","createIndex","fuseBasic","fuseAliases","fuse"],"mappings":"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","sourcesContent":["// Copyright (C) 2020 Toitware ApS. All rights reserved.\n\nimport Fuse from \"fuse.js\";\nimport data from \"../libraries.json\";\n\n//Parameters for searching through libraries, modules and classes\nconst optionsBasic = {\n  shouldSort: false,\n  includeMatches: true,\n  findAllMatches: true,\n  includeScore: true,\n  threshold: 0.2,\n  ignoreLocation: true,\n  maxPatternLength: 32,\n  minMatchCharLength: 2,\n  keys: [\n    \"libraries.lib_name\",\n    \"libraries.lib_modules.module\",\n    \"libraries.lib_modules.module_classes.class_name\",\n  ],\n};\n\n//Parameters for searching through Aliases\nconst foundAliases = findAliases(data.libraries);\n\nconst optionsAliases = {\n  shouldSort: false,\n  includeMatches: true,\n  findAllMatches: true,\n  includeScore: true,\n  threshold: 0.2,\n  ignoreLocation: true,\n  maxPatternLength: 32,\n  minMatchCharLength: 2,\n  keys: [\"text\"],\n};\n\nfunction findAliases(object) {\n  var found = [];\n  var current_return_path;\n  var current_class_name;\n  iterateObject(object);\n\n  function iterateObject(obj) {\n    for (var prop in obj) {\n      if (prop === \"return_path\") {\n        current_return_path = obj[prop];\n      } else if (prop === \"class_name\") {\n        current_class_name = obj[prop];\n      }\n\n      if (typeof obj[prop] === \"object\") {\n        iterateObject(obj[prop]);\n      } else {\n        if ((prop === \"title\") & (obj[prop] === \"Aliases\")) {\n          obj.statements.map((elem) => {\n            elem.map((eleme) => {\n              eleme.itemized.map((elemen) => {\n                elemen.map((element) => {\n                  if (element.is_code === true) {\n                    var tempObj = element;\n                    tempObj.path =\n                      current_return_path + \"/\" + current_class_name;\n                    found.push(tempObj);\n                  }\n                });\n              });\n            });\n          });\n        }\n      }\n    }\n  }\n  return found;\n}\n\n//Create search modules\nconst myIndex = Fuse.createIndex(optionsBasic.keys, [data]);\nconst fuseBasic = new Fuse([data], optionsBasic, myIndex);\nconst fuseAliases = new Fuse(foundAliases, optionsAliases);\n\nexport { fuseBasic as fuse, fuseAliases, myIndex };\n"]},"metadata":{},"sourceType":"module"}